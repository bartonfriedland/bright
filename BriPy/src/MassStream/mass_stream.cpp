/* Generated by Cython 0.14.1rc3 on Fri Feb 18 21:09:36 2011 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE_API__mass_stream
#include <utility>
#include <map>
#include <set>
#include <string>
#include "../MassStream.h"
#include "stdexcept"

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "mass_stream.pyx",
};

/* Type declarations */

/* "mass_stream.pxd":3
 * cimport cpp_mass_stream
 * 
 * cdef class MassStream:             # <<<<<<<<<<<<<<
 *     cdef cpp_mass_stream.MassStream * ms_pointer
 * #    pass
 */

struct __pyx_obj_11mass_stream_MassStream {
  PyObject_HEAD
  MassStream *ms_pointer;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
  end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
  }
  #define __Pyx_RefNannySetupContext(name)           void *__pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XDECREF(r) do { if((r) != NULL) {__Pyx_DECREF(r);} } while(0)
#else
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);} } while(0)
#define __Pyx_XGOTREF(r) do { if((r) != NULL) {__Pyx_GOTREF(r);} } while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE long __Pyx_NegateNonNeg(long b) { return unlikely(b < 0) ? b : !b; }
static CYTHON_INLINE PyObject* __Pyx_PyBoolOrNull_FromLong(long b) {
    return unlikely(b < 0) ? NULL : __Pyx_PyBool_FromLong(b);
}

static double __Pyx__PyObject_AsDouble(PyObject* obj); /* proto */

#define __Pyx_PyObject_AsDouble(obj) \
    ((likely(PyFloat_CheckExact(obj))) ? \
     PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list); /*proto*/

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

#ifndef __Pyx_CppExn2PyErr
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::invalid_argument& exn) {
    // Catch a handful of different errors here and turn them into the
    // equivalent Python errors.
    // Change invalid_argument to ValueError
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::out_of_range& exn) {
    // Change out_of_range to IndexError
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
/* Module declarations from libcpp.utility */

/* Module declarations from libcpp.map */

/* Module declarations from libcpp.pair */

/* Module declarations from libcpp.set */

/* Module declarations from std */

/* Module declarations from cpp_mass_stream */

/* Module declarations from stlconverters */

static std::map<int,double> (*__pyx_f_13stlconverters_dict_to_map_int_dbl)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_13stlconverters_map_to_dict_int_dbl)(std::map<int,double>); /*proto*/
static std::map<std::string,int> (*__pyx_f_13stlconverters_dict_to_map_str_int)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_13stlconverters_map_to_dict_str_int)(std::map<std::string,int>); /*proto*/
static std::map<int,std::string> (*__pyx_f_13stlconverters_dict_to_map_int_str)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_13stlconverters_map_to_dict_int_str)(std::map<int,std::string>); /*proto*/
static std::map<std::string,double> (*__pyx_f_13stlconverters_dict_to_map_str_dbl)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_13stlconverters_map_to_dict_str_dbl)(std::map<std::string,double>); /*proto*/
static std::set<int> (*__pyx_f_13stlconverters_py_to_cpp_set_int)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_13stlconverters_cpp_to_py_set_int)(std::set<int>); /*proto*/
static std::set<std::string> (*__pyx_f_13stlconverters_py_to_cpp_set_str)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_13stlconverters_cpp_to_py_set_str)(std::set<std::string>); /*proto*/
/* Module declarations from mass_stream */

static PyTypeObject *__pyx_ptype_11mass_stream_MassStream = 0;
#define __Pyx_MODULE_NAME "mass_stream"
static int __pyx_module_is_main_mass_stream = 0;

/* Implementation of mass_stream */
static PyObject *__pyx_builtin_basestring;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_NotImplemented;
static char __pyx_k_1[] = "";
static char __pyx_k_2[] = "The file {0} does not exist!";
static char __pyx_k_3[] = "The mass stream isotopic vector must be a dict, str, or None.";
static char __pyx_k_5[] = "Isotopes must be strings or integers.";
static char __pyx_k_7[] = "Python wrapper for isoname library.";
static char __pyx_k__os[] = "os";
static char __pyx_k__row[] = "row";
static char __pyx_k__Here[] = "Here";
static char __pyx_k__LLzz[] = "LLzz";
static char __pyx_k__comp[] = "comp";
static char __pyx_k__getU[] = "getU";
static char __pyx_k__mass[] = "mass";
static char __pyx_k__name[] = "name";
static char __pyx_k__path[] = "path";
static char __pyx_k__zzLL[] = "zzLL";
static char __pyx_k__Print[] = "Print";
static char __pyx_k__c_str[] = "c_str";
static char __pyx_k__getFP[] = "getFP";
static char __pyx_k__getMA[] = "getMA";
static char __pyx_k__getPU[] = "getPU";
static char __pyx_k__upper[] = "upper";
static char __pyx_k__exists[] = "exists";
static char __pyx_k__format[] = "format";
static char __pyx_k__getACT[] = "getACT";
static char __pyx_k__getLAN[] = "getLAN";
static char __pyx_k__getTRU[] = "getTRU";
static char __pyx_k__insert[] = "insert";
static char __pyx_k__isovec[] = "isovec";
static char __pyx_k__IOError[] = "IOError";
static char __pyx_k____div__[] = "__div__";
static char __pyx_k__isoname[] = "isoname";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__filename[] = "filename";
static char __pyx_k__Normalize[] = "Normalize";
static char __pyx_k__TypeError[] = "TypeError";
static char __pyx_k__groupname[] = "groupname";
static char __pyx_k__basestring[] = "basestring";
static char __pyx_k__ms_pointer[] = "ms_pointer";
static char __pyx_k__multByMass[] = "multByMass";
static char __pyx_k__getSubStream[] = "getSubStream";
static char __pyx_k__iso_sequence[] = "iso_sequence";
static char __pyx_k____add_float__[] = "__add_float__";
static char __pyx_k____div_float__[] = "__div_float__";
static char __pyx_k____mul_float__[] = "__mul_float__";
static char __pyx_k__atomic_weight[] = "atomic_weight";
static char __pyx_k__NotImplemented[] = "NotImplemented";
static char __pyx_k__load_from_hdf5[] = "load_from_hdf5";
static char __pyx_k__load_from_text[] = "load_from_text";
static char __pyx_k__mixed_2_zzaaam[] = "mixed_2_zzaaam";
static char __pyx_k__norm_comp_dict[] = "norm_comp_dict";
static char __pyx_k____add_mass_stream__[] = "__add_mass_stream__";
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_n_s__Here;
static PyObject *__pyx_n_s__IOError;
static PyObject *__pyx_n_s__LLzz;
static PyObject *__pyx_n_s__Normalize;
static PyObject *__pyx_n_s__NotImplemented;
static PyObject *__pyx_n_s__Print;
static PyObject *__pyx_n_s__TypeError;
static PyObject *__pyx_n_s____add_float__;
static PyObject *__pyx_n_s____add_mass_stream__;
static PyObject *__pyx_n_s____div__;
static PyObject *__pyx_n_s____div_float__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____mul_float__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__atomic_weight;
static PyObject *__pyx_n_s__basestring;
static PyObject *__pyx_n_s__c_str;
static PyObject *__pyx_n_s__comp;
static PyObject *__pyx_n_s__exists;
static PyObject *__pyx_n_s__filename;
static PyObject *__pyx_n_s__format;
static PyObject *__pyx_n_s__getACT;
static PyObject *__pyx_n_s__getFP;
static PyObject *__pyx_n_s__getLAN;
static PyObject *__pyx_n_s__getMA;
static PyObject *__pyx_n_s__getPU;
static PyObject *__pyx_n_s__getSubStream;
static PyObject *__pyx_n_s__getTRU;
static PyObject *__pyx_n_s__getU;
static PyObject *__pyx_n_s__groupname;
static PyObject *__pyx_n_s__insert;
static PyObject *__pyx_n_s__iso_sequence;
static PyObject *__pyx_n_s__isoname;
static PyObject *__pyx_n_s__isovec;
static PyObject *__pyx_n_s__load_from_hdf5;
static PyObject *__pyx_n_s__load_from_text;
static PyObject *__pyx_n_s__mass;
static PyObject *__pyx_n_s__mixed_2_zzaaam;
static PyObject *__pyx_n_s__ms_pointer;
static PyObject *__pyx_n_s__multByMass;
static PyObject *__pyx_n_s__name;
static PyObject *__pyx_n_s__norm_comp_dict;
static PyObject *__pyx_n_s__os;
static PyObject *__pyx_n_s__path;
static PyObject *__pyx_n_s__row;
static PyObject *__pyx_n_s__upper;
static PyObject *__pyx_n_s__zzLL;
static PyObject *__pyx_k_tuple_4;
static PyObject *__pyx_k_tuple_6;

/* "mass_stream.pyx":45
 *     #cdef cpp_mass_stream.MassStream * ms_pointer
 * 
 *     def __cinit__(self, isovec=None, float mass=-1.0, char * name=''):             # <<<<<<<<<<<<<<
 *         """MassStream C++ constuctor."""
 *         cdef cpp_map[int, double] comp_dict
 */

static int __pyx_pf_11mass_stream_10MassStream___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_11mass_stream_10MassStream___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_isovec = 0;
  float __pyx_v_mass;
  char *__pyx_v_name;
  std::map<int,double> __pyx_v_comp_dict;
  int __pyx_r;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  char *__pyx_t_5;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__isovec,&__pyx_n_s__mass,&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__isovec);
        if (value) { values[0] = value; kw_args--; }
      }
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__mass);
        if (value) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_isovec = values[0];
    if (values[1]) {
      __pyx_v_mass = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_mass == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_mass = ((float)-1.0);
    }
    if (values[2]) {
      __pyx_v_name = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_name = ((char *)__pyx_k_1);
    }
  } else {
    __pyx_v_isovec = ((PyObject *)Py_None);
    __pyx_v_mass = ((float)-1.0);
    __pyx_v_name = ((char *)__pyx_k_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_mass = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_mass == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_isovec = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.__cinit__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "mass_stream.pyx":49
 *         cdef cpp_map[int, double] comp_dict
 * 
 *         if isinstance(isovec, dict):             # <<<<<<<<<<<<<<
 *             # Mass Stream from dict
 *             comp_dict = conv.dict_to_map_int_dbl(isovec)
 */
  __pyx_t_1 = PyDict_Check(__pyx_v_isovec); 
  if (__pyx_t_1) {

    /* "mass_stream.pyx":51
 *         if isinstance(isovec, dict):
 *             # Mass Stream from dict
 *             comp_dict = conv.dict_to_map_int_dbl(isovec)             # <<<<<<<<<<<<<<
 *             self.ms_pointer = new cpp_mass_stream.MassStream(comp_dict, mass, std.string(name))
 * 
 */
    if (!(likely(PyDict_CheckExact(__pyx_v_isovec))||((__pyx_v_isovec) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected dict, got %.200s", Py_TYPE(__pyx_v_isovec)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_comp_dict = __pyx_f_13stlconverters_dict_to_map_int_dbl(((PyObject*)__pyx_v_isovec));

    /* "mass_stream.pyx":52
 *             # Mass Stream from dict
 *             comp_dict = conv.dict_to_map_int_dbl(isovec)
 *             self.ms_pointer = new cpp_mass_stream.MassStream(comp_dict, mass, std.string(name))             # <<<<<<<<<<<<<<
 * 
 *         elif isinstance(isovec, basestring):
 */
    ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer = new MassStream(__pyx_v_comp_dict, __pyx_v_mass, std::string(__pyx_v_name));
    goto __pyx_L6;
  }

  /* "mass_stream.pyx":54
 *             self.ms_pointer = new cpp_mass_stream.MassStream(comp_dict, mass, std.string(name))
 * 
 *         elif isinstance(isovec, basestring):             # <<<<<<<<<<<<<<
 *             # Mass Stream from file
 *             if os.path.exists(isovec):
 */
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_isovec, __pyx_builtin_basestring); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "mass_stream.pyx":56
 *         elif isinstance(isovec, basestring):
 *             # Mass Stream from file
 *             if os.path.exists(isovec):             # <<<<<<<<<<<<<<
 *                 print "Here"
 *                 self.ms_pointer = new cpp_mass_stream.MassStream(<char *> isovec, mass, std.string(name))
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__exists); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(__pyx_v_isovec);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_isovec);
    __Pyx_GIVEREF(__pyx_v_isovec);
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "mass_stream.pyx":57
 *             # Mass Stream from file
 *             if os.path.exists(isovec):
 *                 print "Here"             # <<<<<<<<<<<<<<
 *                 self.ms_pointer = new cpp_mass_stream.MassStream(<char *> isovec, mass, std.string(name))
 *             else:
 */
      if (__Pyx_PrintOne(0, ((PyObject *)__pyx_n_s__Here)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "mass_stream.pyx":58
 *             if os.path.exists(isovec):
 *                 print "Here"
 *                 self.ms_pointer = new cpp_mass_stream.MassStream(<char *> isovec, mass, std.string(name))             # <<<<<<<<<<<<<<
 *             else:
 *                 raise IOError("The file {0} does not exist!".format(isovec))
 */
      __pyx_t_5 = PyBytes_AsString(__pyx_v_isovec); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer = new MassStream(__pyx_t_5, __pyx_v_mass, std::string(__pyx_v_name));
      goto __pyx_L7;
    }
    /*else*/ {

      /* "mass_stream.pyx":60
 *                 self.ms_pointer = new cpp_mass_stream.MassStream(<char *> isovec, mass, std.string(name))
 *             else:
 *                 raise IOError("The file {0} does not exist!".format(isovec))             # <<<<<<<<<<<<<<
 * 
 *         elif isovec is None:
 */
      __pyx_t_4 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_2), __pyx_n_s__format); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __Pyx_INCREF(__pyx_v_isovec);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_isovec);
      __Pyx_GIVEREF(__pyx_v_isovec);
      __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L7:;
    goto __pyx_L6;
  }

  /* "mass_stream.pyx":62
 *                 raise IOError("The file {0} does not exist!".format(isovec))
 * 
 *         elif isovec is None:             # <<<<<<<<<<<<<<
 *             # Empty mass stream
 *             self.ms_pointer = new cpp_mass_stream.MassStream()
 */
  __pyx_t_1 = (__pyx_v_isovec == Py_None);
  if (__pyx_t_1) {

    /* "mass_stream.pyx":64
 *         elif isovec is None:
 *             # Empty mass stream
 *             self.ms_pointer = new cpp_mass_stream.MassStream()             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer = new MassStream();
    goto __pyx_L6;
  }
  /*else*/ {

    /* "mass_stream.pyx":68
 *         else:
 *             # Bad MassStream
 *             raise TypeError("The mass stream isotopic vector must be a dict, str, or None.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mass_stream.MassStream.__cinit__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":71
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """MassStream C++ destructor."""
 *         del self.ms_pointer
 */

static void __pyx_pf_11mass_stream_10MassStream_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_11mass_stream_10MassStream_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "mass_stream.pyx":73
 *     def __dealloc__(self):
 *         """MassStream C++ destructor."""
 *         del self.ms_pointer             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer;

  __Pyx_RefNannyFinishContext();
}

/* "mass_stream.pyx":81
 * 
 *     property comp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             comp_dict = conv.map_to_dict_int_dbl(self.ms_pointer.comp)
 *             return comp_dict
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_4comp___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_11mass_stream_10MassStream_4comp___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_comp_dict;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __pyx_v_comp_dict = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "mass_stream.pyx":82
 *     property comp:
 *         def __get__(self):
 *             comp_dict = conv.map_to_dict_int_dbl(self.ms_pointer.comp)             # <<<<<<<<<<<<<<
 *             return comp_dict
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_int_dbl(((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->comp)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_comp_dict));
  __pyx_v_comp_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mass_stream.pyx":83
 *         def __get__(self):
 *             comp_dict = conv.map_to_dict_int_dbl(self.ms_pointer.comp)
 *             return comp_dict             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict comp):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_comp_dict));
  __pyx_r = ((PyObject *)__pyx_v_comp_dict);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mass_stream.MassStream.comp.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_comp_dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":85
 *             return comp_dict
 * 
 *         def __set__(self, dict comp):             # <<<<<<<<<<<<<<
 *             self.ms_pointer.comp = conv.dict_to_map_int_dbl(comp)
 * 
 */

static int __pyx_pf_11mass_stream_10MassStream_4comp_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_comp); /*proto*/
static int __pyx_pf_11mass_stream_10MassStream_4comp_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_comp) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_comp), (&PyDict_Type), 1, "comp", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mass_stream.pyx":86
 * 
 *         def __set__(self, dict comp):
 *             self.ms_pointer.comp = conv.dict_to_map_int_dbl(comp)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->comp = __pyx_f_13stlconverters_dict_to_map_int_dbl(__pyx_v_comp);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.comp.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":90
 * 
 *     property mass:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ms_pointer.mass
 * 
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_4mass___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_11mass_stream_10MassStream_4mass___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "mass_stream.pyx":91
 *     property mass:
 *         def __get__(self):
 *             return self.ms_pointer.mass             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double mass):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->mass); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mass_stream.MassStream.mass.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":93
 *             return self.ms_pointer.mass
 * 
 *         def __set__(self, double mass):             # <<<<<<<<<<<<<<
 *             self.ms_pointer.mass = mass
 * 
 */

static int __pyx_pf_11mass_stream_10MassStream_4mass_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_mass); /*proto*/
static int __pyx_pf_11mass_stream_10MassStream_4mass_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_mass) {
  double __pyx_v_mass;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_mass); {
    __pyx_v_mass = __pyx_PyFloat_AsDouble(__pyx_arg_mass); if (unlikely((__pyx_v_mass == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.mass.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "mass_stream.pyx":94
 * 
 *         def __set__(self, double mass):
 *             self.ms_pointer.mass = mass             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->mass = __pyx_v_mass;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":98
 * 
 *     property name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef std.string ms_name = self.ms_pointer.name
 *             return ms_name.c_str()
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_4name___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_11mass_stream_10MassStream_4name___get__(PyObject *__pyx_v_self) {
  std::string __pyx_v_ms_name;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "mass_stream.pyx":99
 *     property name:
 *         def __get__(self):
 *             cdef std.string ms_name = self.ms_pointer.name             # <<<<<<<<<<<<<<
 *             return ms_name.c_str()
 * 
 */
  __pyx_v_ms_name = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->name;

  /* "mass_stream.pyx":100
 *         def __get__(self):
 *             cdef std.string ms_name = self.ms_pointer.name
 *             return ms_name.c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char * name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_ms_name.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mass_stream.MassStream.name.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":102
 *             return ms_name.c_str()
 * 
 *         def __set__(self, char * name):             # <<<<<<<<<<<<<<
 *             self.ms_pointer.name = std.string(name)
 * 
 */

static int __pyx_pf_11mass_stream_10MassStream_4name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/
static int __pyx_pf_11mass_stream_10MassStream_4name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_name); {
    __pyx_v_name = PyBytes_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.name.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "mass_stream.pyx":103
 * 
 *         def __set__(self, char * name):
 *             self.ms_pointer.name = std.string(name)             # <<<<<<<<<<<<<<
 * 
 *     #
 */
  ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->name = std::string(__pyx_v_name);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":109
 *     #
 * 
 *     def norm_comp_dict(self):             # <<<<<<<<<<<<<<
 *         """Normalizes the comp(osition), preserving the mass of the isotopic vector as mass."""
 *         self.ms_pointer.norm_comp_dict()
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_2norm_comp_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11mass_stream_10MassStream_2norm_comp_dict[] = "Normalizes the comp(osition), preserving the mass of the isotopic vector as mass.";
static PyObject *__pyx_pf_11mass_stream_10MassStream_2norm_comp_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("norm_comp_dict");

  /* "mass_stream.pyx":111
 *     def norm_comp_dict(self):
 *         """Normalizes the comp(osition), preserving the mass of the isotopic vector as mass."""
 *         self.ms_pointer.norm_comp_dict()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->norm_comp_dict();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":114
 * 
 * 
 *     def load_from_hdf5(self, char * filename, char * groupname, int row=-1):             # <<<<<<<<<<<<<<
 *         """A MassStream object may be initialized from an HDF5 file.
 *         The HDF5 representation of a MassStream is a group that holds several
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_3load_from_hdf5(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11mass_stream_10MassStream_3load_from_hdf5[] = "A MassStream object may be initialized from an HDF5 file.\n        The HDF5 representation of a MassStream is a group that holds several \n        extendable array datasets.  One array is entitled \"Mass\" while the other datasets\n        are nuclide names in LLAAAM form (\"U235\", \"NP237\", *etc*).  For example::\n\n            File.h5 (file)\n                |-- MassStream (group)\n                    |-- Mass (array)\n                    |-- H1 (array)\n                    |-- O16 (array)\n                    |-- U235 (array)\n                    |-- PU239 (array)\n                    |-- ...\n\n        The arrays are all of length N, where each row typically represents a different \n        fuel cycle pass.  The sum of all of the nuclide arrays should sum to one, like \n        MassStream.comp. \n\n        Args:\n            * filename  (str): Path to HDF5 file that contains the data to read in.    \n            * groupname (str): Path to HDF5 group that represents the data. \n              In the above example, groupname = \"/MassStream\".    \n\n        Keyword Args:\n            * row (int): The index of the arrays from which to read the data.  This \n              ranges from 0 to N-1.  Defaults to the last element of the array.\n              Negative indexing is allowed (row[-N] = row[0]).\n\n        Usage:\n            This function loads data into a pre-existing :class:`MassStream`.  \n            Initialization is therefore a two-step process::\n\n                ms = MassStream()\n                ms.load_from_hdf5(\"afile.h5\", \"/foo/bar/ms\", -3)\n        ";
static PyObject *__pyx_pf_11mass_stream_10MassStream_3load_from_hdf5(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  char *__pyx_v_groupname;
  int __pyx_v_row;
  PyObject *__pyx_r = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__groupname,&__pyx_n_s__row,0};
  __Pyx_RefNannySetupContext("load_from_hdf5");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groupname);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("load_from_hdf5", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__row);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "load_from_hdf5") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_groupname = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_groupname) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_row = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_row == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_row = ((int)-1);
    }
  } else {
    __pyx_v_row = ((int)-1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3:
      __pyx_v_row = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_row == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2:
      __pyx_v_groupname = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_groupname) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __pyx_v_filename = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load_from_hdf5", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.load_from_hdf5");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "mass_stream.pyx":150
 *                 ms.load_from_hdf5("afile.h5", "/foo/bar/ms", -3)
 *         """
 *         self.ms_pointer.load_from_hdf5(std.string(filename), std.string(groupname), row)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->load_from_hdf5(std::string(__pyx_v_filename), std::string(__pyx_v_groupname), __pyx_v_row);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.load_from_hdf5");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":153
 * 
 * 
 *     def load_from_text(self, char * filename):             # <<<<<<<<<<<<<<
 *         """A MassStream object may be initialized from a simple text file.
 *         The text representation of MassStreams are nuclide identifiers in the
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_4load_from_text(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static char __pyx_doc_11mass_stream_10MassStream_4load_from_text[] = "A MassStream object may be initialized from a simple text file.\n        The text representation of MassStreams are nuclide identifiers in the \n        first column and mass or weight values in the second column.  For example, \n        for natural uranium::\n\n            922340  0.000055\n            U235    0.00720\n            92238   0.992745\n\n        Data in this file must be whitespace separated.  Any valid nuclide naming\n        scheme may be used for any isotope.\n\n        Args:\n            * filename (str): Path to HDF5 file that contains the data to read in.    \n\n        Usage:\n            This function loads data into a pre-existing MassStream.  \n            Initialization is therefore a two-step process::\n\n            ms = MassStream()\n            ms.load_from_text(\"natu.h5\")\n\n        This function is most often called implicitly by the MassStream constructor.\n        ";
static PyObject *__pyx_pf_11mass_stream_10MassStream_4load_from_text(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  char *__pyx_v_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("load_from_text");
  assert(__pyx_arg_filename); {
    __pyx_v_filename = PyBytes_AsString(__pyx_arg_filename); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.load_from_text");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "mass_stream.pyx":178
 *         This function is most often called implicitly by the MassStream constructor.
 *         """
 *         self.ms_pointer.load_from_text(filename)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->load_from_text(__pyx_v_filename);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.load_from_text");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":181
 * 
 * 
 *     def Print(self):             # <<<<<<<<<<<<<<
 *         """This prints a string representation of the MassStream to stdout.  Print is
 *         particularly useful in C++.  In Python, this method simply duplicates
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_5Print(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11mass_stream_10MassStream_5Print[] = "This prints a string representation of the MassStream to stdout.  Print is \n        particularly useful in C++.  In Python, this method simply duplicates \n        the functionality you would get from the built-in str() function.\n        ";
static PyObject *__pyx_pf_11mass_stream_10MassStream_5Print(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("Print");

  /* "mass_stream.pyx":186
 *         the functionality you would get from the built-in str() function.
 *         """
 *         self.ms_pointer.Print()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->Print();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":189
 * 
 * 
 *     def Normalize(self):             # <<<<<<<<<<<<<<
 *         """This convenience function normalizes the mass stream by setting its mass = 1.0."""
 *         self.ms_pointer.Normalize()
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_6Normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11mass_stream_10MassStream_6Normalize[] = "This convenience function normalizes the mass stream by setting its mass = 1.0.";
static PyObject *__pyx_pf_11mass_stream_10MassStream_6Normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("Normalize");

  /* "mass_stream.pyx":191
 *     def Normalize(self):
 *         """This convenience function normalizes the mass stream by setting its mass = 1.0."""
 *         self.ms_pointer.Normalize()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->Normalize();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":194
 * 
 * 
 *     def multByMass(self):             # <<<<<<<<<<<<<<
 *         """This function multiplies comp by mass and returns the resultant isotopic vector.
 * 
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_7multByMass(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11mass_stream_10MassStream_7multByMass[] = "This function multiplies comp by mass and returns the resultant isotopic vector.\n\n        Returns:\n            * isovec(dict): For a MassStream ms, \n\n              .. math:: \\mbox{isovec[iso]} = \\mbox{ms.comp[iso]} \times \\mbox{ms.mass}\n        ";
static PyObject *__pyx_pf_11mass_stream_10MassStream_7multByMass(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::map<int,double> __pyx_v_cpp_isovec;
  PyObject *__pyx_v_isovec;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("multByMass");
  __pyx_v_isovec = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "mass_stream.pyx":202
 *               .. math:: \mbox{isovec[iso]} = \mbox{ms.comp[iso]} \times \mbox{ms.mass}
 *         """
 *         cdef cpp_map[int, double] cpp_isovec = self.ms_pointer.multByMass()             # <<<<<<<<<<<<<<
 *         isovec = conv.map_to_dict_int_dbl(cpp_isovec)
 *         return isovec
 */
  __pyx_v_cpp_isovec = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->multByMass();

  /* "mass_stream.pyx":203
 *         """
 *         cdef cpp_map[int, double] cpp_isovec = self.ms_pointer.multByMass()
 *         isovec = conv.map_to_dict_int_dbl(cpp_isovec)             # <<<<<<<<<<<<<<
 *         return isovec
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_int_dbl(__pyx_v_cpp_isovec)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_isovec));
  __pyx_v_isovec = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mass_stream.pyx":204
 *         cdef cpp_map[int, double] cpp_isovec = self.ms_pointer.multByMass()
 *         isovec = conv.map_to_dict_int_dbl(cpp_isovec)
 *         return isovec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_isovec));
  __pyx_r = ((PyObject *)__pyx_v_isovec);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mass_stream.MassStream.multByMass");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_isovec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":207
 * 
 * 
 *     def atomic_weight(self):             # <<<<<<<<<<<<<<
 *         """This method returns the atomic weight of the comp of this MassStream.  Note that this is
 *         only a rough estimate since this function is not yet coupled with measured atomic weights.
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_8atomic_weight(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11mass_stream_10MassStream_8atomic_weight[] = "This method returns the atomic weight of the comp of this MassStream.  Note that this is \n        only a rough estimate since this function is not yet coupled with measured atomic weights.\n\n        Returns:\n            * atomic_weight (float): Atomic weight in [amu].";
static PyObject *__pyx_pf_11mass_stream_10MassStream_8atomic_weight(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("atomic_weight");

  /* "mass_stream.pyx":213
 *         Returns:
 *             * atomic_weight (float): Atomic weight in [amu]."""
 *         return self.ms_pointer.atomic_weight()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->atomic_weight()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mass_stream.MassStream.atomic_weight");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":220
 *     #
 * 
 *     def getSubStream(self, iso_sequence, char * name=""):             # <<<<<<<<<<<<<<
 *         """Grabs a subset of the mass streams and returns a new stream comprised of only
 *         the specified nuclides.  The elements or isotopes included in the new substream
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_9getSubStream(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11mass_stream_10MassStream_9getSubStream[] = "Grabs a subset of the mass streams and returns a new stream comprised of only\n        the specified nuclides.  The elements or isotopes included in the new substream\n        are determined by iso_sequence. \n\n        The input here is seen as a suggestion and so no error is raised if a nuclide \n        is asked for via iso_sequence that is not present in the original mass stream.\n\n        Args:\n            * isoname (sequence): Elements and isotopes to be taken from current stream.\n              Members of this list must be integers.  For example, [92, 942390]\n              would take all uranium atoms and Pu-239.  \n            * name (str): The name of the substream.\n\n        Returns:\n            * substream (MassStream): A new mass stream object that only \n              has the members given in iso_sequence.  The mass of the substream\n              is calculated based on the weight fraction composition and mass\n              of the original mass stream.\n        ";
static PyObject *__pyx_pf_11mass_stream_10MassStream_9getSubStream(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iso_sequence = 0;
  char *__pyx_v_name;
  int __pyx_v_iso_zz;
  std::set<int> __pyx_v_iso_set;
  PyObject *__pyx_v_iso;
  PyObject *__pyx_v_iso_str;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms;
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__iso_sequence,&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("getSubStream");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__iso_sequence);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (value) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getSubStream") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_iso_sequence = values[0];
    if (values[1]) {
      __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_name = ((char *)__pyx_k_1);
    }
  } else {
    __pyx_v_name = ((char *)__pyx_k_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_iso_sequence = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getSubStream", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.getSubStream");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_iso = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_iso_str = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)Py_None); __Pyx_INCREF(Py_None);

  /* "mass_stream.pyx":242
 *         # Make an isotopic set
 *         cdef int iso_zz
 *         cdef cpp_set[int] iso_set = cpp_set[int]()             # <<<<<<<<<<<<<<
 *         for iso in iso_sequence:
 *             if isinstance(iso, int):
 */
  __pyx_v_iso_set = std::set<int>();

  /* "mass_stream.pyx":243
 *         cdef int iso_zz
 *         cdef cpp_set[int] iso_set = cpp_set[int]()
 *         for iso in iso_sequence:             # <<<<<<<<<<<<<<
 *             if isinstance(iso, int):
 *                 if (iso in isoname.zzLL):
 */
  if (PyList_CheckExact(__pyx_v_iso_sequence) || PyTuple_CheckExact(__pyx_v_iso_sequence)) {
    __pyx_t_1 = 0; __pyx_t_2 = __pyx_v_iso_sequence; __Pyx_INCREF(__pyx_t_2);
  } else {
    __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_iso_sequence); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  }
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_2))) {
      if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_2))) {
      if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++;
    } else {
      __pyx_t_3 = PyIter_Next(__pyx_t_2);
      if (!__pyx_t_3) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_DECREF(__pyx_v_iso);
    __pyx_v_iso = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "mass_stream.pyx":244
 *         cdef cpp_set[int] iso_set = cpp_set[int]()
 *         for iso in iso_sequence:
 *             if isinstance(iso, int):             # <<<<<<<<<<<<<<
 *                 if (iso in isoname.zzLL):
 *                     iso_zz = iso
 */
    __pyx_t_4 = PyInt_Check(__pyx_v_iso); 
    if (__pyx_t_4) {

      /* "mass_stream.pyx":245
 *         for iso in iso_sequence:
 *             if isinstance(iso, int):
 *                 if (iso in isoname.zzLL):             # <<<<<<<<<<<<<<
 *                     iso_zz = iso
 *                 else:
 */
      __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__isoname); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__zzLL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_4 = ((PySequence_Contains(__pyx_t_5, __pyx_v_iso))); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_4) {

        /* "mass_stream.pyx":246
 *             if isinstance(iso, int):
 *                 if (iso in isoname.zzLL):
 *                     iso_zz = iso             # <<<<<<<<<<<<<<
 *                 else:
 *                     iso_zz = isoname.mixed_2_zzaaam(iso)
 */
        __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_v_iso); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_iso_zz = __pyx_t_6;
        goto __pyx_L9;
      }
      /*else*/ {

        /* "mass_stream.pyx":248
 *                     iso_zz = iso
 *                 else:
 *                     iso_zz = isoname.mixed_2_zzaaam(iso)             # <<<<<<<<<<<<<<
 * 
 *             elif isinstance(iso, basestring):
 */
        __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__isoname); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__mixed_2_zzaaam); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_5));
        __Pyx_INCREF(__pyx_v_iso);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_iso);
        __Pyx_GIVEREF(__pyx_v_iso);
        __pyx_t_7 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
        __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_7); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_v_iso_zz = __pyx_t_6;
      }
      __pyx_L9:;
      goto __pyx_L8;
    }

    /* "mass_stream.pyx":250
 *                     iso_zz = isoname.mixed_2_zzaaam(iso)
 * 
 *             elif isinstance(iso, basestring):             # <<<<<<<<<<<<<<
 *                 iso_str = iso.upper()
 *                 if (iso_str in isoname.LLzz):
 */
    __pyx_t_4 = PyObject_IsInstance(__pyx_v_iso, __pyx_builtin_basestring); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_4) {

      /* "mass_stream.pyx":251
 * 
 *             elif isinstance(iso, basestring):
 *                 iso_str = iso.upper()             # <<<<<<<<<<<<<<
 *                 if (iso_str in isoname.LLzz):
 *                     iso_zz = isoname.LLzz[iso_str]
 */
      __pyx_t_7 = PyObject_GetAttr(__pyx_v_iso, __pyx_n_s__upper); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_v_iso_str);
      __pyx_v_iso_str = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "mass_stream.pyx":252
 *             elif isinstance(iso, basestring):
 *                 iso_str = iso.upper()
 *                 if (iso_str in isoname.LLzz):             # <<<<<<<<<<<<<<
 *                     iso_zz = isoname.LLzz[iso_str]
 *                 else:
 */
      __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__isoname); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__LLzz); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_4 = ((PySequence_Contains(__pyx_t_7, __pyx_v_iso_str))); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__pyx_t_4) {

        /* "mass_stream.pyx":253
 *                 iso_str = iso.upper()
 *                 if (iso_str in isoname.LLzz):
 *                     iso_zz = isoname.LLzz[iso_str]             # <<<<<<<<<<<<<<
 *                 else:
 *                     iso_zz = isoname.mixed_2_zzaaam(iso)
 */
        __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s__isoname); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__LLzz); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyObject_GetItem(__pyx_t_5, __pyx_v_iso_str); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_7); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_v_iso_zz = __pyx_t_6;
        goto __pyx_L10;
      }
      /*else*/ {

        /* "mass_stream.pyx":255
 *                     iso_zz = isoname.LLzz[iso_str]
 *                 else:
 *                     iso_zz = isoname.mixed_2_zzaaam(iso)             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
        __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s__isoname); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__mixed_2_zzaaam); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_7));
        __Pyx_INCREF(__pyx_v_iso);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_iso);
        __Pyx_GIVEREF(__pyx_v_iso);
        __pyx_t_3 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
        __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_iso_zz = __pyx_t_6;
      }
      __pyx_L10:;
      goto __pyx_L8;
    }
    /*else*/ {

      /* "mass_stream.pyx":258
 * 
 *             else:
 *                 raise TypeError("Isotopes must be strings or integers.")             # <<<<<<<<<<<<<<
 * 
 *             iso_set.insert(iso_zz)
 */
      __pyx_t_3 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_6), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L8:;

    /* "mass_stream.pyx":260
 *                 raise TypeError("Isotopes must be strings or integers.")
 * 
 *             iso_set.insert(iso_zz)             # <<<<<<<<<<<<<<
 * 
 *         # Make new python version of this mass stream
 */
    __pyx_v_iso_set.insert(__pyx_v_iso_zz);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mass_stream.pyx":263
 * 
 *         # Make new python version of this mass stream
 *         py_ms = MassStream()             # <<<<<<<<<<<<<<
 *         py_ms.ms_pointer[0] = self.ms_pointer.getSubStream(iso_set, std.string(name))
 *         return py_ms
 */
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_v_py_ms));
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "mass_stream.pyx":264
 *         # Make new python version of this mass stream
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer.getSubStream(iso_set, std.string(name))             # <<<<<<<<<<<<<<
 *         return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->getSubStream(__pyx_v_iso_set, std::string(__pyx_v_name));

  /* "mass_stream.pyx":265
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer.getSubStream(iso_set, std.string(name))
 *         return py_ms             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("mass_stream.MassStream.getSubStream");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_iso);
  __Pyx_DECREF(__pyx_v_iso_str);
  __Pyx_DECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":268
 * 
 * 
 *     def getU(self, char * name=""):             # <<<<<<<<<<<<<<
 *         """Convenience method that gets the Uranium portion of a mass stream.
 * 
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_10getU(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11mass_stream_10MassStream_10getU[] = "Convenience method that gets the Uranium portion of a mass stream.\n\n        Args:\n            * name (str): The name of the substream.\n\n        Returns:\n            * substream (MassStream): A new mass stream object that only \n              has Uranium members. \n        ";
static PyObject *__pyx_pf_11mass_stream_10MassStream_10getU(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("getU");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getU") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_name = ((char *)__pyx_k_1);
    }
  } else {
    __pyx_v_name = ((char *)__pyx_k_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getU", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.getU");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)Py_None); __Pyx_INCREF(Py_None);

  /* "mass_stream.pyx":278
 *               has Uranium members.
 *         """
 *         py_ms = MassStream()             # <<<<<<<<<<<<<<
 *         py_ms.ms_pointer[0] = self.ms_pointer.getU(std.string(name))
 *         return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_py_ms));
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mass_stream.pyx":279
 *         """
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer.getU(std.string(name))             # <<<<<<<<<<<<<<
 *         return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->getU(std::string(__pyx_v_name));

  /* "mass_stream.pyx":280
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer.getU(std.string(name))
 *         return py_ms             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mass_stream.MassStream.getU");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":283
 * 
 * 
 *     def getPU(self, char * name=""):             # <<<<<<<<<<<<<<
 *         """Convenience method that gets the Plutonium portion of a mass stream.
 * 
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_11getPU(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11mass_stream_10MassStream_11getPU[] = "Convenience method that gets the Plutonium portion of a mass stream.\n\n        Args:\n            * name (str): The name of the substream.\n\n        Returns:\n            * substream (MassStream): A new mass stream object that only \n              has Plutonium members. \n        ";
static PyObject *__pyx_pf_11mass_stream_10MassStream_11getPU(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("getPU");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getPU") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_name = ((char *)__pyx_k_1);
    }
  } else {
    __pyx_v_name = ((char *)__pyx_k_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getPU", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.getPU");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)Py_None); __Pyx_INCREF(Py_None);

  /* "mass_stream.pyx":293
 *               has Plutonium members.
 *         """
 *         py_ms = MassStream()             # <<<<<<<<<<<<<<
 *         py_ms.ms_pointer[0] = self.ms_pointer.getPU(std.string(name))
 *         return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_py_ms));
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mass_stream.pyx":294
 *         """
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer.getPU(std.string(name))             # <<<<<<<<<<<<<<
 *         return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->getPU(std::string(__pyx_v_name));

  /* "mass_stream.pyx":295
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer.getPU(std.string(name))
 *         return py_ms             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mass_stream.MassStream.getPU");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":298
 * 
 * 
 *     def getLAN(self, char * name=""):             # <<<<<<<<<<<<<<
 *         """Convenience method that gets the Lanthanide portion of a mass stream.
 * 
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_12getLAN(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11mass_stream_10MassStream_12getLAN[] = "Convenience method that gets the Lanthanide portion of a mass stream.\n\n        Args:\n            * name (str): The name of the substream.\n\n        Returns:\n            * substream (MassStream): A new mass stream object that only \n              has Lanthanide members. \n        ";
static PyObject *__pyx_pf_11mass_stream_10MassStream_12getLAN(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("getLAN");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getLAN") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_name = ((char *)__pyx_k_1);
    }
  } else {
    __pyx_v_name = ((char *)__pyx_k_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getLAN", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.getLAN");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)Py_None); __Pyx_INCREF(Py_None);

  /* "mass_stream.pyx":308
 *               has Lanthanide members.
 *         """
 *         py_ms = MassStream()             # <<<<<<<<<<<<<<
 *         py_ms.ms_pointer[0] = self.ms_pointer.getLAN(std.string(name))
 *         return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_py_ms));
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mass_stream.pyx":309
 *         """
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer.getLAN(std.string(name))             # <<<<<<<<<<<<<<
 *         return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->getLAN(std::string(__pyx_v_name));

  /* "mass_stream.pyx":310
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer.getLAN(std.string(name))
 *         return py_ms             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mass_stream.MassStream.getLAN");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":313
 * 
 * 
 *     def getACT(self, char * name=""):             # <<<<<<<<<<<<<<
 *         """Convenience method that gets the Actinide portion of a mass stream.
 * 
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_13getACT(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11mass_stream_10MassStream_13getACT[] = "Convenience method that gets the Actinide portion of a mass stream.\n\n        Args:\n            * name (str): The name of the substream.\n\n        Returns:\n            * substream (MassStream): A new mass stream object that only \n              has Actinide members. \n        ";
static PyObject *__pyx_pf_11mass_stream_10MassStream_13getACT(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("getACT");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getACT") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_name = ((char *)__pyx_k_1);
    }
  } else {
    __pyx_v_name = ((char *)__pyx_k_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getACT", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.getACT");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)Py_None); __Pyx_INCREF(Py_None);

  /* "mass_stream.pyx":323
 *               has Actinide members.
 *         """
 *         py_ms = MassStream()             # <<<<<<<<<<<<<<
 *         py_ms.ms_pointer[0] = self.ms_pointer.getACT(std.string(name))
 *         return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_py_ms));
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mass_stream.pyx":324
 *         """
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer.getACT(std.string(name))             # <<<<<<<<<<<<<<
 *         return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->getACT(std::string(__pyx_v_name));

  /* "mass_stream.pyx":325
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer.getACT(std.string(name))
 *         return py_ms             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mass_stream.MassStream.getACT");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":328
 * 
 * 
 *     def getTRU(self, char * name=""):             # <<<<<<<<<<<<<<
 *         """Convenience method that gets the Transuranic portion of a mass stream.
 * 
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_14getTRU(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11mass_stream_10MassStream_14getTRU[] = "Convenience method that gets the Transuranic portion of a mass stream.\n\n        Args:\n            * name (str): The name of the substream.\n\n        Returns:\n            * substream (MassStream): A new mass stream object that only \n              has Transuranic members. \n        ";
static PyObject *__pyx_pf_11mass_stream_10MassStream_14getTRU(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("getTRU");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getTRU") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_name = ((char *)__pyx_k_1);
    }
  } else {
    __pyx_v_name = ((char *)__pyx_k_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getTRU", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.getTRU");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)Py_None); __Pyx_INCREF(Py_None);

  /* "mass_stream.pyx":338
 *               has Transuranic members.
 *         """
 *         py_ms = MassStream()             # <<<<<<<<<<<<<<
 *         py_ms.ms_pointer[0] = self.ms_pointer.getTRU(std.string(name))
 *         return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_py_ms));
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mass_stream.pyx":339
 *         """
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer.getTRU(std.string(name))             # <<<<<<<<<<<<<<
 *         return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->getTRU(std::string(__pyx_v_name));

  /* "mass_stream.pyx":340
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer.getTRU(std.string(name))
 *         return py_ms             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mass_stream.MassStream.getTRU");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":343
 * 
 * 
 *     def getMA(self, char * name=""):             # <<<<<<<<<<<<<<
 *         """Convenience method that gets the Minor Actinide portion of a mass stream.
 * 
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_15getMA(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11mass_stream_10MassStream_15getMA[] = "Convenience method that gets the Minor Actinide portion of a mass stream.\n\n        Args:\n            * name (str): The name of the substream.\n\n        Returns:\n            * substream (MassStream): A new mass stream object that only \n              has Minor Actinide members. \n        ";
static PyObject *__pyx_pf_11mass_stream_10MassStream_15getMA(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("getMA");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getMA") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_name = ((char *)__pyx_k_1);
    }
  } else {
    __pyx_v_name = ((char *)__pyx_k_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getMA", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.getMA");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)Py_None); __Pyx_INCREF(Py_None);

  /* "mass_stream.pyx":353
 *               has Minor Actinide members.
 *         """
 *         py_ms = MassStream()             # <<<<<<<<<<<<<<
 *         py_ms.ms_pointer[0] = self.ms_pointer.getMA(std.string(name))
 *         return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_py_ms));
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mass_stream.pyx":354
 *         """
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer.getMA(std.string(name))             # <<<<<<<<<<<<<<
 *         return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->getMA(std::string(__pyx_v_name));

  /* "mass_stream.pyx":355
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer.getMA(std.string(name))
 *         return py_ms             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mass_stream.MassStream.getMA");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":358
 * 
 * 
 *     def getFP(self, char * name=""):             # <<<<<<<<<<<<<<
 *         """Convenience method that gets the Fission Product portion of a mass stream.
 * 
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_16getFP(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11mass_stream_10MassStream_16getFP[] = "Convenience method that gets the Fission Product portion of a mass stream.\n\n        Args:\n            * name (str): The name of the substream.\n\n        Returns:\n            * substream (MassStream): A new mass stream object that only \n              has Fission Product members. \n        ";
static PyObject *__pyx_pf_11mass_stream_10MassStream_16getFP(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("getFP");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getFP") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_name = ((char *)__pyx_k_1);
    }
  } else {
    __pyx_v_name = ((char *)__pyx_k_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getFP", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.getFP");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)Py_None); __Pyx_INCREF(Py_None);

  /* "mass_stream.pyx":368
 *               has Fission Product members.
 *         """
 *         py_ms = MassStream()             # <<<<<<<<<<<<<<
 *         py_ms.ms_pointer[0] = self.ms_pointer.getFP(std.string(name))
 *         return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_py_ms));
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mass_stream.pyx":369
 *         """
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer.getFP(std.string(name))             # <<<<<<<<<<<<<<
 *         return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer->getFP(std::string(__pyx_v_name));

  /* "mass_stream.pyx":370
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer.getFP(std.string(name))
 *         return py_ms             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mass_stream.MassStream.getFP");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":379
 *     # Addition
 * 
 *     def __add_float__(MassStream x, double y):             # <<<<<<<<<<<<<<
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = x.ms_pointer[0] + y
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_17__add_float__(PyObject *__pyx_v_x, PyObject *__pyx_arg_y); /*proto*/
static PyObject *__pyx_pf_11mass_stream_10MassStream_17__add_float__(PyObject *__pyx_v_x, PyObject *__pyx_arg_y) {
  double __pyx_v_y;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__add_float__");
  assert(__pyx_arg_y); {
    __pyx_v_y = __pyx_PyFloat_AsDouble(__pyx_arg_y); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.__add_float__");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)Py_None); __Pyx_INCREF(Py_None);

  /* "mass_stream.pyx":380
 * 
 *     def __add_float__(MassStream x, double y):
 *         py_ms = MassStream()             # <<<<<<<<<<<<<<
 *         py_ms.ms_pointer[0] = x.ms_pointer[0] + y
 *         return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_py_ms));
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mass_stream.pyx":381
 *     def __add_float__(MassStream x, double y):
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = x.ms_pointer[0] + y             # <<<<<<<<<<<<<<
 *         return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_x)->ms_pointer[0]) + __pyx_v_y);

  /* "mass_stream.pyx":382
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = x.ms_pointer[0] + y
 *         return py_ms             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mass_stream.MassStream.__add_float__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":385
 * 
 * 
 *     def __add_mass_stream__(MassStream x, MassStream y):             # <<<<<<<<<<<<<<
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = x.ms_pointer[0] + y.ms_pointer[0]
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_18__add_mass_stream__(PyObject *__pyx_v_x, PyObject *__pyx_v_y); /*proto*/
static PyObject *__pyx_pf_11mass_stream_10MassStream_18__add_mass_stream__(PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__add_mass_stream__");
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)Py_None); __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_11mass_stream_MassStream, 1, "y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mass_stream.pyx":386
 * 
 *     def __add_mass_stream__(MassStream x, MassStream y):
 *         py_ms = MassStream()             # <<<<<<<<<<<<<<
 *         py_ms.ms_pointer[0] = x.ms_pointer[0] + y.ms_pointer[0]
 *         return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_py_ms));
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mass_stream.pyx":387
 *     def __add_mass_stream__(MassStream x, MassStream y):
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = x.ms_pointer[0] + y.ms_pointer[0]             # <<<<<<<<<<<<<<
 *         return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_x)->ms_pointer[0]) + (((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_y)->ms_pointer[0]));

  /* "mass_stream.pyx":388
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = x.ms_pointer[0] + y.ms_pointer[0]
 *         return py_ms             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mass_stream.MassStream.__add_mass_stream__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":391
 * 
 * 
 *     def __add__(x, y):             # <<<<<<<<<<<<<<
 *         if isinstance(x, MassStream) and isinstance(y, MassStream):
 *             return x.__add_mass_stream__(y)
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_19__add__(PyObject *__pyx_v_x, PyObject *__pyx_v_y); /*proto*/
static PyObject *__pyx_pf_11mass_stream_10MassStream_19__add__(PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  __Pyx_RefNannySetupContext("__add__");

  /* "mass_stream.pyx":392
 * 
 *     def __add__(x, y):
 *         if isinstance(x, MassStream) and isinstance(y, MassStream):             # <<<<<<<<<<<<<<
 *             return x.__add_mass_stream__(y)
 *         elif isinstance(y, float):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_x, ((PyObject*)__pyx_ptype_11mass_stream_MassStream)); 
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_y, ((PyObject*)__pyx_ptype_11mass_stream_MassStream)); 
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "mass_stream.pyx":393
 *     def __add__(x, y):
 *         if isinstance(x, MassStream) and isinstance(y, MassStream):
 *             return x.__add_mass_stream__(y)             # <<<<<<<<<<<<<<
 *         elif isinstance(y, float):
 *             return x.__add_float__(y)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_x, __pyx_n_s____add_mass_stream__); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_v_y);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    __pyx_t_6 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "mass_stream.pyx":394
 *         if isinstance(x, MassStream) and isinstance(y, MassStream):
 *             return x.__add_mass_stream__(y)
 *         elif isinstance(y, float):             # <<<<<<<<<<<<<<
 *             return x.__add_float__(y)
 *         elif isinstance(x, float):
 */
  __pyx_t_3 = PyFloat_Check(__pyx_v_y); 
  if (__pyx_t_3) {

    /* "mass_stream.pyx":395
 *             return x.__add_mass_stream__(y)
 *         elif isinstance(y, float):
 *             return x.__add_float__(y)             # <<<<<<<<<<<<<<
 *         elif isinstance(x, float):
 *             return y.__add_float__(x)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_x, __pyx_n_s____add_float__); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_v_y);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    __pyx_t_4 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "mass_stream.pyx":396
 *         elif isinstance(y, float):
 *             return x.__add_float__(y)
 *         elif isinstance(x, float):             # <<<<<<<<<<<<<<
 *             return y.__add_float__(x)
 *         elif isinstance(y, int):
 */
  __pyx_t_3 = PyFloat_Check(__pyx_v_x); 
  if (__pyx_t_3) {

    /* "mass_stream.pyx":397
 *             return x.__add_float__(y)
 *         elif isinstance(x, float):
 *             return y.__add_float__(x)             # <<<<<<<<<<<<<<
 *         elif isinstance(y, int):
 *             return x.__add_float__(float(y))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_y, __pyx_n_s____add_float__); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    __pyx_t_6 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "mass_stream.pyx":398
 *         elif isinstance(x, float):
 *             return y.__add_float__(x)
 *         elif isinstance(y, int):             # <<<<<<<<<<<<<<
 *             return x.__add_float__(float(y))
 *         elif isinstance(x, int):
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_y); 
  if (__pyx_t_3) {

    /* "mass_stream.pyx":399
 *             return y.__add_float__(x)
 *         elif isinstance(y, int):
 *             return x.__add_float__(float(y))             # <<<<<<<<<<<<<<
 *         elif isinstance(x, int):
 *             return y.__add_float__(float(x))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_x, __pyx_n_s____add_float__); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_AsDouble(__pyx_v_y); if (unlikely(__pyx_t_7 == ((double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = PyFloat_FromDouble(__pyx_t_7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "mass_stream.pyx":400
 *         elif isinstance(y, int):
 *             return x.__add_float__(float(y))
 *         elif isinstance(x, int):             # <<<<<<<<<<<<<<
 *             return y.__add_float__(float(x))
 *         else:
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_x); 
  if (__pyx_t_3) {

    /* "mass_stream.pyx":401
 *             return x.__add_float__(float(y))
 *         elif isinstance(x, int):
 *             return y.__add_float__(float(x))             # <<<<<<<<<<<<<<
 *         else:
 *             return NotImplemented
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyObject_GetAttr(__pyx_v_y, __pyx_n_s____add_float__); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_AsDouble(__pyx_v_x); if (unlikely(__pyx_t_7 == ((double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyFloat_FromDouble(__pyx_t_7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "mass_stream.pyx":403
 *             return y.__add_float__(float(x))
 *         else:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mass_stream.MassStream.__add__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":408
 *     # Multiplication
 * 
 *     def __mul_float__(MassStream x, double y):             # <<<<<<<<<<<<<<
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = x.ms_pointer[0] * y
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_20__mul_float__(PyObject *__pyx_v_x, PyObject *__pyx_arg_y); /*proto*/
static PyObject *__pyx_pf_11mass_stream_10MassStream_20__mul_float__(PyObject *__pyx_v_x, PyObject *__pyx_arg_y) {
  double __pyx_v_y;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__mul_float__");
  assert(__pyx_arg_y); {
    __pyx_v_y = __pyx_PyFloat_AsDouble(__pyx_arg_y); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.__mul_float__");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)Py_None); __Pyx_INCREF(Py_None);

  /* "mass_stream.pyx":409
 * 
 *     def __mul_float__(MassStream x, double y):
 *         py_ms = MassStream()             # <<<<<<<<<<<<<<
 *         py_ms.ms_pointer[0] = x.ms_pointer[0] * y
 *         return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_py_ms));
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mass_stream.pyx":410
 *     def __mul_float__(MassStream x, double y):
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = x.ms_pointer[0] * y             # <<<<<<<<<<<<<<
 *         return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_x)->ms_pointer[0]) * __pyx_v_y);

  /* "mass_stream.pyx":411
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = x.ms_pointer[0] * y
 *         return py_ms             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mass_stream.MassStream.__mul_float__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":414
 * 
 * 
 *     def __mul__(x, y):             # <<<<<<<<<<<<<<
 *         if isinstance(y, float):
 *             return x.__mul_float__(y)
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_21__mul__(PyObject *__pyx_v_x, PyObject *__pyx_v_y); /*proto*/
static PyObject *__pyx_pf_11mass_stream_10MassStream_21__mul__(PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("__mul__");

  /* "mass_stream.pyx":415
 * 
 *     def __mul__(x, y):
 *         if isinstance(y, float):             # <<<<<<<<<<<<<<
 *             return x.__mul_float__(y)
 *         elif isinstance(x, float):
 */
  __pyx_t_1 = PyFloat_Check(__pyx_v_y); 
  if (__pyx_t_1) {

    /* "mass_stream.pyx":416
 *     def __mul__(x, y):
 *         if isinstance(y, float):
 *             return x.__mul_float__(y)             # <<<<<<<<<<<<<<
 *         elif isinstance(x, float):
 *             return y.__mul_float__(x)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_x, __pyx_n_s____mul_float__); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(__pyx_v_y);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "mass_stream.pyx":417
 *         if isinstance(y, float):
 *             return x.__mul_float__(y)
 *         elif isinstance(x, float):             # <<<<<<<<<<<<<<
 *             return y.__mul_float__(x)
 *         elif isinstance(y, int):
 */
  __pyx_t_1 = PyFloat_Check(__pyx_v_x); 
  if (__pyx_t_1) {

    /* "mass_stream.pyx":418
 *             return x.__mul_float__(y)
 *         elif isinstance(x, float):
 *             return y.__mul_float__(x)             # <<<<<<<<<<<<<<
 *         elif isinstance(y, int):
 *             return x.__mul_float__(float(y))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_y, __pyx_n_s____mul_float__); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "mass_stream.pyx":419
 *         elif isinstance(x, float):
 *             return y.__mul_float__(x)
 *         elif isinstance(y, int):             # <<<<<<<<<<<<<<
 *             return x.__mul_float__(float(y))
 *         elif isinstance(x, int):
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_y); 
  if (__pyx_t_1) {

    /* "mass_stream.pyx":420
 *             return y.__mul_float__(x)
 *         elif isinstance(y, int):
 *             return x.__mul_float__(float(y))             # <<<<<<<<<<<<<<
 *         elif isinstance(x, int):
 *             return y.__mul_float__(float(x))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_x, __pyx_n_s____mul_float__); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_AsDouble(__pyx_v_y); if (unlikely(__pyx_t_5 == ((double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "mass_stream.pyx":421
 *         elif isinstance(y, int):
 *             return x.__mul_float__(float(y))
 *         elif isinstance(x, int):             # <<<<<<<<<<<<<<
 *             return y.__mul_float__(float(x))
 *         else:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_x); 
  if (__pyx_t_1) {

    /* "mass_stream.pyx":422
 *             return x.__mul_float__(float(y))
 *         elif isinstance(x, int):
 *             return y.__mul_float__(float(x))             # <<<<<<<<<<<<<<
 *         else:
 *             return NotImplemented
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_y, __pyx_n_s____mul_float__); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_AsDouble(__pyx_v_x); if (unlikely(__pyx_t_5 == ((double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "mass_stream.pyx":424
 *             return y.__mul_float__(float(x))
 *         else:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mass_stream.MassStream.__mul__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":429
 *     # Division
 * 
 *     def __div_float__(MassStream self, double y):             # <<<<<<<<<<<<<<
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer[0] / y
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_22__div_float__(PyObject *__pyx_v_self, PyObject *__pyx_arg_y); /*proto*/
static PyObject *__pyx_pf_11mass_stream_10MassStream_22__div_float__(PyObject *__pyx_v_self, PyObject *__pyx_arg_y) {
  double __pyx_v_y;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__div_float__");
  assert(__pyx_arg_y); {
    __pyx_v_y = __pyx_PyFloat_AsDouble(__pyx_arg_y); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mass_stream.MassStream.__div_float__");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)Py_None); __Pyx_INCREF(Py_None);

  /* "mass_stream.pyx":430
 * 
 *     def __div_float__(MassStream self, double y):
 *         py_ms = MassStream()             # <<<<<<<<<<<<<<
 *         py_ms.ms_pointer[0] = self.ms_pointer[0] / y
 *         return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_py_ms));
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mass_stream.pyx":431
 *     def __div_float__(MassStream self, double y):
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer[0] / y             # <<<<<<<<<<<<<<
 *         return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_self)->ms_pointer[0]) / __pyx_v_y);

  /* "mass_stream.pyx":432
 *         py_ms = MassStream()
 *         py_ms.ms_pointer[0] = self.ms_pointer[0] / y
 *         return py_ms             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mass_stream.MassStream.__div_float__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":435
 * 
 * 
 *     def __div__(MassStream self, y):             # <<<<<<<<<<<<<<
 *         if isinstance(y, float):
 *             return self.__div_float__(y)
 */

#if PY_MAJOR_VERSION < 3
static PyObject *__pyx_pf_11mass_stream_10MassStream_23__div__(PyObject *__pyx_v_self, PyObject *__pyx_v_y); /*proto*/
static PyObject *__pyx_pf_11mass_stream_10MassStream_23__div__(PyObject *__pyx_v_self, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("__div__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_11mass_stream_MassStream, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mass_stream.pyx":436
 * 
 *     def __div__(MassStream self, y):
 *         if isinstance(y, float):             # <<<<<<<<<<<<<<
 *             return self.__div_float__(y)
 *         elif isinstance(y, int):
 */
  __pyx_t_1 = PyFloat_Check(__pyx_v_y); 
  if (__pyx_t_1) {

    /* "mass_stream.pyx":437
 *     def __div__(MassStream self, y):
 *         if isinstance(y, float):
 *             return self.__div_float__(y)             # <<<<<<<<<<<<<<
 *         elif isinstance(y, int):
 *             return self.__div_float__(float(y))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s____div_float__); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(__pyx_v_y);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "mass_stream.pyx":438
 *         if isinstance(y, float):
 *             return self.__div_float__(y)
 *         elif isinstance(y, int):             # <<<<<<<<<<<<<<
 *             return self.__div_float__(float(y))
 *         else:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_y); 
  if (__pyx_t_1) {

    /* "mass_stream.pyx":439
 *             return self.__div_float__(y)
 *         elif isinstance(y, int):
 *             return self.__div_float__(float(y))             # <<<<<<<<<<<<<<
 *         else:
 *             return NotImplemented
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s____div_float__); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_AsDouble(__pyx_v_y); if (unlikely(__pyx_t_5 == ((double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "mass_stream.pyx":441
 *             return self.__div_float__(float(y))
 *         else:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mass_stream.MassStream.__div__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3)*/

/* "mass_stream.pyx":444
 * 
 * 
 *     def __rdiv__(MassStream self, y):             # <<<<<<<<<<<<<<
 *         return self.__div__(y)
 * 
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_24__rdiv__(PyObject *__pyx_v_self, PyObject *__pyx_v_y); /*proto*/
static PyObject *__pyx_pf_11mass_stream_10MassStream_24__rdiv__(PyObject *__pyx_v_self, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__rdiv__");

  /* "mass_stream.pyx":445
 * 
 *     def __rdiv__(MassStream self, y):
 *         return self.__div__(y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s____div__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_y);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_y);
  __Pyx_GIVEREF(__pyx_v_y);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mass_stream.MassStream.__rdiv__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mass_stream.pyx":448
 * 
 * 
 *     def __truediv__(MassStream self, y):             # <<<<<<<<<<<<<<
 *         return self.__div__(y)
 */

static PyObject *__pyx_pf_11mass_stream_10MassStream_25__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_y); /*proto*/
static PyObject *__pyx_pf_11mass_stream_10MassStream_25__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__truediv__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_11mass_stream_MassStream, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mass_stream.pyx":449
 * 
 *     def __truediv__(MassStream self, y):
 *         return self.__div__(y)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s____div__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_y);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_y);
  __Pyx_GIVEREF(__pyx_v_y);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mass_stream.MassStream.__truediv__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_11mass_stream_MassStream(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_11mass_stream_10MassStream___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11mass_stream_MassStream(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_11mass_stream_10MassStream_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_11mass_stream_10MassStream_comp(PyObject *o, void *x) {
  return __pyx_pf_11mass_stream_10MassStream_4comp___get__(o);
}

static int __pyx_setprop_11mass_stream_10MassStream_comp(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_11mass_stream_10MassStream_4comp_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_11mass_stream_10MassStream_mass(PyObject *o, void *x) {
  return __pyx_pf_11mass_stream_10MassStream_4mass___get__(o);
}

static int __pyx_setprop_11mass_stream_10MassStream_mass(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_11mass_stream_10MassStream_4mass_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_11mass_stream_10MassStream_name(PyObject *o, void *x) {
  return __pyx_pf_11mass_stream_10MassStream_4name___get__(o);
}

static int __pyx_setprop_11mass_stream_10MassStream_name(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_11mass_stream_10MassStream_4name_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_11mass_stream_MassStream[] = {
  {__Pyx_NAMESTR("norm_comp_dict"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_2norm_comp_dict, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_11mass_stream_10MassStream_2norm_comp_dict)},
  {__Pyx_NAMESTR("load_from_hdf5"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_3load_from_hdf5, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_11mass_stream_10MassStream_3load_from_hdf5)},
  {__Pyx_NAMESTR("load_from_text"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_4load_from_text, METH_O, __Pyx_DOCSTR(__pyx_doc_11mass_stream_10MassStream_4load_from_text)},
  {__Pyx_NAMESTR("Print"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_5Print, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_11mass_stream_10MassStream_5Print)},
  {__Pyx_NAMESTR("Normalize"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_6Normalize, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_11mass_stream_10MassStream_6Normalize)},
  {__Pyx_NAMESTR("multByMass"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_7multByMass, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_11mass_stream_10MassStream_7multByMass)},
  {__Pyx_NAMESTR("atomic_weight"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_8atomic_weight, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_11mass_stream_10MassStream_8atomic_weight)},
  {__Pyx_NAMESTR("getSubStream"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_9getSubStream, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_11mass_stream_10MassStream_9getSubStream)},
  {__Pyx_NAMESTR("getU"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_10getU, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_11mass_stream_10MassStream_10getU)},
  {__Pyx_NAMESTR("getPU"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_11getPU, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_11mass_stream_10MassStream_11getPU)},
  {__Pyx_NAMESTR("getLAN"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_12getLAN, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_11mass_stream_10MassStream_12getLAN)},
  {__Pyx_NAMESTR("getACT"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_13getACT, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_11mass_stream_10MassStream_13getACT)},
  {__Pyx_NAMESTR("getTRU"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_14getTRU, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_11mass_stream_10MassStream_14getTRU)},
  {__Pyx_NAMESTR("getMA"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_15getMA, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_11mass_stream_10MassStream_15getMA)},
  {__Pyx_NAMESTR("getFP"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_16getFP, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_11mass_stream_10MassStream_16getFP)},
  {__Pyx_NAMESTR("__add_float__"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_17__add_float__, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__add_mass_stream__"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_18__add_mass_stream__, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__mul_float__"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_20__mul_float__, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__div_float__"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_22__div_float__, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__rdiv__"), (PyCFunction)__pyx_pf_11mass_stream_10MassStream_24__rdiv__, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_11mass_stream_MassStream[] = {
  {(char *)"comp", __pyx_getprop_11mass_stream_10MassStream_comp, __pyx_setprop_11mass_stream_10MassStream_comp, 0, 0},
  {(char *)"mass", __pyx_getprop_11mass_stream_10MassStream_mass, __pyx_setprop_11mass_stream_10MassStream_mass, 0, 0},
  {(char *)"name", __pyx_getprop_11mass_stream_10MassStream_name, __pyx_setprop_11mass_stream_10MassStream_name, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MassStream = {
  __pyx_pf_11mass_stream_10MassStream_19__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pf_11mass_stream_10MassStream_21__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  __pyx_pf_11mass_stream_10MassStream_23__div__, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  __pyx_pf_11mass_stream_10MassStream_25__truediv__, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MassStream = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MassStream = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MassStream = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_11mass_stream_MassStream = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("mass_stream.MassStream"), /*tp_name*/
  sizeof(struct __pyx_obj_11mass_stream_MassStream), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11mass_stream_MassStream, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MassStream, /*tp_as_number*/
  &__pyx_tp_as_sequence_MassStream, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MassStream, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MassStream, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("MassStream fuel cycle flow object.\n\n    Args:\n        * compdict (dict or str): This is the input isotopic component dictionary.\n          This dictionary need not be normalized; MassStream initialization will\n          automatically renormalize the stream.  Thus compdict simply is a dictionary\n          of relative weights.  The keys of compdict must be integers representing\n          isotopes in zzaaam <isoform> form.  The values are floats for \n          each isotope's weight fraction.\n\n          If a string is provided instead of a dictionary, then MassStream will\n          read in the compdict vector from a file at the string's location using \n          the load_from_text() method.  \n\n          If no compdict is provided, an empty MassStream object is constructed.\n\n    Keyword Args:\n        * mass (float): This is the mass of the new stream. If the mass provided\n          is negative (default -1.0) then the mass of the new stream is calculated from \n          the sum of compdict's components before normalization.  If the mass here\n          is positive or zero, then this mass overrides the calculated one.\n        * name (str):  A string label for the stream.  Helpful for large numbers of \n          streams. Default ''.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11mass_stream_MassStream, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_11mass_stream_MassStream, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11mass_stream_MassStream, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("mass_stream"),
    __Pyx_DOCSTR(__pyx_k_7), /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_n_s__Here, __pyx_k__Here, sizeof(__pyx_k__Here), 0, 0, 1, 1},
  {&__pyx_n_s__IOError, __pyx_k__IOError, sizeof(__pyx_k__IOError), 0, 0, 1, 1},
  {&__pyx_n_s__LLzz, __pyx_k__LLzz, sizeof(__pyx_k__LLzz), 0, 0, 1, 1},
  {&__pyx_n_s__Normalize, __pyx_k__Normalize, sizeof(__pyx_k__Normalize), 0, 0, 1, 1},
  {&__pyx_n_s__NotImplemented, __pyx_k__NotImplemented, sizeof(__pyx_k__NotImplemented), 0, 0, 1, 1},
  {&__pyx_n_s__Print, __pyx_k__Print, sizeof(__pyx_k__Print), 0, 0, 1, 1},
  {&__pyx_n_s__TypeError, __pyx_k__TypeError, sizeof(__pyx_k__TypeError), 0, 0, 1, 1},
  {&__pyx_n_s____add_float__, __pyx_k____add_float__, sizeof(__pyx_k____add_float__), 0, 0, 1, 1},
  {&__pyx_n_s____add_mass_stream__, __pyx_k____add_mass_stream__, sizeof(__pyx_k____add_mass_stream__), 0, 0, 1, 1},
  {&__pyx_n_s____div__, __pyx_k____div__, sizeof(__pyx_k____div__), 0, 0, 1, 1},
  {&__pyx_n_s____div_float__, __pyx_k____div_float__, sizeof(__pyx_k____div_float__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____mul_float__, __pyx_k____mul_float__, sizeof(__pyx_k____mul_float__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__atomic_weight, __pyx_k__atomic_weight, sizeof(__pyx_k__atomic_weight), 0, 0, 1, 1},
  {&__pyx_n_s__basestring, __pyx_k__basestring, sizeof(__pyx_k__basestring), 0, 0, 1, 1},
  {&__pyx_n_s__c_str, __pyx_k__c_str, sizeof(__pyx_k__c_str), 0, 0, 1, 1},
  {&__pyx_n_s__comp, __pyx_k__comp, sizeof(__pyx_k__comp), 0, 0, 1, 1},
  {&__pyx_n_s__exists, __pyx_k__exists, sizeof(__pyx_k__exists), 0, 0, 1, 1},
  {&__pyx_n_s__filename, __pyx_k__filename, sizeof(__pyx_k__filename), 0, 0, 1, 1},
  {&__pyx_n_s__format, __pyx_k__format, sizeof(__pyx_k__format), 0, 0, 1, 1},
  {&__pyx_n_s__getACT, __pyx_k__getACT, sizeof(__pyx_k__getACT), 0, 0, 1, 1},
  {&__pyx_n_s__getFP, __pyx_k__getFP, sizeof(__pyx_k__getFP), 0, 0, 1, 1},
  {&__pyx_n_s__getLAN, __pyx_k__getLAN, sizeof(__pyx_k__getLAN), 0, 0, 1, 1},
  {&__pyx_n_s__getMA, __pyx_k__getMA, sizeof(__pyx_k__getMA), 0, 0, 1, 1},
  {&__pyx_n_s__getPU, __pyx_k__getPU, sizeof(__pyx_k__getPU), 0, 0, 1, 1},
  {&__pyx_n_s__getSubStream, __pyx_k__getSubStream, sizeof(__pyx_k__getSubStream), 0, 0, 1, 1},
  {&__pyx_n_s__getTRU, __pyx_k__getTRU, sizeof(__pyx_k__getTRU), 0, 0, 1, 1},
  {&__pyx_n_s__getU, __pyx_k__getU, sizeof(__pyx_k__getU), 0, 0, 1, 1},
  {&__pyx_n_s__groupname, __pyx_k__groupname, sizeof(__pyx_k__groupname), 0, 0, 1, 1},
  {&__pyx_n_s__insert, __pyx_k__insert, sizeof(__pyx_k__insert), 0, 0, 1, 1},
  {&__pyx_n_s__iso_sequence, __pyx_k__iso_sequence, sizeof(__pyx_k__iso_sequence), 0, 0, 1, 1},
  {&__pyx_n_s__isoname, __pyx_k__isoname, sizeof(__pyx_k__isoname), 0, 0, 1, 1},
  {&__pyx_n_s__isovec, __pyx_k__isovec, sizeof(__pyx_k__isovec), 0, 0, 1, 1},
  {&__pyx_n_s__load_from_hdf5, __pyx_k__load_from_hdf5, sizeof(__pyx_k__load_from_hdf5), 0, 0, 1, 1},
  {&__pyx_n_s__load_from_text, __pyx_k__load_from_text, sizeof(__pyx_k__load_from_text), 0, 0, 1, 1},
  {&__pyx_n_s__mass, __pyx_k__mass, sizeof(__pyx_k__mass), 0, 0, 1, 1},
  {&__pyx_n_s__mixed_2_zzaaam, __pyx_k__mixed_2_zzaaam, sizeof(__pyx_k__mixed_2_zzaaam), 0, 0, 1, 1},
  {&__pyx_n_s__ms_pointer, __pyx_k__ms_pointer, sizeof(__pyx_k__ms_pointer), 0, 0, 1, 1},
  {&__pyx_n_s__multByMass, __pyx_k__multByMass, sizeof(__pyx_k__multByMass), 0, 0, 1, 1},
  {&__pyx_n_s__name, __pyx_k__name, sizeof(__pyx_k__name), 0, 0, 1, 1},
  {&__pyx_n_s__norm_comp_dict, __pyx_k__norm_comp_dict, sizeof(__pyx_k__norm_comp_dict), 0, 0, 1, 1},
  {&__pyx_n_s__os, __pyx_k__os, sizeof(__pyx_k__os), 0, 0, 1, 1},
  {&__pyx_n_s__path, __pyx_k__path, sizeof(__pyx_k__path), 0, 0, 1, 1},
  {&__pyx_n_s__row, __pyx_k__row, sizeof(__pyx_k__row), 0, 0, 1, 1},
  {&__pyx_n_s__upper, __pyx_k__upper, sizeof(__pyx_k__upper), 0, 0, 1, 1},
  {&__pyx_n_s__zzLL, __pyx_k__zzLL, sizeof(__pyx_k__zzLL), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_basestring = __Pyx_GetName(__pyx_b, __pyx_n_s__basestring); if (!__pyx_builtin_basestring) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IOError = __Pyx_GetName(__pyx_b, __pyx_n_s__IOError); if (!__pyx_builtin_IOError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetName(__pyx_b, __pyx_n_s__TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_NotImplemented = __Pyx_GetName(__pyx_b, __pyx_n_s__NotImplemented); if (!__pyx_builtin_NotImplemented) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "mass_stream.pyx":68
 *         else:
 *             # Bad MassStream
 *             raise TypeError("The mass stream isotopic vector must be a dict, str, or None.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_k_tuple_4 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_4));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_3));
  PyTuple_SET_ITEM(__pyx_k_tuple_4, 0, ((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_4));

  /* "mass_stream.pyx":258
 * 
 *             else:
 *                 raise TypeError("Isotopes must be strings or integers.")             # <<<<<<<<<<<<<<
 * 
 *             iso_set.insert(iso_zz)
 */
  __pyx_k_tuple_6 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_6));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_5));
  PyTuple_SET_ITEM(__pyx_k_tuple_6, 0, ((PyObject *)__pyx_kp_s_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_6));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initmass_stream(void); /*proto*/
PyMODINIT_FUNC initmass_stream(void)
#else
PyMODINIT_FUNC PyInit_mass_stream(void); /*proto*/
PyMODINIT_FUNC PyInit_mass_stream(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  #if CYTHON_REFNANNY
  void* __pyx_refnanny = NULL;
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  __pyx_refnanny = __Pyx_RefNanny->SetupContext("PyMODINIT_FUNC PyInit_mass_stream(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("mass_stream"), __pyx_methods, __Pyx_DOCSTR(__pyx_k_7), 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_mass_stream) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_11mass_stream_MassStream) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MassStream", (PyObject *)&__pyx_type_11mass_stream_MassStream) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_11mass_stream_MassStream = &__pyx_type_11mass_stream_MassStream;
  /*--- Type import code ---*/
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("stlconverters"); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "dict_to_map_int_dbl", (void (**)(void))&__pyx_f_13stlconverters_dict_to_map_int_dbl, "std::map<int,double> (PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "map_to_dict_int_dbl", (void (**)(void))&__pyx_f_13stlconverters_map_to_dict_int_dbl, "PyObject *(std::map<int,double>)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "dict_to_map_str_int", (void (**)(void))&__pyx_f_13stlconverters_dict_to_map_str_int, "std::map<std::string,int> (PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "map_to_dict_str_int", (void (**)(void))&__pyx_f_13stlconverters_map_to_dict_str_int, "PyObject *(std::map<std::string,int>)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "dict_to_map_int_str", (void (**)(void))&__pyx_f_13stlconverters_dict_to_map_int_str, "std::map<int,std::string> (PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "map_to_dict_int_str", (void (**)(void))&__pyx_f_13stlconverters_map_to_dict_int_str, "PyObject *(std::map<int,std::string>)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "dict_to_map_str_dbl", (void (**)(void))&__pyx_f_13stlconverters_dict_to_map_str_dbl, "std::map<std::string,double> (PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "map_to_dict_str_dbl", (void (**)(void))&__pyx_f_13stlconverters_map_to_dict_str_dbl, "PyObject *(std::map<std::string,double>)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "py_to_cpp_set_int", (void (**)(void))&__pyx_f_13stlconverters_py_to_cpp_set_int, "std::set<int> (PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "cpp_to_py_set_int", (void (**)(void))&__pyx_f_13stlconverters_cpp_to_py_set_int, "PyObject *(std::set<int>)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "py_to_cpp_set_str", (void (**)(void))&__pyx_f_13stlconverters_py_to_cpp_set_str, "std::set<std::string> (PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "cpp_to_py_set_str", (void (**)(void))&__pyx_f_13stlconverters_cpp_to_py_set_str, "PyObject *(std::set<std::string>)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*--- Execution code ---*/

  /* "mass_stream.pyx":14
 * cimport stlconverters as conv
 * 
 * import isoname             # <<<<<<<<<<<<<<
 * import os
 * 
 */
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__isoname), 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__isoname, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mass_stream.pyx":15
 * 
 * import isoname
 * import os             # <<<<<<<<<<<<<<
 * 
 * cdef class MassStream:
 */
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__os), 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__os, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mass_stream.pyx":1
 * """Python wrapper for isoname library."""             # <<<<<<<<<<<<<<
 * # Cython imports
 * from libcpp.map cimport map as cpp_map
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    __Pyx_AddTraceback("init mass_stream");
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init mass_stream");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
    if (Py_TYPE(obj)->tp_as_number && Py_TYPE(obj)->tp_as_number->nb_float) {
        return PyFloat_AsDouble(obj);
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

#if PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}

static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    PyObject* v;
    int i;

    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                return -1;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            return -1;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0 &&
                isspace(Py_CHARMASK(s[len-1])) &&
                s[len-1] != ' ')
                    PyFile_SoftSpace(f, 0);
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            return -1;
        PyFile_SoftSpace(f, 0);
    }
    return 0;
}

#else /* Python 3 has a print function */

static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = __Pyx_GetAttrString(__pyx_b, "print");
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItemString(kwargs, "file", stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItemString(kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItemString(__pyx_print_kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}

#endif

#if PY_MAJOR_VERSION < 3

static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            return -1;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        return -1;
    if (PyFile_WriteString("\n", f) < 0)
        return -1;
    return 0;
    /* the line below is just to avoid compiler
     * compiler warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}

#else /* Python 3 has a print function */

static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_New(1);
    if (unlikely(!arg_tuple))
        return -1;
    Py_INCREF(o);
    PyTuple_SET_ITEM(arg_tuple, 0, o);
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}

#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;

    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(name);
    #else
    py_name = PyUnicode_FromString(name);
    #endif
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;

    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%s does not export expected C function %s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %s.%s has wrong signature (expected %s, got %s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %s.%s has wrong signature (expected %s, got %s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
