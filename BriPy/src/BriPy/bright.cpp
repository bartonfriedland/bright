/* Generated by Cython 0.14.1rc3 on Sat Feb 19 12:26:39 2011 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE_API__BriPy
#include <utility>
#include <map>
#include <set>
#include "stdlib.h"
#include "stdio.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include <string>
#include "../MassStream.h"
#include "stdexcept"
#include <vector>
#include "../bright.h"
#include "../FCComp.h"
#include "../Enrichment.h"
#include "../Reprocess.h"
#include "../Storage.h"
#include "../Reactor1G.h"

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif

#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

static const char *__pyx_f[] = {
  "bright_wrapper.pyx",
  "numpy.pxd",
  "bright.pyx",
  "mass_stream.pxd",
};

typedef npy_int8 __pyx_t_5numpy_int8_t;

typedef npy_int16 __pyx_t_5numpy_int16_t;

typedef npy_int32 __pyx_t_5numpy_int32_t;

typedef npy_int64 __pyx_t_5numpy_int64_t;

typedef npy_uint8 __pyx_t_5numpy_uint8_t;

typedef npy_uint16 __pyx_t_5numpy_uint16_t;

typedef npy_uint32 __pyx_t_5numpy_uint32_t;

typedef npy_uint64 __pyx_t_5numpy_uint64_t;

typedef npy_float32 __pyx_t_5numpy_float32_t;

typedef npy_float64 __pyx_t_5numpy_float64_t;

typedef npy_long __pyx_t_5numpy_int_t;

typedef npy_longlong __pyx_t_5numpy_long_t;

typedef npy_intp __pyx_t_5numpy_intp_t;

typedef npy_uintp __pyx_t_5numpy_uintp_t;

typedef npy_ulong __pyx_t_5numpy_uint_t;

typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

typedef npy_double __pyx_t_5numpy_float_t;

typedef npy_double __pyx_t_5numpy_double_t;

typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif

/* Type declarations */

typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":171
 * ####################
 * 
 * cdef class FCComp:             # <<<<<<<<<<<<<<
 *     """Base Fuel Cycle Component Class.
 * 
 */

struct __pyx_obj_5BriPy_FCComp {
  PyObject_HEAD
  FCComp *fccomp_pointer;
};

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1498
 * 
 * 
 * cdef class Reactor1G(FCComp):             # <<<<<<<<<<<<<<
 *     """One-Group Reactor Fuel Cycle Component Class.  Daughter of BriPy.FCComp class.
 * 
 */

struct __pyx_obj_5BriPy_Reactor1G {
  struct __pyx_obj_5BriPy_FCComp __pyx_base;
  Reactor1G *r1g_pointer;
};

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1244
 * 
 * 
 * cdef class FluencePoint:             # <<<<<<<<<<<<<<
 *     """This class holds three simple data points that represent a fluence point.
 * 
 */

struct __pyx_obj_5BriPy_FluencePoint {
  PyObject_HEAD
  struct FluencePoint fp;
};

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1078
 * 
 * 
 * cdef class Storage(FCComp):             # <<<<<<<<<<<<<<
 *     """Storage Fuel Cycle Component Class.  Daughter of BriPy.FCComp class.
 * 
 */

struct __pyx_obj_5BriPy_Storage {
  struct __pyx_obj_5BriPy_FCComp __pyx_base;
  Storage *s_pointer;
};

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":416
 * 
 * 
 * cdef class EnrichmentParameters:             # <<<<<<<<<<<<<<
 *     """This class is a collection of values that mirror the attributes in
 *     Enrichment that are required for the cascade model to run.
 */

struct __pyx_obj_5BriPy_EnrichmentParameters {
  PyObject_HEAD
  struct EnrichmentParameters ep;
};

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":863
 * 
 * 
 * cdef class Reprocess(FCComp):             # <<<<<<<<<<<<<<
 *     """Reprocess Fuel Cycle Component Class.  Daughter of BriPy.FCComp class.
 * 
 */

struct __pyx_obj_5BriPy_Reprocess {
  struct __pyx_obj_5BriPy_FCComp __pyx_base;
  Reprocess *r_pointer;
};

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1298
 * 
 * 
 * cdef class ReactorParameters:             # <<<<<<<<<<<<<<
 *     """This data structure is a set of physical reactor parameters. It may be used to instantiate new reactor objects **OR**
 *     to define default settings for a reactor type.  The data stored in this class is copied over to
 */

struct __pyx_obj_5BriPy_ReactorParameters {
  PyObject_HEAD
  ReactorParameters *rp_pointer;
};

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":510
 * 
 * 
 * cdef class Enrichment(FCComp):             # <<<<<<<<<<<<<<
 *     """Enrichment Fuel Cycle Component Class.  Daughter of BriPy.FCComp class.
 * 
 */

struct __pyx_obj_5BriPy_Enrichment {
  struct __pyx_obj_5BriPy_FCComp __pyx_base;
  Enrichment *e_pointer;
};

/* "mass_stream.pxd":3
 * cimport cpp_mass_stream
 * 
 * cdef class MassStream:             # <<<<<<<<<<<<<<
 *     cdef cpp_mass_stream.MassStream * ms_pointer
 * #    pass
 */

struct __pyx_obj_11mass_stream_MassStream {
  PyObject_HEAD
  MassStream *ms_pointer;
};

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":58
 * #######################################
 * 
 * cdef class BrightConfig:             # <<<<<<<<<<<<<<
 * 
 *     # From bright namespace
 */

struct __pyx_obj_5BriPy_BrightConfig {
  PyObject_HEAD
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
  end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
  }
  #define __Pyx_RefNannySetupContext(name)           void *__pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XDECREF(r) do { if((r) != NULL) {__Pyx_DECREF(r);} } while(0)
#else
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);} } while(0)
#define __Pyx_XGOTREF(r) do { if((r) != NULL) {__Pyx_GOTREF(r);} } while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static CYTHON_INLINE long __Pyx_NegateNonNeg(long b) { return unlikely(b < 0) ? b : !b; }
static CYTHON_INLINE PyObject* __Pyx_PyBoolOrNull_FromLong(long b) {
    return unlikely(b < 0) ? NULL : __Pyx_PyBool_FromLong(b);
}


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static PyObject *__Pyx_UnpackItem(PyObject *, Py_ssize_t index); /*proto*/
static int __Pyx_EndUnpack(PyObject *, Py_ssize_t expected); /*proto*/

static double __Pyx__PyObject_AsDouble(PyObject* obj); /* proto */

#define __Pyx_PyObject_AsDouble(obj) \
    ((likely(PyFloat_CheckExact(obj))) ? \
     PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

/* Run-time type information about structs used with buffers */
struct __Pyx_StructField_;

typedef struct {
  const char* name; /* for error messages only */
  struct __Pyx_StructField_* fields;
  size_t size;     /* sizeof(type) */
  char typegroup; /* _R_eal, _C_omplex, Signed _I_nt, _U_nsigned int, _S_truct, _P_ointer, _O_bject */
} __Pyx_TypeInfo;

typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;

typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;


static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj, __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index); /*proto*/
#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
#define __Pyx_GetBuffer PyObject_GetBuffer
#define __Pyx_ReleaseBuffer PyBuffer_Release
#endif

Py_ssize_t __Pyx_zeros[] = {0};
Py_ssize_t __Pyx_minusones[] = {-1};

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list); /*proto*/

#if PY_VERSION_HEX < 0x02050000
#ifndef PyAnySet_CheckExact

#define PyAnySet_CheckExact(ob) \
    ((ob)->ob_type == &PySet_Type || \
     (ob)->ob_type == &PyFrozenSet_Type)

#define PySet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PySet_Type, (iterable), NULL)

#define Pyx_PyFrozenSet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PyFrozenSet_Type, (iterable), NULL)

#define PySet_Size(anyset) \
    PyObject_Size((anyset))

#define PySet_Contains(anyset, key) \
    PySequence_Contains((anyset), (key))

#define PySet_Pop(set) \
    PyObject_CallMethod(set, (char *)"pop", NULL)

static CYTHON_INLINE int PySet_Clear(PyObject *set) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"clear", NULL);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Discard(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"discard", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Add(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"add", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

#endif /* PyAnySet_CheckExact (<= Py2.4) */

#if PY_VERSION_HEX < 0x02040000
#ifndef Py_SETOBJECT_H
#define Py_SETOBJECT_H

static PyTypeObject *__Pyx_PySet_Type = NULL;
static PyTypeObject *__Pyx_PyFrozenSet_Type = NULL;

#define PySet_Type (*__Pyx_PySet_Type)
#define PyFrozenSet_Type (*__Pyx_PyFrozenSet_Type)

#define PyAnySet_Check(ob) \
    (PyAnySet_CheckExact(ob) || \
     PyType_IsSubtype((ob)->ob_type, &PySet_Type) || \
     PyType_IsSubtype((ob)->ob_type, &PyFrozenSet_Type))

#define PyFrozenSet_CheckExact(ob) ((ob)->ob_type == &PyFrozenSet_Type)

static int __Pyx_Py23SetsImport(void) {
    PyObject *sets=0, *Set=0, *ImmutableSet=0;

    sets = PyImport_ImportModule((char *)"sets");
    if (!sets) goto bad;
    Set = PyObject_GetAttrString(sets, (char *)"Set");
    if (!Set) goto bad;
    ImmutableSet = PyObject_GetAttrString(sets, (char *)"ImmutableSet");
    if (!ImmutableSet) goto bad;
    Py_DECREF(sets);

    __Pyx_PySet_Type       = (PyTypeObject*) Set;
    __Pyx_PyFrozenSet_Type = (PyTypeObject*) ImmutableSet;

    return 0;

 bad:
    Py_XDECREF(sets);
    Py_XDECREF(Set);
    Py_XDECREF(ImmutableSet);
    return -1;
}

#else
static int __Pyx_Py23SetsImport(void) { return 0; }
#endif /* !Py_SETOBJECT_H */
#endif /* < Py2.4  */
#endif /* < Py2.5  */

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif

#if defined(_WIN32) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, long size, int strict);  /*proto*/

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
/* Module declarations from libcpp.utility */

/* Module declarations from libcpp.map */

/* Module declarations from libcpp.pair */

/* Module declarations from libcpp.set */

/* Module declarations from libc.stdlib */

/* Module declarations from cpython.buffer */

/* Module declarations from cpython.ref */

/* Module declarations from libc.stdio */

/* Module declarations from cpython.object */

/* Module declarations from numpy */

/* Module declarations from numpy */

static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *, PyObject *, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/
static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *); /*proto*/
/* Module declarations from std */

/* Module declarations from cpp_mass_stream */

/* Module declarations from libcpp.vector */

/* Module declarations from cpp_bright */

/* Module declarations from stlconverters */

static std::map<int,double> (*__pyx_f_13stlconverters_dict_to_map_int_dbl)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_13stlconverters_map_to_dict_int_dbl)(std::map<int,double>); /*proto*/
static std::map<std::string,int> (*__pyx_f_13stlconverters_dict_to_map_str_int)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_13stlconverters_map_to_dict_str_int)(std::map<std::string,int>); /*proto*/
static std::map<int,std::string> (*__pyx_f_13stlconverters_dict_to_map_int_str)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_13stlconverters_map_to_dict_int_str)(std::map<int,std::string>); /*proto*/
static std::map<std::string,double> (*__pyx_f_13stlconverters_dict_to_map_str_dbl)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_13stlconverters_map_to_dict_str_dbl)(std::map<std::string,double>); /*proto*/
static std::set<int> (*__pyx_f_13stlconverters_py_to_cpp_set_int)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_13stlconverters_cpp_to_py_set_int)(std::set<int>); /*proto*/
static std::set<std::string> (*__pyx_f_13stlconverters_py_to_cpp_set_str)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_13stlconverters_cpp_to_py_set_str)(std::set<std::string>); /*proto*/
static std::vector<double> (*__pyx_f_13stlconverters_array_to_vector_1d_dbl)(PyArrayObject *); /*proto*/
static PyArrayObject *(*__pyx_f_13stlconverters_vector_to_array_1d_dbl)(std::vector<double>); /*proto*/
static std::map<int,std::vector<double> > (*__pyx_f_13stlconverters_dict_to_map_int_vector_to_array_1d_dbl)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_13stlconverters_map_to_dict_int_array_to_vector_1d_dbl)(std::map<int,std::vector<double> >); /*proto*/
/* Module declarations from mass_stream */

static PyTypeObject *__pyx_ptype_11mass_stream_MassStream = 0;
/* Module declarations from BriPy */

static PyTypeObject *__pyx_ptype_5BriPy_BrightConfig = 0;
static PyTypeObject *__pyx_ptype_5BriPy_FCComp = 0;
static PyTypeObject *__pyx_ptype_5BriPy_EnrichmentParameters = 0;
static PyTypeObject *__pyx_ptype_5BriPy_Enrichment = 0;
static PyTypeObject *__pyx_ptype_5BriPy_Reprocess = 0;
static PyTypeObject *__pyx_ptype_5BriPy_Storage = 0;
static PyTypeObject *__pyx_ptype_5BriPy_FluencePoint = 0;
static PyTypeObject *__pyx_ptype_5BriPy_ReactorParameters = 0;
static PyTypeObject *__pyx_ptype_5BriPy_Reactor1G = 0;
static PyObject *__pyx_f_5BriPy_PyBrightStart(int __pyx_skip_dispatch); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t = { "float64_t", NULL, sizeof(__pyx_t_5numpy_float64_t), 'R' };
#define __Pyx_MODULE_NAME "BriPy"
static int __pyx_module_is_main_BriPy = 0;

/* Implementation of BriPy */
static PyObject *__pyx_builtin_basestring;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static char __pyx_k_1[] = "";
static char __pyx_k_2[] = "Separation keys must be strings or integers.";
static char __pyx_k_5[] = "'input' must be a MassStream, dict, or None.";
static char __pyx_k_8[] = "The reactor_parameters keyword must be an instance of the ReactorParameters class or None.  Got ";
static char __pyx_k_9[] = "The params2track keyword must be a set of strings or None.  Got ";
static char __pyx_k_10[] = "reactor.h5";
static char __pyx_k_11[] = "ndarray is not C contiguous";
static char __pyx_k_13[] = "ndarray is not Fortran contiguous";
static char __pyx_k_15[] = "Non-native byte order not supported";
static char __pyx_k_17[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_18[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_21[] = "Format string allocated too short.";
static char __pyx_k_23[] = "load_isos2track_hdf5";
static char __pyx_k_24[] = "load_isos2track_text";
static char __pyx_k_25[] = "UraniumEnrichmentDefaults";
static char __pyx_k__B[] = "B";
static char __pyx_k__F[] = "F";
static char __pyx_k__H[] = "H";
static char __pyx_k__I[] = "I";
static char __pyx_k__L[] = "L";
static char __pyx_k__M[] = "M";
static char __pyx_k__N[] = "N";
static char __pyx_k__O[] = "O";
static char __pyx_k__Q[] = "Q";
static char __pyx_k__b[] = "b";
static char __pyx_k__d[] = "d";
static char __pyx_k__f[] = "f";
static char __pyx_k__g[] = "g";
static char __pyx_k__h[] = "h";
static char __pyx_k__i[] = "i";
static char __pyx_k__j[] = "j";
static char __pyx_k__k[] = "k";
static char __pyx_k__l[] = "l";
static char __pyx_k__m[] = "m";
static char __pyx_k__q[] = "q";
static char __pyx_k__r[] = "r";
static char __pyx_k__M0[] = "M0";
static char __pyx_k__N0[] = "N0";
static char __pyx_k__VC[] = "VC";
static char __pyx_k__VF[] = "VF";
static char __pyx_k__Zd[] = "Zd";
static char __pyx_k__Zf[] = "Zf";
static char __pyx_k__Zg[] = "Zg";
static char __pyx_k__ep[] = "ep";
static char __pyx_k__fp[] = "fp";
static char __pyx_k__np[] = "np";
static char __pyx_k__os[] = "os";
static char __pyx_k__BUt[] = "BUt";
static char __pyx_k__S_O[] = "S_O";
static char __pyx_k__S_T[] = "S_T";
static char __pyx_k__buf[] = "buf";
static char __pyx_k__obj[] = "obj";
static char __pyx_k__phi[] = "phi";
static char __pyx_k__pnl[] = "pnl";
static char __pyx_k__x_F[] = "x_F";
static char __pyx_k__x_P[] = "x_P";
static char __pyx_k__x_W[] = "x_W";
static char __pyx_k__LLzz[] = "LLzz";
static char __pyx_k__P_NL[] = "P_NL";
static char __pyx_k__base[] = "base";
static char __pyx_k__flux[] = "flux";
static char __pyx_k__join[] = "join";
static char __pyx_k__name[] = "name";
static char __pyx_k__ndim[] = "ndim";
static char __pyx_k__path[] = "path";
static char __pyx_k__rhoC[] = "rhoC";
static char __pyx_k__rhoF[] = "rhoF";
static char __pyx_k__xP_j[] = "xP_j";
static char __pyx_k__xW_j[] = "xW_j";
static char __pyx_k__BriPy[] = "BriPy";
static char __pyx_k__Mstar[] = "Mstar";
static char __pyx_k__c_str[] = "c_str";
static char __pyx_k__clear[] = "clear";
static char __pyx_k__descr[] = "descr";
static char __pyx_k__input[] = "input";
static char __pyx_k__items[] = "items";
static char __pyx_k__names[] = "names";
static char __pyx_k__numpy[] = "numpy";
static char __pyx_k__range[] = "range";
static char __pyx_k__shape[] = "shape";
static char __pyx_k__split[] = "split";
static char __pyx_k__BUi_F_[] = "BUi_F_";
static char __pyx_k__IsosIn[] = "IsosIn";
static char __pyx_k__Length[] = "Length";
static char __pyx_k__PoverF[] = "PoverF";
static char __pyx_k__Radius[] = "Radius";
static char __pyx_k__WoverF[] = "WoverF";
static char __pyx_k__doCalc[] = "doCalc";
static char __pyx_k__fields[] = "fields";
static char __pyx_k__format[] = "format";
static char __pyx_k__params[] = "params";
static char __pyx_k__sepeff[] = "sepeff";
static char __pyx_k__IsosOut[] = "IsosOut";
static char __pyx_k__Lattice[] = "Lattice";
static char __pyx_k__Mstar_0[] = "Mstar_0";
static char __pyx_k__PassNum[] = "PassNum";
static char __pyx_k__alpha_0[] = "alpha_0";
static char __pyx_k__batches[] = "batches";
static char __pyx_k__environ[] = "environ";
static char __pyx_k__isoname[] = "isoname";
static char __pyx_k__libfile[] = "libfile";
static char __pyx_k__loadLib[] = "loadLib";
static char __pyx_k__strides[] = "strides";
static char __pyx_k__useZeta[] = "useZeta";
static char __pyx_k__FuelForm[] = "FuelForm";
static char __pyx_k__IsosTail[] = "IsosTail";
static char __pyx_k__ParamsIn[] = "ParamsIn";
static char __pyx_k__TargetBU[] = "TargetBU";
static char __pyx_k____file__[] = "__file__";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__filename[] = "filename";
static char __pyx_k__itemsize[] = "itemsize";
static char __pyx_k__readonly[] = "readonly";
static char __pyx_k__type_num[] = "type_num";
static char __pyx_k__writeout[] = "writeout";
static char __pyx_k__ParamsOut[] = "ParamsOut";
static char __pyx_k__TypeError[] = "TypeError";
static char __pyx_k__byteorder[] = "byteorder";
static char __pyx_k__e_pointer[] = "e_pointer";
static char __pyx_k__r_pointer[] = "r_pointer";
static char __pyx_k__s_pointer[] = "s_pointer";
static char __pyx_k__setParams[] = "setParams";
static char __pyx_k__writeHDF5[] = "writeHDF5";
static char __pyx_k__writeText[] = "writeText";
static char __pyx_k__SWUperFeed[] = "SWUperFeed";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k__basestring[] = "basestring";
static char __pyx_k__decay_time[] = "decay_time";
static char __pyx_k__initialize[] = "initialize";
static char __pyx_k__ms_pointer[] = "ms_pointer";
static char __pyx_k__open_slots[] = "open_slots";
static char __pyx_k__rp_pointer[] = "rp_pointer";
static char __pyx_k__suboffsets[] = "suboffsets";
static char __pyx_k__BRIGHT_DATA[] = "BRIGHT_DATA";
static char __pyx_k__BrightStart[] = "BrightStart";
static char __pyx_k__CoolantForm[] = "CoolantForm";
static char __pyx_k__FuelDensity[] = "FuelDensity";
static char __pyx_k__LatticeType[] = "LatticeType";
static char __pyx_k___cpp_sepeff[] = "_cpp_sepeff";
static char __pyx_k__bright_data[] = "bright_data";
static char __pyx_k__datasetname[] = "datasetname";
static char __pyx_k__mass_stream[] = "mass_stream";
static char __pyx_k__r1g_pointer[] = "r1g_pointer";
static char __pyx_k__total_slots[] = "total_slots";
static char __pyx_k__H_XS_Rescale[] = "H_XS_Rescale";
static char __pyx_k__RuntimeError[] = "RuntimeError";
static char __pyx_k__TotalPerFeed[] = "TotalPerFeed";
static char __pyx_k__natural_name[] = "natural_name";
static char __pyx_k__params2track[] = "params2track";
static char __pyx_k__writeIsoPass[] = "writeIsoPass";
static char __pyx_k__SWUperProduct[] = "SWUperProduct";
static char __pyx_k__bright_config[] = "bright_config";
static char __pyx_k__enrich_params[] = "enrich_params";
static char __pyx_k__CoolantDensity[] = "CoolantDensity";
static char __pyx_k__fccomp_pointer[] = "fccomp_pointer";
static char __pyx_k__mixed_2_zzaaam[] = "mixed_2_zzaaam";
static char __pyx_k__writeParamPass[] = "writeParamPass";
static char __pyx_k__HydrogenRescale[] = "HydrogenRescale";
static char __pyx_k__useDisadvantage[] = "useDisadvantage";
static char __pyx_k__FuelChemicalForm[] = "FuelChemicalForm";
static char __pyx_k__reactor_parameters[] = "reactor_parameters";
static char __pyx_k__CoolantChemicalForm[] = "CoolantChemicalForm";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_u_11;
static PyObject *__pyx_kp_u_13;
static PyObject *__pyx_kp_u_15;
static PyObject *__pyx_kp_u_17;
static PyObject *__pyx_kp_u_18;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_kp_u_21;
static PyObject *__pyx_n_s_23;
static PyObject *__pyx_n_s_24;
static PyObject *__pyx_n_s_25;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_kp_s_8;
static PyObject *__pyx_kp_s_9;
static PyObject *__pyx_n_s__B;
static PyObject *__pyx_n_s__BRIGHT_DATA;
static PyObject *__pyx_n_s__BUi_F_;
static PyObject *__pyx_n_s__BUt;
static PyObject *__pyx_n_s__BriPy;
static PyObject *__pyx_n_s__BrightStart;
static PyObject *__pyx_n_s__CoolantChemicalForm;
static PyObject *__pyx_n_s__CoolantDensity;
static PyObject *__pyx_n_s__CoolantForm;
static PyObject *__pyx_n_s__F;
static PyObject *__pyx_n_s__FuelChemicalForm;
static PyObject *__pyx_n_s__FuelDensity;
static PyObject *__pyx_n_s__FuelForm;
static PyObject *__pyx_n_s__H_XS_Rescale;
static PyObject *__pyx_n_s__HydrogenRescale;
static PyObject *__pyx_n_s__IsosIn;
static PyObject *__pyx_n_s__IsosOut;
static PyObject *__pyx_n_s__IsosTail;
static PyObject *__pyx_n_s__LLzz;
static PyObject *__pyx_n_s__Lattice;
static PyObject *__pyx_n_s__LatticeType;
static PyObject *__pyx_n_s__Length;
static PyObject *__pyx_n_s__M;
static PyObject *__pyx_n_s__M0;
static PyObject *__pyx_n_s__Mstar;
static PyObject *__pyx_n_s__Mstar_0;
static PyObject *__pyx_n_s__N;
static PyObject *__pyx_n_s__N0;
static PyObject *__pyx_n_s__P_NL;
static PyObject *__pyx_n_s__ParamsIn;
static PyObject *__pyx_n_s__ParamsOut;
static PyObject *__pyx_n_s__PassNum;
static PyObject *__pyx_n_s__PoverF;
static PyObject *__pyx_n_s__Radius;
static PyObject *__pyx_n_s__RuntimeError;
static PyObject *__pyx_n_s__SWUperFeed;
static PyObject *__pyx_n_s__SWUperProduct;
static PyObject *__pyx_n_s__S_O;
static PyObject *__pyx_n_s__S_T;
static PyObject *__pyx_n_s__TargetBU;
static PyObject *__pyx_n_s__TotalPerFeed;
static PyObject *__pyx_n_s__TypeError;
static PyObject *__pyx_n_s__VC;
static PyObject *__pyx_n_s__VF;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s__WoverF;
static PyObject *__pyx_n_s____file__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___cpp_sepeff;
static PyObject *__pyx_n_s__alpha_0;
static PyObject *__pyx_n_s__base;
static PyObject *__pyx_n_s__basestring;
static PyObject *__pyx_n_s__batches;
static PyObject *__pyx_n_s__bright_config;
static PyObject *__pyx_n_s__bright_data;
static PyObject *__pyx_n_s__buf;
static PyObject *__pyx_n_s__byteorder;
static PyObject *__pyx_n_s__c_str;
static PyObject *__pyx_n_s__clear;
static PyObject *__pyx_n_s__datasetname;
static PyObject *__pyx_n_s__decay_time;
static PyObject *__pyx_n_s__descr;
static PyObject *__pyx_n_s__doCalc;
static PyObject *__pyx_n_s__e_pointer;
static PyObject *__pyx_n_s__enrich_params;
static PyObject *__pyx_n_s__environ;
static PyObject *__pyx_n_s__ep;
static PyObject *__pyx_n_s__f;
static PyObject *__pyx_n_s__fccomp_pointer;
static PyObject *__pyx_n_s__fields;
static PyObject *__pyx_n_s__filename;
static PyObject *__pyx_n_s__flux;
static PyObject *__pyx_n_s__format;
static PyObject *__pyx_n_s__fp;
static PyObject *__pyx_n_s__initialize;
static PyObject *__pyx_n_s__input;
static PyObject *__pyx_n_s__isoname;
static PyObject *__pyx_n_s__items;
static PyObject *__pyx_n_s__itemsize;
static PyObject *__pyx_n_s__j;
static PyObject *__pyx_n_s__join;
static PyObject *__pyx_n_s__k;
static PyObject *__pyx_n_s__l;
static PyObject *__pyx_n_s__libfile;
static PyObject *__pyx_n_s__loadLib;
static PyObject *__pyx_n_s__m;
static PyObject *__pyx_n_s__mass_stream;
static PyObject *__pyx_n_s__mixed_2_zzaaam;
static PyObject *__pyx_n_s__ms_pointer;
static PyObject *__pyx_n_s__name;
static PyObject *__pyx_n_s__names;
static PyObject *__pyx_n_s__natural_name;
static PyObject *__pyx_n_s__ndim;
static PyObject *__pyx_n_s__np;
static PyObject *__pyx_n_s__numpy;
static PyObject *__pyx_n_s__obj;
static PyObject *__pyx_n_s__open_slots;
static PyObject *__pyx_n_s__os;
static PyObject *__pyx_n_s__params;
static PyObject *__pyx_n_s__params2track;
static PyObject *__pyx_n_s__path;
static PyObject *__pyx_n_s__phi;
static PyObject *__pyx_n_s__pnl;
static PyObject *__pyx_n_s__r;
static PyObject *__pyx_n_s__r1g_pointer;
static PyObject *__pyx_n_s__r_pointer;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__reactor_parameters;
static PyObject *__pyx_n_s__readonly;
static PyObject *__pyx_n_s__rhoC;
static PyObject *__pyx_n_s__rhoF;
static PyObject *__pyx_n_s__rp_pointer;
static PyObject *__pyx_n_s__s_pointer;
static PyObject *__pyx_n_s__sepeff;
static PyObject *__pyx_n_s__setParams;
static PyObject *__pyx_n_s__shape;
static PyObject *__pyx_n_s__split;
static PyObject *__pyx_n_s__strides;
static PyObject *__pyx_n_s__suboffsets;
static PyObject *__pyx_n_s__total_slots;
static PyObject *__pyx_n_s__type_num;
static PyObject *__pyx_n_s__useDisadvantage;
static PyObject *__pyx_n_s__useZeta;
static PyObject *__pyx_n_s__writeHDF5;
static PyObject *__pyx_n_s__writeIsoPass;
static PyObject *__pyx_n_s__writeParamPass;
static PyObject *__pyx_n_s__writeText;
static PyObject *__pyx_n_s__writeout;
static PyObject *__pyx_n_s__xP_j;
static PyObject *__pyx_n_s__xW_j;
static PyObject *__pyx_n_s__x_F;
static PyObject *__pyx_n_s__x_P;
static PyObject *__pyx_n_s__x_W;
static PyObject *__pyx_int_15;
static PyObject *__pyx_k_4;
static PyObject *__pyx_k_tuple_3;
static PyObject *__pyx_k_tuple_6;
static PyObject *__pyx_k_tuple_7;
static PyObject *__pyx_k_tuple_12;
static PyObject *__pyx_k_tuple_14;
static PyObject *__pyx_k_tuple_16;
static PyObject *__pyx_k_tuple_19;
static PyObject *__pyx_k_tuple_20;
static PyObject *__pyx_k_tuple_22;

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":38
 * 
 * # Specifiy the BRIGHT_DATA directory
 * cpdef PyBrightStart():             # <<<<<<<<<<<<<<
 *     if "BRIGHT_DATA" not in os.environ:
 *         bd = os.path.split(bright_data.__file__)
 */

static PyObject *__pyx_pf_5BriPy_PyBrightStart(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static  PyObject *__pyx_f_5BriPy_PyBrightStart(int __pyx_skip_dispatch) {
  PyObject *__pyx_v_bd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("PyBrightStart");
  __pyx_v_bd = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":39
 * # Specifiy the BRIGHT_DATA directory
 * cpdef PyBrightStart():
 *     if "BRIGHT_DATA" not in os.environ:             # <<<<<<<<<<<<<<
 *         bd = os.path.split(bright_data.__file__)
 *         os.environ['BRIGHT_DATA'] = os.path.join(*(bd[0], ''))
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__environ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__Pyx_NegateNonNeg(PySequence_Contains(__pyx_t_2, ((PyObject *)__pyx_n_s__BRIGHT_DATA)))); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":40
 * cpdef PyBrightStart():
 *     if "BRIGHT_DATA" not in os.environ:
 *         bd = os.path.split(bright_data.__file__)             # <<<<<<<<<<<<<<
 *         os.environ['BRIGHT_DATA'] = os.path.join(*(bd[0], ''))
 * 
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__split); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__bright_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s____file__); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_bd);
    __pyx_v_bd = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":41
 *     if "BRIGHT_DATA" not in os.environ:
 *         bd = os.path.split(bright_data.__file__)
 *         os.environ['BRIGHT_DATA'] = os.path.join(*(bd[0], ''))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__join); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_bd, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
    PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_kp_s_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PySequence_Tuple(((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__environ); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (PyObject_SetItem(__pyx_t_4, ((PyObject *)__pyx_n_s__BRIGHT_DATA), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("BriPy.PyBrightStart");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_bd);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":38
 * 
 * # Specifiy the BRIGHT_DATA directory
 * cpdef PyBrightStart():             # <<<<<<<<<<<<<<
 *     if "BRIGHT_DATA" not in os.environ:
 *         bd = os.path.split(bright_data.__file__)
 */

static PyObject *__pyx_pf_5BriPy_PyBrightStart(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5BriPy_PyBrightStart(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyBrightStart");
  __pyx_self = __pyx_self;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5BriPy_PyBrightStart(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.PyBrightStart");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":45
 * 
 * # Expose the C-code start up routine
 * def BrightStart():             # <<<<<<<<<<<<<<
 *     cpp_bright.BrightStart()
 * 
 */

static PyObject *__pyx_pf_5BriPy_1BrightStart(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_5BriPy_1BrightStart = {__Pyx_NAMESTR("BrightStart"), (PyCFunction)__pyx_pf_5BriPy_1BrightStart, METH_NOARGS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_5BriPy_1BrightStart(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("BrightStart");
  __pyx_self = __pyx_self;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":46
 * # Expose the C-code start up routine
 * def BrightStart():
 *     cpp_bright.BrightStart()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  bright::BrightStart();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":63
 * 
 *     property BRIGHT_DATA:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef std.string value = cpp_bright.BRIGHT_DATA
 *             return value.c_str()
 */

static PyObject *__pyx_pf_5BriPy_12BrightConfig_11BRIGHT_DATA___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_12BrightConfig_11BRIGHT_DATA___get__(PyObject *__pyx_v_self) {
  std::string __pyx_v_value;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":64
 *     property BRIGHT_DATA:
 *         def __get__(self):
 *             cdef std.string value = cpp_bright.BRIGHT_DATA             # <<<<<<<<<<<<<<
 *             return value.c_str()
 * 
 */
  __pyx_v_value = bright::BRIGHT_DATA;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":65
 *         def __get__(self):
 *             cdef std.string value = cpp_bright.BRIGHT_DATA
 *             return value.c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char * value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_value.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.BrightConfig.BRIGHT_DATA.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":67
 *             return value.c_str()
 * 
 *         def __set__(self, char * value):             # <<<<<<<<<<<<<<
 *             cpp_bright.BRIGHT_DATA = std.string(value)
 * 
 */

static int __pyx_pf_5BriPy_12BrightConfig_11BRIGHT_DATA_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_12BrightConfig_11BRIGHT_DATA_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = PyBytes_AsString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.BrightConfig.BRIGHT_DATA.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":68
 * 
 *         def __set__(self, char * value):
 *             cpp_bright.BRIGHT_DATA = std.string(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  bright::BRIGHT_DATA = std::string(__pyx_v_value);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":74
 * 
 *     property isos2track:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.cpp_to_py_set_int(cpp_bright.isos2track)
 * 
 */

static PyObject *__pyx_pf_5BriPy_12BrightConfig_10isos2track___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_12BrightConfig_10isos2track___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":75
 *     property isos2track:
 *         def __get__(self):
 *             return conv.cpp_to_py_set_int(cpp_bright.isos2track)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_cpp_to_py_set_int(FCComps::isos2track)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.BrightConfig.isos2track.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":77
 *             return conv.cpp_to_py_set_int(cpp_bright.isos2track)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             s = set([isoname.mixed_2_zzaaam(v) for v in value])
 *             cpp_bright.isos2track = conv.py_to_cpp_set_int(s)
 */

static int __pyx_pf_5BriPy_12BrightConfig_10isos2track_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_12BrightConfig_10isos2track_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_s;
  PyObject *__pyx_v_v;
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__set__");
  __pyx_v_s = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_v = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":78
 * 
 *         def __set__(self, value):
 *             s = set([isoname.mixed_2_zzaaam(v) for v in value])             # <<<<<<<<<<<<<<
 *             cpp_bright.isos2track = conv.py_to_cpp_set_int(s)
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyList_CheckExact(__pyx_v_value) || PyTuple_CheckExact(__pyx_v_value)) {
    __pyx_t_2 = 0; __pyx_t_3 = __pyx_v_value; __Pyx_INCREF(__pyx_t_3);
  } else {
    __pyx_t_2 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  }
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_3))) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_3))) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else {
      __pyx_t_4 = PyIter_Next(__pyx_t_3);
      if (!__pyx_t_4) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_DECREF(__pyx_v_v);
    __pyx_v_v = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__isoname); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__mixed_2_zzaaam); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(__pyx_v_v);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_v);
    __Pyx_GIVEREF(__pyx_v_v);
    __pyx_t_6 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    if (unlikely(PyList_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PySet_Type))), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_v_s));
  __pyx_v_s = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":79
 *         def __set__(self, value):
 *             s = set([isoname.mixed_2_zzaaam(v) for v in value])
 *             cpp_bright.isos2track = conv.py_to_cpp_set_int(s)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  FCComps::isos2track = __pyx_f_13stlconverters_py_to_cpp_set_int(__pyx_v_s);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("BriPy.BrightConfig.isos2track.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_s);
  __Pyx_DECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":83
 * 
 *     property verbosity:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return cpp_bright.verbosity
 * 
 */

static PyObject *__pyx_pf_5BriPy_12BrightConfig_9verbosity___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_12BrightConfig_9verbosity___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":84
 *     property verbosity:
 *         def __get__(self):
 *             return cpp_bright.verbosity             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(FCComps::verbosity); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.BrightConfig.verbosity.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":86
 *             return cpp_bright.verbosity
 * 
 *         def __set__(self, int value):             # <<<<<<<<<<<<<<
 *             cpp_bright.verbosity = value
 * 
 */

static int __pyx_pf_5BriPy_12BrightConfig_9verbosity_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_12BrightConfig_9verbosity_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_AsInt(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.BrightConfig.verbosity.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":87
 * 
 *         def __set__(self, int value):
 *             cpp_bright.verbosity = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  FCComps::verbosity = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":91
 * 
 *     property write_hdf5:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return cpp_bright.write_hdf5
 * 
 */

static PyObject *__pyx_pf_5BriPy_12BrightConfig_10write_hdf5___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_12BrightConfig_10write_hdf5___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":92
 *     property write_hdf5:
 *         def __get__(self):
 *             return cpp_bright.write_hdf5             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, bint value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(FCComps::write_hdf5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.BrightConfig.write_hdf5.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":94
 *             return cpp_bright.write_hdf5
 * 
 *         def __set__(self, bint value):             # <<<<<<<<<<<<<<
 *             cpp_bright.write_hdf5 = value
 * 
 */

static int __pyx_pf_5BriPy_12BrightConfig_10write_hdf5_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_12BrightConfig_10write_hdf5_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.BrightConfig.write_hdf5.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":95
 * 
 *         def __set__(self, bint value):
 *             cpp_bright.write_hdf5 = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  FCComps::write_hdf5 = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":99
 * 
 *     property write_text:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return cpp_bright.write_text
 * 
 */

static PyObject *__pyx_pf_5BriPy_12BrightConfig_10write_text___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_12BrightConfig_10write_text___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":100
 *     property write_text:
 *         def __get__(self):
 *             return cpp_bright.write_text             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, bint value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(FCComps::write_text); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.BrightConfig.write_text.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":102
 *             return cpp_bright.write_text
 * 
 *         def __set__(self, bint value):             # <<<<<<<<<<<<<<
 *             cpp_bright.write_text = value
 * 
 */

static int __pyx_pf_5BriPy_12BrightConfig_10write_text_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_12BrightConfig_10write_text_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.BrightConfig.write_text.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":103
 * 
 *         def __set__(self, bint value):
 *             cpp_bright.write_text = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  FCComps::write_text = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":107
 * 
 *     property output_filename:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef std.string value = cpp_bright.output_filename
 *             return value.c_str()
 */

static PyObject *__pyx_pf_5BriPy_12BrightConfig_15output_filename___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_12BrightConfig_15output_filename___get__(PyObject *__pyx_v_self) {
  std::string __pyx_v_value;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":108
 *     property output_filename:
 *         def __get__(self):
 *             cdef std.string value = cpp_bright.output_filename             # <<<<<<<<<<<<<<
 *             return value.c_str()
 * 
 */
  __pyx_v_value = FCComps::output_filename;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":109
 *         def __get__(self):
 *             cdef std.string value = cpp_bright.output_filename
 *             return value.c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char * value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_value.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.BrightConfig.output_filename.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":111
 *             return value.c_str()
 * 
 *         def __set__(self, char * value):             # <<<<<<<<<<<<<<
 *             cpp_bright.output_filename = std.string(value)
 * 
 */

static int __pyx_pf_5BriPy_12BrightConfig_15output_filename_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_12BrightConfig_15output_filename_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = PyBytes_AsString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.BrightConfig.output_filename.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":112
 * 
 *         def __set__(self, char * value):
 *             cpp_bright.output_filename = std.string(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  FCComps::output_filename = std::string(__pyx_v_value);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":120
 * 
 * # Load isos2track from file functions
 * def load_isos2track_hdf5(char * filename, char * datasetname="", bint clear=False):             # <<<<<<<<<<<<<<
 *     """This convience function tries to load the isos2track set from a dataset
 *     in an HDF5 file.  The dataset *must* be of integer type.  String-based
 */

static PyObject *__pyx_pf_5BriPy_2load_isos2track_hdf5(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5BriPy_2load_isos2track_hdf5[] = "This convience function tries to load the isos2track set from a dataset \n    in an HDF5 file.  The dataset *must* be of integer type.  String-based\n    nuclide names are currently not supported. \n\n    Args:\n        * filename (str): Path to the data library.\n        * dataset (str):  Dataset name to grab nuclides from.\n        * clear (bool):   Flag that if set removes the currrent entries\n          from isos2track prior to loading in new values.\n\n    If the dataset argument is not provided or empty, the function tries to \n    load from various default datasets in the following order::\n\n        \"/isos2track\"  \n        \"/Isos2Track\"\n        \"/isostrack\"   \n        \"/IsosTrack\"\n        \"/isotrack\"   \n        \"/IsoTrack\"    \n        \"/ToIso\"\n        \"/ToIsos\"\n        \"/ToIso_zz\"\n        \"/ToIso_MCNP\"\n        \"/FromIso\"  \n        \"/FromIsos\"  \n        \"/FromIso_zz\" \n        \"/FromIso_MCNP\"\n    ";
static PyMethodDef __pyx_mdef_5BriPy_2load_isos2track_hdf5 = {__Pyx_NAMESTR("load_isos2track_hdf5"), (PyCFunction)__pyx_pf_5BriPy_2load_isos2track_hdf5, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5BriPy_2load_isos2track_hdf5)};
static PyObject *__pyx_pf_5BriPy_2load_isos2track_hdf5(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  char *__pyx_v_datasetname;
  int __pyx_v_clear;
  PyObject *__pyx_r = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__datasetname,&__pyx_n_s__clear,0};
  __Pyx_RefNannySetupContext("load_isos2track_hdf5");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__datasetname);
        if (value) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__clear);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "load_isos2track_hdf5") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_datasetname = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_datasetname) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_datasetname = ((char *)__pyx_k_1);
    }
    if (values[2]) {
      __pyx_v_clear = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_clear == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_clear = ((int)0);
    }
  } else {
    __pyx_v_datasetname = ((char *)__pyx_k_1);
    __pyx_v_clear = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_clear = __Pyx_PyObject_IsTrue(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_clear == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_datasetname = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_datasetname) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_filename = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load_isos2track_hdf5", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.load_isos2track_hdf5");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":149
 *         "/FromIso_MCNP"
 *     """
 *     cpp_bright.load_isos2track_hdf5(std.string(filename), std.string(datasetname), clear)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  FCComps::load_isos2track_hdf5(std::string(__pyx_v_filename), std::string(__pyx_v_datasetname), __pyx_v_clear);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":152
 * 
 * 
 * def load_isos2track_text(char * filename, bint clear=False):             # <<<<<<<<<<<<<<
 *     """This convience function tries to load the isos2track set from a text
 *     file.  The nuclide names may use any naming convention.  Mixing different
 */

static PyObject *__pyx_pf_5BriPy_3load_isos2track_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5BriPy_3load_isos2track_text[] = "This convience function tries to load the isos2track set from a text\n    file.  The nuclide names may use any naming convention.  Mixing different\n    conventions in the same file is allowed.  Whitespace is required between\n    isotopic names.\n\n    Args:\n        * filename (str): Path to the data library.\n        * clear (bool):   Flag that if set removes the currrent entries\n          from isos2track prior to loading in new values.\n    ";
static PyMethodDef __pyx_mdef_5BriPy_3load_isos2track_text = {__Pyx_NAMESTR("load_isos2track_text"), (PyCFunction)__pyx_pf_5BriPy_3load_isos2track_text, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5BriPy_3load_isos2track_text)};
static PyObject *__pyx_pf_5BriPy_3load_isos2track_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  int __pyx_v_clear;
  PyObject *__pyx_r = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__clear,0};
  __Pyx_RefNannySetupContext("load_isos2track_text");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__clear);
        if (value) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "load_isos2track_text") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_clear = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_clear == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_clear = ((int)0);
    }
  } else {
    __pyx_v_clear = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_clear = __Pyx_PyObject_IsTrue(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_clear == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_filename = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load_isos2track_text", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.load_isos2track_text");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":163
 *           from isos2track prior to loading in new values.
 *     """
 *     cpp_bright.load_isos2track_text(std.string(filename), clear)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  FCComps::load_isos2track_text(std::string(__pyx_v_filename), __pyx_v_clear);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":183
 *     cdef cpp_bright.FCComp * fccomp_pointer
 * 
 *     def __cinit__(self, params=None, char * name="", *args, **kwargs):             # <<<<<<<<<<<<<<
 * #    def __init__(self, params=None, char * name="", *args, **kwargs):
 *         cdef cpp_set[std.string] param_set
 */

static int __pyx_pf_5BriPy_6FCComp___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5BriPy_6FCComp___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_params = 0;
  char *__pyx_v_name;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  std::set<std::string> __pyx_v_param_set;
  int __pyx_r;
  int __pyx_t_1;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__params,&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("__cinit__");
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args)); __Pyx_GOTREF(__pyx_v_args);

    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs);
      return -1;
    }
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      default:
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__params);
        if (value) { values[0] = value; kw_args--; }
      }
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (value) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      const Py_ssize_t used_pos_args = (PyTuple_GET_SIZE(__pyx_args) < 2) ? PyTuple_GET_SIZE(__pyx_args) : 2;
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_params = values[0];
    if (values[1]) {
      __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_name = ((char *)__pyx_k_1);
    }
  } else {
    __pyx_v_params = ((PyObject *)Py_None);
    __pyx_v_name = ((char *)__pyx_k_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      default:
      case  2: __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_params = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_AddTraceback("BriPy.FCComp.__cinit__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":187
 *         cdef cpp_set[std.string] param_set
 * 
 *         if params is None:             # <<<<<<<<<<<<<<
 *             self.fccomp_pointer = new cpp_bright.FCComp(std.string(name))
 *         else:
 */
  __pyx_t_1 = (__pyx_v_params == Py_None);
  if (__pyx_t_1) {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":188
 * 
 *         if params is None:
 *             self.fccomp_pointer = new cpp_bright.FCComp(std.string(name))             # <<<<<<<<<<<<<<
 *         else:
 *             param_set = conv.py_to_cpp_set_str(params)
 */
    ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer = new FCComp(std::string(__pyx_v_name));
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":190
 *             self.fccomp_pointer = new cpp_bright.FCComp(std.string(name))
 *         else:
 *             param_set = conv.py_to_cpp_set_str(params)             # <<<<<<<<<<<<<<
 *             self.fccomp_pointer = new cpp_bright.FCComp(param_set, std.string(name))
 * 
 */
    if (!(likely(PySet_CheckExact(__pyx_v_params))||((__pyx_v_params) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected set, got %.200s", Py_TYPE(__pyx_v_params)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_param_set = __pyx_f_13stlconverters_py_to_cpp_set_str(((PyObject*)__pyx_v_params));

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":191
 *         else:
 *             param_set = conv.py_to_cpp_set_str(params)
 *             self.fccomp_pointer = new cpp_bright.FCComp(param_set, std.string(name))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer = new FCComp(__pyx_v_param_set, std::string(__pyx_v_name));
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.FCComp.__cinit__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":194
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.fccomp_pointer
 * 
 */

static void __pyx_pf_5BriPy_6FCComp_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_5BriPy_6FCComp_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":195
 * 
 *     def __dealloc__(self):
 *         del self.fccomp_pointer             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer;

  __Pyx_RefNannyFinishContext();
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":203
 * 
 *     property name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef std.string n = self.fccomp_pointer.name
 *             return n.c_str()
 */

static PyObject *__pyx_pf_5BriPy_6FCComp_4name___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_6FCComp_4name___get__(PyObject *__pyx_v_self) {
  std::string __pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":204
 *     property name:
 *         def __get__(self):
 *             cdef std.string n = self.fccomp_pointer.name             # <<<<<<<<<<<<<<
 *             return n.c_str()
 * 
 */
  __pyx_v_n = ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->name;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":205
 *         def __get__(self):
 *             cdef std.string n = self.fccomp_pointer.name
 *             return n.c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char * n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_n.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.FCComp.name.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":207
 *             return n.c_str()
 * 
 *         def __set__(self, char * n):             # <<<<<<<<<<<<<<
 *             self.fccomp_pointer.name = std.string(n)
 * 
 */

static int __pyx_pf_5BriPy_6FCComp_4name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static int __pyx_pf_5BriPy_6FCComp_4name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  char *__pyx_v_n;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_n); {
    __pyx_v_n = PyBytes_AsString(__pyx_arg_n); if (unlikely((!__pyx_v_n) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.FCComp.name.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":208
 * 
 *         def __set__(self, char * n):
 *             self.fccomp_pointer.name = std.string(n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->name = std::string(__pyx_v_n);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":212
 * 
 *     property natural_name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef std.string n = self.fccomp_pointer.natural_name
 *             return n.c_str()
 */

static PyObject *__pyx_pf_5BriPy_6FCComp_12natural_name___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_6FCComp_12natural_name___get__(PyObject *__pyx_v_self) {
  std::string __pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":213
 *     property natural_name:
 *         def __get__(self):
 *             cdef std.string n = self.fccomp_pointer.natural_name             # <<<<<<<<<<<<<<
 *             return n.c_str()
 * 
 */
  __pyx_v_n = ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->natural_name;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":214
 *         def __get__(self):
 *             cdef std.string n = self.fccomp_pointer.natural_name
 *             return n.c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char * n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_n.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.FCComp.natural_name.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":216
 *             return n.c_str()
 * 
 *         def __set__(self, char * n):             # <<<<<<<<<<<<<<
 *             self.fccomp_pointer.natural_name = std.string(n)
 * 
 */

static int __pyx_pf_5BriPy_6FCComp_12natural_name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static int __pyx_pf_5BriPy_6FCComp_12natural_name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  char *__pyx_v_n;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_n); {
    __pyx_v_n = PyBytes_AsString(__pyx_arg_n); if (unlikely((!__pyx_v_n) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.FCComp.natural_name.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":217
 * 
 *         def __set__(self, char * n):
 *             self.fccomp_pointer.natural_name = std.string(n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->natural_name = std::string(__pyx_v_n);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":221
 * 
 *     property IsosIn:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.fccomp_pointer.IsosIn
 */

static PyObject *__pyx_pf_5BriPy_6FCComp_6IsosIn___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_6FCComp_6IsosIn___get__(PyObject *__pyx_v_self) {
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":222
 *     property IsosIn:
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()             # <<<<<<<<<<<<<<
 *             py_ms.ms_pointer[0] = self.fccomp_pointer.IsosIn
 *             return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":223
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.fccomp_pointer.IsosIn             # <<<<<<<<<<<<<<
 *             return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->IsosIn;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":224
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.fccomp_pointer.IsosIn
 *             return py_ms             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.FCComp.IsosIn.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":226
 *             return py_ms
 * 
 *         def __set__(self, mass_stream.MassStream ms):             # <<<<<<<<<<<<<<
 *             self.fccomp_pointer.IsosIn = <cpp_mass_stream.MassStream> ms.ms_pointer[0]
 * 
 */

static int __pyx_pf_5BriPy_6FCComp_6IsosIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms); /*proto*/
static int __pyx_pf_5BriPy_6FCComp_6IsosIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ms), __pyx_ptype_11mass_stream_MassStream, 1, "ms", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":227
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 *             self.fccomp_pointer.IsosIn = <cpp_mass_stream.MassStream> ms.ms_pointer[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->IsosIn = (((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_ms)->ms_pointer[0]);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.FCComp.IsosIn.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":231
 * 
 *     property IsosOut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.fccomp_pointer.IsosOut
 */

static PyObject *__pyx_pf_5BriPy_6FCComp_7IsosOut___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_6FCComp_7IsosOut___get__(PyObject *__pyx_v_self) {
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":232
 *     property IsosOut:
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()             # <<<<<<<<<<<<<<
 *             py_ms.ms_pointer[0] = self.fccomp_pointer.IsosOut
 *             return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":233
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.fccomp_pointer.IsosOut             # <<<<<<<<<<<<<<
 *             return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->IsosOut;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":234
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.fccomp_pointer.IsosOut
 *             return py_ms             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.FCComp.IsosOut.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":236
 *             return py_ms
 * 
 *         def __set__(self, mass_stream.MassStream ms):             # <<<<<<<<<<<<<<
 *             self.fccomp_pointer.IsosOut = <cpp_mass_stream.MassStream> ms.ms_pointer[0]
 * 
 */

static int __pyx_pf_5BriPy_6FCComp_7IsosOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms); /*proto*/
static int __pyx_pf_5BriPy_6FCComp_7IsosOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ms), __pyx_ptype_11mass_stream_MassStream, 1, "ms", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":237
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 *             self.fccomp_pointer.IsosOut = <cpp_mass_stream.MassStream> ms.ms_pointer[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->IsosOut = (((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_ms)->ms_pointer[0]);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.FCComp.IsosOut.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":241
 * 
 *     property ParamsIn:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.map_to_dict_str_dbl(self.fccomp_pointer.ParamsIn)
 * 
 */

static PyObject *__pyx_pf_5BriPy_6FCComp_8ParamsIn___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_6FCComp_8ParamsIn___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":242
 *     property ParamsIn:
 *         def __get__(self):
 *             return conv.map_to_dict_str_dbl(self.fccomp_pointer.ParamsIn)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict pi):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_str_dbl(((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->ParamsIn)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.FCComp.ParamsIn.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":244
 *             return conv.map_to_dict_str_dbl(self.fccomp_pointer.ParamsIn)
 * 
 *         def __set__(self, dict pi):             # <<<<<<<<<<<<<<
 *             self.fccomp_pointer.ParamsIn = conv.dict_to_map_str_dbl(pi)
 * 
 */

static int __pyx_pf_5BriPy_6FCComp_8ParamsIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_pi); /*proto*/
static int __pyx_pf_5BriPy_6FCComp_8ParamsIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_pi) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pi), (&PyDict_Type), 1, "pi", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":245
 * 
 *         def __set__(self, dict pi):
 *             self.fccomp_pointer.ParamsIn = conv.dict_to_map_str_dbl(pi)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->ParamsIn = __pyx_f_13stlconverters_dict_to_map_str_dbl(__pyx_v_pi);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.FCComp.ParamsIn.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":249
 * 
 *     property ParamsOut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.map_to_dict_str_dbl(self.fccomp_pointer.ParamsOut)
 * 
 */

static PyObject *__pyx_pf_5BriPy_6FCComp_9ParamsOut___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_6FCComp_9ParamsOut___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":250
 *     property ParamsOut:
 *         def __get__(self):
 *             return conv.map_to_dict_str_dbl(self.fccomp_pointer.ParamsOut)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict po):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_str_dbl(((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->ParamsOut)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.FCComp.ParamsOut.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":252
 *             return conv.map_to_dict_str_dbl(self.fccomp_pointer.ParamsOut)
 * 
 *         def __set__(self, dict po):             # <<<<<<<<<<<<<<
 *             self.fccomp_pointer.ParamsOut = conv.dict_to_map_str_dbl(po)
 * 
 */

static int __pyx_pf_5BriPy_6FCComp_9ParamsOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_po); /*proto*/
static int __pyx_pf_5BriPy_6FCComp_9ParamsOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_po) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_po), (&PyDict_Type), 1, "po", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":253
 * 
 *         def __set__(self, dict po):
 *             self.fccomp_pointer.ParamsOut = conv.dict_to_map_str_dbl(po)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->ParamsOut = __pyx_f_13stlconverters_dict_to_map_str_dbl(__pyx_v_po);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.FCComp.ParamsOut.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":257
 * 
 *     property PassNum:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.fccomp_pointer.PassNum
 * 
 */

static PyObject *__pyx_pf_5BriPy_6FCComp_7PassNum___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_6FCComp_7PassNum___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":258
 *     property PassNum:
 *         def __get__(self):
 *             return self.fccomp_pointer.PassNum             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int pn):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->PassNum); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.FCComp.PassNum.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":260
 *             return self.fccomp_pointer.PassNum
 * 
 *         def __set__(self, int pn):             # <<<<<<<<<<<<<<
 *             self.fccomp_pointer.PassNum = pn
 * 
 */

static int __pyx_pf_5BriPy_6FCComp_7PassNum_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_pn); /*proto*/
static int __pyx_pf_5BriPy_6FCComp_7PassNum_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_pn) {
  int __pyx_v_pn;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_pn); {
    __pyx_v_pn = __Pyx_PyInt_AsInt(__pyx_arg_pn); if (unlikely((__pyx_v_pn == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.FCComp.PassNum.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":261
 * 
 *         def __set__(self, int pn):
 *             self.fccomp_pointer.PassNum = pn             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->PassNum = __pyx_v_pn;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":265
 * 
 *     property params2track:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.cpp_to_py_set_str(self.fccomp_pointer.params2track)
 * 
 */

static PyObject *__pyx_pf_5BriPy_6FCComp_12params2track___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_6FCComp_12params2track___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":266
 *     property params2track:
 *         def __get__(self):
 *             return conv.cpp_to_py_set_str(self.fccomp_pointer.params2track)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, set p2t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_cpp_to_py_set_str(((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->params2track)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.FCComp.params2track.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":268
 *             return conv.cpp_to_py_set_str(self.fccomp_pointer.params2track)
 * 
 *         def __set__(self, set p2t):             # <<<<<<<<<<<<<<
 *             self.fccomp_pointer.params2track = conv.py_to_cpp_set_str(p2t)
 * 
 */

static int __pyx_pf_5BriPy_6FCComp_12params2track_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_p2t); /*proto*/
static int __pyx_pf_5BriPy_6FCComp_12params2track_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_p2t) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p2t), (&PySet_Type), 1, "p2t", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":269
 * 
 *         def __set__(self, set p2t):
 *             self.fccomp_pointer.params2track = conv.py_to_cpp_set_str(p2t)             # <<<<<<<<<<<<<<
 * 
 *     #
 */
  ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->params2track = __pyx_f_13stlconverters_py_to_cpp_set_str(__pyx_v_p2t);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.FCComp.params2track.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":275
 *     #
 * 
 *     def writeIsoPass(self):             # <<<<<<<<<<<<<<
 *         """This method is responsible for adding a new pass to the output text file
 *         "{FCComp.name}Isos.txt" for this component.  Further calculations should
 */

static PyObject *__pyx_pf_5BriPy_6FCComp_2writeIsoPass(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5BriPy_6FCComp_2writeIsoPass[] = "This method is responsible for adding a new pass to the output text file \n        \"{FCComp.name}Isos.txt\" for this component.  Further calculations should\n        not be performed after :meth:`writeIsoPass` has been called.\n\n        This function has one very important subtlety: it does not write out mass streams data.\n        Rather, input columns are given as normalized isotopic vectors.\n        As weight fractions, input columns are in units of [kgInIso/kgIsosIn.mass].\n        Moreover, the output columns are given in terms relative to the mass of the input mass, \n        [kgOutIso/kgIsosIn.mass].  These are calculated via the following expressions.\n\n        .. math::\n\n            \\mbox{inpcol[iso]} = \\mbox{IsosIn.comp[iso]}\n\n            \\mbox{outcol[iso]} = \\mbox{IsosOut.comp[iso]} \times \014rac{\\mbox{IsosOut.mass}}{\\mbox{IsosIn.mass}}\n\n        Because of the units of these two columns, total mass flow data may often only be recovered via the \n        a \"Mass\" parameter in the \"{FCComp.name}Params.txt\" file.  Here is a sample LWRIsos.txt file for a\n        light water reactor for the first pass::\n\n            Isotope 1in             1out    \n            H1      0.000000E+00    0.000000E+00\n            H3      0.000000E+00    8.568522E-08\n            HE4     0.000000E+00    4.421615E-07\n            B10     0.000000E+00    0.000000E+00\n            B11     0.000000E+00    0.000000E+00\n            C14     0.000000E+00    4.015091E-11\n            O16     0.000000E+00    0.000000E+00\n            SR90    0.000000E+00    8.221283E-04\n            TC99    0.000000E+00    1.112580E-03\n            CS137   0.000000E+00    1.821226E-03\n            U234    0.000000E+00    2.807466E-06\n            U235    4.773292E-02    8.951725E-03\n            U236    0.000000E+00    6.155297E-03\n            U237    0.000000E+00    1.719458E-05\n            U238    9.522671E-01    9.211956E-01\n            U239    0.000000E+00    6.953862E-07""\n            NP237   0.000000E+00    8.057270E-04\n            PU238   0.000000E+00    2.842232E-04\n            PU239   0.000000E+00    5.353362E-03\n            PU240   0.000000E+00    2.114728E-03\n\n        ";
static PyObject *__pyx_pf_5BriPy_6FCComp_2writeIsoPass(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("writeIsoPass");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":319
 * 
 *         """
 *         self.fccomp_pointer.writeIsoPass()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->writeIsoPass();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":322
 * 
 * 
 *     def writeParamPass(self):             # <<<<<<<<<<<<<<
 *         """What writeIsoPass() does for a component's input and output isotopics,
 *         this function does for the components parameters.  To ensure that meaningful
 */

static PyObject *__pyx_pf_5BriPy_6FCComp_3writeParamPass(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5BriPy_6FCComp_3writeParamPass[] = "What writeIsoPass() does for a component's input and output isotopics, \n        this function does for the components parameters.  To ensure that meaningful \n        data is available, writeParamPass() first must have setParams()\n        called elsewhere in the program.  Note that to get the pass numbering correct, \n        PassNum should always be incremented prior to this method.  The \n        following is an example of \"{FCComp.name}Params.txt\" for a light water \n        reactor spent fuel reprocessing facility::\n\n            Param   1in             1out    \n            Mass    9.985828E-01    9.975915E-01\n\n        ";
static PyObject *__pyx_pf_5BriPy_6FCComp_3writeParamPass(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("writeParamPass");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":335
 * 
 *         """
 *         self.fccomp_pointer.writeParamPass()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->writeParamPass();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":338
 * 
 * 
 *     def writeText(self):             # <<<<<<<<<<<<<<
 *         """This method calls writeIsoPass() and then, if available, calls
 *         writeParamPass().  This is convience function for producing
 */

static PyObject *__pyx_pf_5BriPy_6FCComp_4writeText(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5BriPy_6FCComp_4writeText[] = "This method calls writeIsoPass() and then, if available, calls \n        writeParamPass().  This is convience function for producing \n        text-based output.  However, using writeout() is recommended.\n        ";
static PyObject *__pyx_pf_5BriPy_6FCComp_4writeText(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("writeText");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":343
 *         text-based output.  However, using writeout() is recommended.
 *         """
 *         self.fccomp_pointer.writeText()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->writeText();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":346
 * 
 * 
 *     def writeHDF5(self):             # <<<<<<<<<<<<<<
 *         """This method writes out the isotopic pass data to an HDF5 file.
 *         Then, if available, it also writes parameter data as well.
 */

static PyObject *__pyx_pf_5BriPy_6FCComp_5writeHDF5(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5BriPy_6FCComp_5writeHDF5[] = "This method writes out the isotopic pass data to an HDF5 file. \n        Then, if available, it also writes parameter data as well.  \n        Using writeout() instead is recommended.\n        ";
static PyObject *__pyx_pf_5BriPy_6FCComp_5writeHDF5(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("writeHDF5");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":351
 *         Using writeout() instead is recommended.
 *         """
 *         self.fccomp_pointer.writeHDF5()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->writeHDF5();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":354
 * 
 * 
 *     def writeout(self):             # <<<<<<<<<<<<<<
 *         """This is a convenience function that first increments up PassNum.
 *         Then, it checks to see if there are any parameters for this component.
 */

static PyObject *__pyx_pf_5BriPy_6FCComp_6writeout(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5BriPy_6FCComp_6writeout[] = "This is a convenience function that first increments up PassNum.\n        Then, it checks to see if there are any parameters for this component.\n        If there are, it sets the current values using :meth:`setParams`.\n\n        If BriPy.write_hdf5 is set, then writeHDF5() is called.\n\n        If BriPy.write_text is set, then writeText() is called.\n\n        This is what is most often used to write Bright output.  Therefore it is\n        seen as the last step for every component in each pass.\n        ";
static PyObject *__pyx_pf_5BriPy_6FCComp_6writeout(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("writeout");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":366
 *         seen as the last step for every component in each pass.
 *         """
 *         self.fccomp_pointer.writeout()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->writeout();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":371
 *     # Virtual methods
 * 
 *     def setParams(self):             # <<<<<<<<<<<<<<
 *         """By calling this method, all parameter values are calculated and set for the fuel cycle component.
 *         This should be done following a doCalc() calculation but before data is written out.
 */

static PyObject *__pyx_pf_5BriPy_6FCComp_7setParams(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5BriPy_6FCComp_7setParams[] = "By calling this method, all parameter values are calculated and set for the fuel cycle component.\n        This should be done following a doCalc() calculation but before data is written out.\n        If a component has important parameters associated with it, this function must be overridden and called.\n\n        Note that this is called first thing when writeParamPass() is called.  For example, reprocessing only \n        has a \"Mass\" parameter.  Translated into Python, setParams() here looks like the following::\n\n            def setParams(self):\n                self.ParamsIn[\"Mass\"]  = self.IsosIn.mass\n                self.ParamsOut[\"Mass\"] = self.IsosOut.mass\n                return\n        ";
static PyObject *__pyx_pf_5BriPy_6FCComp_7setParams(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("setParams");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":384
 *                 return
 *         """
 *         self.fccomp_pointer.setParams()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->setParams();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":387
 * 
 * 
 *     def doCalc(self):             # <<<<<<<<<<<<<<
 *         """This method is used to determine a component's output isotopics from its input isotopics.
 *         Therefore, this is typically where the bulk of a fuel cycle component's algorithm lies.
 */

static PyObject *__pyx_pf_5BriPy_6FCComp_8doCalc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5BriPy_6FCComp_8doCalc[] = "This method is used to determine a component's output isotopics from its input isotopics.\n        Therefore, this is typically where the bulk of a fuel cycle component's algorithm lies.\n        As each component type has a distinct methodology, the doCalc() method  needs \n        to be overridden child classes.\n\n        This method should return IsosOut so that component calculations may be easily \n        daisy-chained together.\n\n        Args:\n            * input (dict or MassStream): If input is present, it set as the component's \n              IsosIn.  If input is a isotopic dictionary (zzaaam keys, float values), this\n              dictionary is first converted into a MassStream before being set as IsosIn.\n\n        Returns:\n            * output (MassStream): IsosOut.\n\n        ";
static PyObject *__pyx_pf_5BriPy_6FCComp_8doCalc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("doCalc");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":405
 * 
 *         """
 *         cdef mass_stream.MassStream py_ms = mass_stream.MassStream()             # <<<<<<<<<<<<<<
 *         py_ms.ms_pointer[0] = self.fccomp_pointer.doCalc()
 *         return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":406
 *         """
 *         cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *         py_ms.ms_pointer[0] = self.fccomp_pointer.doCalc()             # <<<<<<<<<<<<<<
 *         return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_FCComp *)__pyx_v_self)->fccomp_pointer->doCalc();

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":407
 *         cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *         py_ms.ms_pointer[0] = self.fccomp_pointer.doCalc()
 *         return py_ms             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.FCComp.doCalc");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":426
 *     cdef cpp_bright.EnrichmentParameters ep
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ep = cpp_bright.EnrichmentParameters()
 * 
 */

static int __pyx_pf_5BriPy_20EnrichmentParameters___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5BriPy_20EnrichmentParameters___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  struct EnrichmentParameters __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":427
 * 
 *     def __cinit__(self):
 *         self.ep = cpp_bright.EnrichmentParameters()             # <<<<<<<<<<<<<<
 * 
 *     #def __dealloc__(self):
 */
  ((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep = __pyx_t_1;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":438
 * 
 *     property alpha_0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ep.alpha_0
 * 
 */

static PyObject *__pyx_pf_5BriPy_20EnrichmentParameters_7alpha_0___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_20EnrichmentParameters_7alpha_0___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":439
 *     property alpha_0:
 *         def __get__(self):
 *             return self.ep.alpha_0             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep.alpha_0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.EnrichmentParameters.alpha_0.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":441
 *             return self.ep.alpha_0
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.ep.alpha_0 = <double> value
 * 
 */

static int __pyx_pf_5BriPy_20EnrichmentParameters_7alpha_0_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_20EnrichmentParameters_7alpha_0_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":442
 * 
 *         def __set__(self, value):
 *             self.ep.alpha_0 = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep.alpha_0 = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.EnrichmentParameters.alpha_0.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":446
 * 
 *     property Mstar_0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ep.Mstar_0
 * 
 */

static PyObject *__pyx_pf_5BriPy_20EnrichmentParameters_7Mstar_0___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_20EnrichmentParameters_7Mstar_0___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":447
 *     property Mstar_0:
 *         def __get__(self):
 *             return self.ep.Mstar_0             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep.Mstar_0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.EnrichmentParameters.Mstar_0.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":449
 *             return self.ep.Mstar_0
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.ep.Mstar_0 = <double> value
 * 
 */

static int __pyx_pf_5BriPy_20EnrichmentParameters_7Mstar_0_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_20EnrichmentParameters_7Mstar_0_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":450
 * 
 *         def __set__(self, value):
 *             self.ep.Mstar_0 = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep.Mstar_0 = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.EnrichmentParameters.Mstar_0.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":454
 * 
 *     property j:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ep.j
 * 
 */

static PyObject *__pyx_pf_5BriPy_20EnrichmentParameters_1j___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_20EnrichmentParameters_1j___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":455
 *     property j:
 *         def __get__(self):
 *             return self.ep.j             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep.j); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.EnrichmentParameters.j.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":457
 *             return self.ep.j
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.ep.j = <int> value
 * 
 */

static int __pyx_pf_5BriPy_20EnrichmentParameters_1j_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_20EnrichmentParameters_1j_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":458
 * 
 *         def __set__(self, value):
 *             self.ep.j = <int> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep.j = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.EnrichmentParameters.j.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":462
 * 
 *     property k:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ep.k
 * 
 */

static PyObject *__pyx_pf_5BriPy_20EnrichmentParameters_1k___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_20EnrichmentParameters_1k___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":463
 *     property k:
 *         def __get__(self):
 *             return self.ep.k             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep.k); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.EnrichmentParameters.k.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":465
 *             return self.ep.k
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.ep.k = <int> value
 * 
 */

static int __pyx_pf_5BriPy_20EnrichmentParameters_1k_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_20EnrichmentParameters_1k_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":466
 * 
 *         def __set__(self, value):
 *             self.ep.k = <int> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep.k = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.EnrichmentParameters.k.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":470
 * 
 *     property N0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ep.N0
 * 
 */

static PyObject *__pyx_pf_5BriPy_20EnrichmentParameters_2N0___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_20EnrichmentParameters_2N0___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":471
 *     property N0:
 *         def __get__(self):
 *             return self.ep.N0             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep.N0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.EnrichmentParameters.N0.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":473
 *             return self.ep.N0
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.ep.N0 = <double> value
 * 
 */

static int __pyx_pf_5BriPy_20EnrichmentParameters_2N0_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_20EnrichmentParameters_2N0_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":474
 * 
 *         def __set__(self, value):
 *             self.ep.N0 = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep.N0 = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.EnrichmentParameters.N0.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":478
 * 
 *     property M0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ep.M0
 * 
 */

static PyObject *__pyx_pf_5BriPy_20EnrichmentParameters_2M0___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_20EnrichmentParameters_2M0___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":479
 *     property M0:
 *         def __get__(self):
 *             return self.ep.M0             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep.M0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.EnrichmentParameters.M0.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":481
 *             return self.ep.M0
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.ep.M0 = <double> value
 * 
 */

static int __pyx_pf_5BriPy_20EnrichmentParameters_2M0_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_20EnrichmentParameters_2M0_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":482
 * 
 *         def __set__(self, value):
 *             self.ep.M0 = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep.M0 = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.EnrichmentParameters.M0.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":486
 * 
 *     property xP_j:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ep.xP_j
 * 
 */

static PyObject *__pyx_pf_5BriPy_20EnrichmentParameters_4xP_j___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_20EnrichmentParameters_4xP_j___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":487
 *     property xP_j:
 *         def __get__(self):
 *             return self.ep.xP_j             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep.xP_j); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.EnrichmentParameters.xP_j.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":489
 *             return self.ep.xP_j
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.ep.xP_j = <double> value
 * 
 */

static int __pyx_pf_5BriPy_20EnrichmentParameters_4xP_j_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_20EnrichmentParameters_4xP_j_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":490
 * 
 *         def __set__(self, value):
 *             self.ep.xP_j = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep.xP_j = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.EnrichmentParameters.xP_j.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":494
 * 
 *     property xW_j:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ep.xW_j
 * 
 */

static PyObject *__pyx_pf_5BriPy_20EnrichmentParameters_4xW_j___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_20EnrichmentParameters_4xW_j___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":495
 *     property xW_j:
 *         def __get__(self):
 *             return self.ep.xW_j             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep.xW_j); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.EnrichmentParameters.xW_j.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":497
 *             return self.ep.xW_j
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.ep.xW_j = <double> value
 * 
 */

static int __pyx_pf_5BriPy_20EnrichmentParameters_4xW_j_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_20EnrichmentParameters_4xW_j_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":498
 * 
 *         def __set__(self, value):
 *             self.ep.xW_j = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_self)->ep.xW_j = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.EnrichmentParameters.xW_j.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":502
 * 
 * 
 * def UraniumEnrichmentDefaults():             # <<<<<<<<<<<<<<
 *     cdef cpp_bright.EnrichmentParameters cpp_ued = cpp_bright.fillUraniumEnrichmentDefaults()
 *     cdef EnrichmentParameters ued = EnrichmentParameters()
 */

static PyObject *__pyx_pf_5BriPy_4UraniumEnrichmentDefaults(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_5BriPy_4UraniumEnrichmentDefaults = {__Pyx_NAMESTR("UraniumEnrichmentDefaults"), (PyCFunction)__pyx_pf_5BriPy_4UraniumEnrichmentDefaults, METH_NOARGS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_5BriPy_4UraniumEnrichmentDefaults(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  struct EnrichmentParameters __pyx_v_cpp_ued;
  struct __pyx_obj_5BriPy_EnrichmentParameters *__pyx_v_ued = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("UraniumEnrichmentDefaults");
  __pyx_self = __pyx_self;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":503
 * 
 * def UraniumEnrichmentDefaults():
 *     cdef cpp_bright.EnrichmentParameters cpp_ued = cpp_bright.fillUraniumEnrichmentDefaults()             # <<<<<<<<<<<<<<
 *     cdef EnrichmentParameters ued = EnrichmentParameters()
 *     ued.ep = cpp_ued
 */
  __pyx_v_cpp_ued = fillUraniumEnrichmentDefaults();

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":504
 * def UraniumEnrichmentDefaults():
 *     cdef cpp_bright.EnrichmentParameters cpp_ued = cpp_bright.fillUraniumEnrichmentDefaults()
 *     cdef EnrichmentParameters ued = EnrichmentParameters()             # <<<<<<<<<<<<<<
 *     ued.ep = cpp_ued
 *     return ued
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5BriPy_EnrichmentParameters)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ued = ((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":505
 *     cdef cpp_bright.EnrichmentParameters cpp_ued = cpp_bright.fillUraniumEnrichmentDefaults()
 *     cdef EnrichmentParameters ued = EnrichmentParameters()
 *     ued.ep = cpp_ued             # <<<<<<<<<<<<<<
 *     return ued
 * 
 */
  __pyx_v_ued->ep = __pyx_v_cpp_ued;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":506
 *     cdef EnrichmentParameters ued = EnrichmentParameters()
 *     ued.ep = cpp_ued
 *     return ued             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ued));
  __pyx_r = ((PyObject *)__pyx_v_ued);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.UraniumEnrichmentDefaults");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ued);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":525
 *     cdef cpp_bright.Enrichment * e_pointer
 * 
 *     def __cinit__(self, enrich_params=None, char * name=""):             # <<<<<<<<<<<<<<
 *         cdef EnrichmentParameters enr_par
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_enrich_params = 0;
  char *__pyx_v_name;
  struct __pyx_obj_5BriPy_EnrichmentParameters *__pyx_v_enr_par;
  int __pyx_r;
  int __pyx_t_1;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__enrich_params,&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__enrich_params);
        if (value) { values[0] = value; kw_args--; }
      }
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (value) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_enrich_params = values[0];
    if (values[1]) {
      __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_name = ((char *)__pyx_k_1);
    }
  } else {
    __pyx_v_enrich_params = ((PyObject *)Py_None);
    __pyx_v_name = ((char *)__pyx_k_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_enrich_params = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.__cinit__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_enr_par = ((struct __pyx_obj_5BriPy_EnrichmentParameters *)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":528
 *         cdef EnrichmentParameters enr_par
 * 
 *         if enrich_params is None:             # <<<<<<<<<<<<<<
 *             self.e_pointer = new cpp_bright.Enrichment(std.string(name))
 *         elif isinstance(enrich_params, EnrichmentParameters):
 */
  __pyx_t_1 = (__pyx_v_enrich_params == Py_None);
  if (__pyx_t_1) {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":529
 * 
 *         if enrich_params is None:
 *             self.e_pointer = new cpp_bright.Enrichment(std.string(name))             # <<<<<<<<<<<<<<
 *         elif isinstance(enrich_params, EnrichmentParameters):
 *             enr_par = enrich_params
 */
    ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer = new Enrichment(std::string(__pyx_v_name));
    goto __pyx_L6;
  }

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":530
 *         if enrich_params is None:
 *             self.e_pointer = new cpp_bright.Enrichment(std.string(name))
 *         elif isinstance(enrich_params, EnrichmentParameters):             # <<<<<<<<<<<<<<
 *             enr_par = enrich_params
 *             self.e_pointer = new cpp_bright.Enrichment(<cpp_bright.EnrichmentParameters> enr_par.ep, std.string(name))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_enrich_params, ((PyObject*)__pyx_ptype_5BriPy_EnrichmentParameters)); 
  if (__pyx_t_1) {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":531
 *             self.e_pointer = new cpp_bright.Enrichment(std.string(name))
 *         elif isinstance(enrich_params, EnrichmentParameters):
 *             enr_par = enrich_params             # <<<<<<<<<<<<<<
 *             self.e_pointer = new cpp_bright.Enrichment(<cpp_bright.EnrichmentParameters> enr_par.ep, std.string(name))
 * 
 */
    if (!(likely(((__pyx_v_enrich_params) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_enrich_params, __pyx_ptype_5BriPy_EnrichmentParameters))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_INCREF(__pyx_v_enrich_params);
    __Pyx_DECREF(((PyObject *)__pyx_v_enr_par));
    __pyx_v_enr_par = ((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_enrich_params);

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":532
 *         elif isinstance(enrich_params, EnrichmentParameters):
 *             enr_par = enrich_params
 *             self.e_pointer = new cpp_bright.Enrichment(<cpp_bright.EnrichmentParameters> enr_par.ep, std.string(name))             # <<<<<<<<<<<<<<
 * 
 *         # Set the base class pointer to this new instance
 */
    ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer = new Enrichment(__pyx_v_enr_par->ep, std::string(__pyx_v_name));
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.__cinit__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_enr_par);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":539
 *         #self.fccomp_pointer[0] = deref(self.e_pointer)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.e_pointer
 * 
 */

static void __pyx_pf_5BriPy_10Enrichment_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_5BriPy_10Enrichment_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":540
 * 
 *     def __dealloc__(self):
 *         del self.e_pointer             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer;

  __Pyx_RefNannyFinishContext();
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":550
 * 
 *     property alpha_0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e_pointer.alpha_0
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_7alpha_0___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_7alpha_0___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":551
 *     property alpha_0:
 *         def __get__(self):
 *             return self.e_pointer.alpha_0             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->alpha_0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.alpha_0.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":553
 *             return self.e_pointer.alpha_0
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.e_pointer.alpha_0 = <double> value
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_7alpha_0_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_7alpha_0_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":554
 * 
 *         def __set__(self, value):
 *             self.e_pointer.alpha_0 = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->alpha_0 = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.alpha_0.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":558
 * 
 *     property Mstar_0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e_pointer.Mstar_0
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_7Mstar_0___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_7Mstar_0___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":559
 *     property Mstar_0:
 *         def __get__(self):
 *             return self.e_pointer.Mstar_0             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->Mstar_0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.Mstar_0.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":561
 *             return self.e_pointer.Mstar_0
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.e_pointer.Mstar_0 = <double> value
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_7Mstar_0_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_7Mstar_0_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":562
 * 
 *         def __set__(self, value):
 *             self.e_pointer.Mstar_0 = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->Mstar_0 = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.Mstar_0.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":566
 * 
 *     property Mstar:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e_pointer.Mstar
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_5Mstar___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_5Mstar___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":567
 *     property Mstar:
 *         def __get__(self):
 *             return self.e_pointer.Mstar             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->Mstar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.Mstar.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":569
 *             return self.e_pointer.Mstar
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.e_pointer.Mstar = <double> value
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_5Mstar_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_5Mstar_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":570
 * 
 *         def __set__(self, value):
 *             self.e_pointer.Mstar = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->Mstar = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.Mstar.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":574
 * 
 *     property IsosTail:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.e_pointer.IsosTail
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_8IsosTail___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_8IsosTail___get__(PyObject *__pyx_v_self) {
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":575
 *     property IsosTail:
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()             # <<<<<<<<<<<<<<
 *             py_ms.ms_pointer[0] = self.e_pointer.IsosTail
 *             return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":576
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.e_pointer.IsosTail             # <<<<<<<<<<<<<<
 *             return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->IsosTail;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":577
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.e_pointer.IsosTail
 *             return py_ms             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.IsosTail.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":579
 *             return py_ms
 * 
 *         def __set__(self, mass_stream.MassStream ms):             # <<<<<<<<<<<<<<
 *             self.e_pointer.IsosTail = <cpp_mass_stream.MassStream> ms.ms_pointer[0]
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_8IsosTail_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_8IsosTail_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ms), __pyx_ptype_11mass_stream_MassStream, 1, "ms", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":580
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 *             self.e_pointer.IsosTail = <cpp_mass_stream.MassStream> ms.ms_pointer[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->IsosTail = (((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_ms)->ms_pointer[0]);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.IsosTail.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":584
 * 
 *     property j:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e_pointer.j
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_1j___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_1j___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":585
 *     property j:
 *         def __get__(self):
 *             return self.e_pointer.j             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->j); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.j.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":587
 *             return self.e_pointer.j
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.e_pointer.j = <int> value
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_1j_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_1j_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":588
 * 
 *         def __set__(self, value):
 *             self.e_pointer.j = <int> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->j = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.j.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":592
 * 
 *     property k:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e_pointer.k
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_1k___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_1k___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":593
 *     property k:
 *         def __get__(self):
 *             return self.e_pointer.k             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->k); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.k.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":595
 *             return self.e_pointer.k
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.e_pointer.k = <int> value
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_1k_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_1k_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":596
 * 
 *         def __set__(self, value):
 *             self.e_pointer.k = <int> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->k = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.k.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":600
 * 
 *     property xP_j:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e_pointer.xP_j
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_4xP_j___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_4xP_j___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":601
 *     property xP_j:
 *         def __get__(self):
 *             return self.e_pointer.xP_j             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->xP_j); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.xP_j.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":603
 *             return self.e_pointer.xP_j
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.e_pointer.xP_j = <double> value
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_4xP_j_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_4xP_j_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":604
 * 
 *         def __set__(self, value):
 *             self.e_pointer.xP_j = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->xP_j = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.xP_j.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":608
 * 
 *     property xW_j:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e_pointer.xW_j
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_4xW_j___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_4xW_j___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":609
 *     property xW_j:
 *         def __get__(self):
 *             return self.e_pointer.xW_j             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->xW_j); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.xW_j.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":611
 *             return self.e_pointer.xW_j
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.e_pointer.xW_j = <double> value
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_4xW_j_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_4xW_j_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":612
 * 
 *         def __set__(self, value):
 *             self.e_pointer.xW_j = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->xW_j = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.xW_j.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":616
 * 
 *     property N:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e_pointer.N
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_1N___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_1N___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":617
 *     property N:
 *         def __get__(self):
 *             return self.e_pointer.N             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->N); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.N.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":619
 *             return self.e_pointer.N
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.e_pointer.N = <double> value
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_1N_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_1N_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":620
 * 
 *         def __set__(self, value):
 *             self.e_pointer.N = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->N = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.N.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":624
 * 
 *     property M:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e_pointer.M
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_1M___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_1M___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":625
 *     property M:
 *         def __get__(self):
 *             return self.e_pointer.M             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->M); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.M.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":627
 *             return self.e_pointer.M
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.e_pointer.M = <double> value
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_1M_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_1M_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":628
 * 
 *         def __set__(self, value):
 *             self.e_pointer.M = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->M = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.M.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":632
 * 
 *     property N0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e_pointer.N0
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_2N0___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_2N0___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":633
 *     property N0:
 *         def __get__(self):
 *             return self.e_pointer.N0             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->N0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.N0.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":635
 *             return self.e_pointer.N0
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.e_pointer.N0 = <double> value
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_2N0_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_2N0_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":636
 * 
 *         def __set__(self, value):
 *             self.e_pointer.N0 = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->N0 = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.N0.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":640
 * 
 *     property M0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e_pointer.M0
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_2M0___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_2M0___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":641
 *     property M0:
 *         def __get__(self):
 *             return self.e_pointer.M0             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->M0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.M0.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":643
 *             return self.e_pointer.M0
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.e_pointer.M0 = <double> value
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_2M0_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_2M0_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":644
 * 
 *         def __set__(self, value):
 *             self.e_pointer.M0 = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->M0 = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.M0.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":648
 * 
 *     property TotalPerFeed:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e_pointer.TotalPerFeed
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_12TotalPerFeed___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_12TotalPerFeed___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":649
 *     property TotalPerFeed:
 *         def __get__(self):
 *             return self.e_pointer.TotalPerFeed             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->TotalPerFeed); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.TotalPerFeed.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":651
 *             return self.e_pointer.TotalPerFeed
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.e_pointer.TotalPerFeed = <double> value
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_12TotalPerFeed_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_12TotalPerFeed_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":652
 * 
 *         def __set__(self, value):
 *             self.e_pointer.TotalPerFeed = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->TotalPerFeed = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.TotalPerFeed.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":656
 * 
 *     property SWUperFeed:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e_pointer.SWUperFeed
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_10SWUperFeed___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_10SWUperFeed___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":657
 *     property SWUperFeed:
 *         def __get__(self):
 *             return self.e_pointer.SWUperFeed             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->SWUperFeed); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.SWUperFeed.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":659
 *             return self.e_pointer.SWUperFeed
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.e_pointer.SWUperFeed = <double> value
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_10SWUperFeed_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_10SWUperFeed_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":660
 * 
 *         def __set__(self, value):
 *             self.e_pointer.SWUperFeed = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->SWUperFeed = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.SWUperFeed.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":664
 * 
 *     property SWUperProduct:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e_pointer.SWUperProduct
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_13SWUperProduct___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_13SWUperProduct___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":665
 *     property SWUperProduct:
 *         def __get__(self):
 *             return self.e_pointer.SWUperProduct             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->SWUperProduct); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.SWUperProduct.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":667
 *             return self.e_pointer.SWUperProduct
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.e_pointer.SWUperProduct = <double> value
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_13SWUperProduct_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_13SWUperProduct_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":668
 * 
 *         def __set__(self, value):
 *             self.e_pointer.SWUperProduct = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->SWUperProduct = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.SWUperProduct.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":674
 * 
 *     property name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef std.string n = self.e_pointer.name
 *             return n.c_str()
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_4name___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_4name___get__(PyObject *__pyx_v_self) {
  std::string __pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":675
 *     property name:
 *         def __get__(self):
 *             cdef std.string n = self.e_pointer.name             # <<<<<<<<<<<<<<
 *             return n.c_str()
 * 
 */
  __pyx_v_n = ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->name;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":676
 *         def __get__(self):
 *             cdef std.string n = self.e_pointer.name
 *             return n.c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char * n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_n.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.name.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":678
 *             return n.c_str()
 * 
 *         def __set__(self, char * n):             # <<<<<<<<<<<<<<
 *             self.e_pointer.name = std.string(n)
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_4name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_4name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  char *__pyx_v_n;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_n); {
    __pyx_v_n = PyBytes_AsString(__pyx_arg_n); if (unlikely((!__pyx_v_n) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.name.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":679
 * 
 *         def __set__(self, char * n):
 *             self.e_pointer.name = std.string(n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->name = std::string(__pyx_v_n);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":683
 * 
 *     property natural_name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef std.string n = self.e_pointer.natural_name
 *             return n.c_str()
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_12natural_name___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_12natural_name___get__(PyObject *__pyx_v_self) {
  std::string __pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":684
 *     property natural_name:
 *         def __get__(self):
 *             cdef std.string n = self.e_pointer.natural_name             # <<<<<<<<<<<<<<
 *             return n.c_str()
 * 
 */
  __pyx_v_n = ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->natural_name;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":685
 *         def __get__(self):
 *             cdef std.string n = self.e_pointer.natural_name
 *             return n.c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char * n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_n.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.natural_name.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":687
 *             return n.c_str()
 * 
 *         def __set__(self, char * n):             # <<<<<<<<<<<<<<
 *             self.e_pointer.natural_name = std.string(n)
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_12natural_name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_12natural_name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  char *__pyx_v_n;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_n); {
    __pyx_v_n = PyBytes_AsString(__pyx_arg_n); if (unlikely((!__pyx_v_n) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.natural_name.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":688
 * 
 *         def __set__(self, char * n):
 *             self.e_pointer.natural_name = std.string(n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->natural_name = std::string(__pyx_v_n);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":692
 * 
 *     property IsosIn:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.e_pointer.IsosIn
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_6IsosIn___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_6IsosIn___get__(PyObject *__pyx_v_self) {
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":693
 *     property IsosIn:
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()             # <<<<<<<<<<<<<<
 *             py_ms.ms_pointer[0] = self.e_pointer.IsosIn
 *             return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":694
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.e_pointer.IsosIn             # <<<<<<<<<<<<<<
 *             return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->IsosIn;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":695
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.e_pointer.IsosIn
 *             return py_ms             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.IsosIn.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":697
 *             return py_ms
 * 
 *         def __set__(self, mass_stream.MassStream ms):             # <<<<<<<<<<<<<<
 *             self.e_pointer.IsosIn = <cpp_mass_stream.MassStream> ms.ms_pointer[0]
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_6IsosIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_6IsosIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ms), __pyx_ptype_11mass_stream_MassStream, 1, "ms", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":698
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 *             self.e_pointer.IsosIn = <cpp_mass_stream.MassStream> ms.ms_pointer[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->IsosIn = (((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_ms)->ms_pointer[0]);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.IsosIn.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":702
 * 
 *     property IsosOut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.e_pointer.IsosOut
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_7IsosOut___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_7IsosOut___get__(PyObject *__pyx_v_self) {
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":703
 *     property IsosOut:
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()             # <<<<<<<<<<<<<<
 *             py_ms.ms_pointer[0] = self.e_pointer.IsosOut
 *             return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":704
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.e_pointer.IsosOut             # <<<<<<<<<<<<<<
 *             return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->IsosOut;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":705
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.e_pointer.IsosOut
 *             return py_ms             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.IsosOut.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":707
 *             return py_ms
 * 
 *         def __set__(self, mass_stream.MassStream ms):             # <<<<<<<<<<<<<<
 *             self.e_pointer.IsosOut = <cpp_mass_stream.MassStream> ms.ms_pointer[0]
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_7IsosOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_7IsosOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ms), __pyx_ptype_11mass_stream_MassStream, 1, "ms", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":708
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 *             self.e_pointer.IsosOut = <cpp_mass_stream.MassStream> ms.ms_pointer[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->IsosOut = (((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_ms)->ms_pointer[0]);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.IsosOut.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":712
 * 
 *     property ParamsIn:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.map_to_dict_str_dbl(self.e_pointer.ParamsIn)
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_8ParamsIn___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_8ParamsIn___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":713
 *     property ParamsIn:
 *         def __get__(self):
 *             return conv.map_to_dict_str_dbl(self.e_pointer.ParamsIn)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict pi):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_str_dbl(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->ParamsIn)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.ParamsIn.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":715
 *             return conv.map_to_dict_str_dbl(self.e_pointer.ParamsIn)
 * 
 *         def __set__(self, dict pi):             # <<<<<<<<<<<<<<
 *             self.e_pointer.ParamsIn = conv.dict_to_map_str_dbl(pi)
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_8ParamsIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_pi); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_8ParamsIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_pi) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pi), (&PyDict_Type), 1, "pi", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":716
 * 
 *         def __set__(self, dict pi):
 *             self.e_pointer.ParamsIn = conv.dict_to_map_str_dbl(pi)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->ParamsIn = __pyx_f_13stlconverters_dict_to_map_str_dbl(__pyx_v_pi);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.ParamsIn.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":720
 * 
 *     property ParamsOut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.map_to_dict_str_dbl(self.e_pointer.ParamsOut)
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_9ParamsOut___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_9ParamsOut___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":721
 *     property ParamsOut:
 *         def __get__(self):
 *             return conv.map_to_dict_str_dbl(self.e_pointer.ParamsOut)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict po):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_str_dbl(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->ParamsOut)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.ParamsOut.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":723
 *             return conv.map_to_dict_str_dbl(self.e_pointer.ParamsOut)
 * 
 *         def __set__(self, dict po):             # <<<<<<<<<<<<<<
 *             self.e_pointer.ParamsOut = conv.dict_to_map_str_dbl(po)
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_9ParamsOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_po); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_9ParamsOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_po) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_po), (&PyDict_Type), 1, "po", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":724
 * 
 *         def __set__(self, dict po):
 *             self.e_pointer.ParamsOut = conv.dict_to_map_str_dbl(po)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->ParamsOut = __pyx_f_13stlconverters_dict_to_map_str_dbl(__pyx_v_po);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.ParamsOut.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":728
 * 
 *     property PassNum:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e_pointer.PassNum
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_7PassNum___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_7PassNum___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":729
 *     property PassNum:
 *         def __get__(self):
 *             return self.e_pointer.PassNum             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int pn):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->PassNum); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.PassNum.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":731
 *             return self.e_pointer.PassNum
 * 
 *         def __set__(self, int pn):             # <<<<<<<<<<<<<<
 *             self.e_pointer.PassNum = pn
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_7PassNum_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_pn); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_7PassNum_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_pn) {
  int __pyx_v_pn;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_pn); {
    __pyx_v_pn = __Pyx_PyInt_AsInt(__pyx_arg_pn); if (unlikely((__pyx_v_pn == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.PassNum.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":732
 * 
 *         def __set__(self, int pn):
 *             self.e_pointer.PassNum = pn             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->PassNum = __pyx_v_pn;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":736
 * 
 *     property params2track:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.cpp_to_py_set_str(self.e_pointer.params2track)
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_12params2track___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_10Enrichment_12params2track___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":737
 *     property params2track:
 *         def __get__(self):
 *             return conv.cpp_to_py_set_str(self.e_pointer.params2track)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, set p2t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_cpp_to_py_set_str(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->params2track)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.params2track.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":739
 *             return conv.cpp_to_py_set_str(self.e_pointer.params2track)
 * 
 *         def __set__(self, set p2t):             # <<<<<<<<<<<<<<
 *             self.e_pointer.params2track = conv.py_to_cpp_set_str(p2t)
 * 
 */

static int __pyx_pf_5BriPy_10Enrichment_12params2track_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_p2t); /*proto*/
static int __pyx_pf_5BriPy_10Enrichment_12params2track_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_p2t) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p2t), (&PySet_Type), 1, "p2t", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":740
 * 
 *         def __set__(self, set p2t):
 *             self.e_pointer.params2track = conv.py_to_cpp_set_str(p2t)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->params2track = __pyx_f_13stlconverters_py_to_cpp_set_str(__pyx_v_p2t);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.params2track.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":748
 *     #
 * 
 *     def initialize(self, EnrichmentParameters enrich_params):             # <<<<<<<<<<<<<<
 *         """The initialize function takes an enrichment parameter object and sets
 *         the corresponding Enrichment attributes to the same value.
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_2initialize(PyObject *__pyx_v_self, PyObject *__pyx_v_enrich_params); /*proto*/
static char __pyx_doc_5BriPy_10Enrichment_2initialize[] = "The initialize function takes an enrichment parameter object and sets\n        the corresponding Enrichment attributes to the same value.\n\n        Args:\n            * enrich_params (EnrichmentParameters): A class containing the values to\n              (re-)initialize an Enrichment cascade with.\n        ";
static PyObject *__pyx_pf_5BriPy_10Enrichment_2initialize(PyObject *__pyx_v_self, PyObject *__pyx_v_enrich_params) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("initialize");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_enrich_params), __pyx_ptype_5BriPy_EnrichmentParameters, 1, "enrich_params", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":756
 *               (re-)initialize an Enrichment cascade with.
 *         """
 *         self.e_pointer.initialize(<cpp_bright.EnrichmentParameters> enrich_params.ep)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->initialize(((struct __pyx_obj_5BriPy_EnrichmentParameters *)__pyx_v_enrich_params)->ep);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.initialize");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":759
 * 
 * 
 *     def setParams(self):             # <<<<<<<<<<<<<<
 *         """Here the parameters for Enrichment are set::
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_3setParams(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5BriPy_10Enrichment_3setParams[] = "Here the parameters for Enrichment are set::\n\n            self.ParamsIn[\"MassFeed\"]  = self.IsosIn.mass\n            self.ParamsOut[\"MassFeed\"] = 0.0\n\n            self.ParamsIn[\"MassProduct\"]  = 0.0\n            self.ParamsOut[\"MassProduct\"] = self.IsosOut.mass\n\n            self.ParamsIn[\"MassTails\"]  = 0.0\n            self.ParamsOut[\"MassTails\"] = self.IsosTail.mass\n\n            self.ParamsIn[\"N\"]  = self.N\n            self.ParamsOut[\"N\"] = self.N\n\n            self.ParamsIn[\"M\"]  = self.M\n            self.ParamsOut[\"M\"] = self.M\n\n            self.ParamsIn[\"Mstar\"]  = self.Mstar\n            self.ParamsOut[\"Mstar\"] = self.Mstar\n\n            self.ParamsIn[\"TotalPerFeed\"]  = self.TotalPerFeed\n            self.ParamsOut[\"TotalPerFeed\"] = self.TotalPerFeed\n\n            self.ParamsIn[\"SWUperFeed\"]  = self.SWUperFeed\n            self.ParamsOut[\"SWUperFeed\"] = 0.0\n\n            self.ParamsIn[\"SWUperProduct\"]  = 0.0\n            self.ParamsOut[\"SWUperProduct\"] = self.SWUperProduct\n\n        ";
static PyObject *__pyx_pf_5BriPy_10Enrichment_3setParams(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("setParams");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":790
 * 
 *         """
 *         (<cpp_bright.FCComp *> self.e_pointer).setParams()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((FCComp *)((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer)->setParams();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":793
 * 
 * 
 *     def doCalc(self, input=None):             # <<<<<<<<<<<<<<
 *         """This method performs an optimization calculation on M* and solves for
 *         appropriate values for all Enrichment attributes.  This includes the
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_4doCalc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5BriPy_10Enrichment_4doCalc[] = "This method performs an optimization calculation on M* and solves for \n        appropriate values for all Enrichment attributes.  This includes the \n        product and waste streams flowing out of the the cascade as well.\n\n        Args:\n            * input (dict or MassStream or None): If input is present, it is set as the component's \n            IsosIn.  If input is a isotopic dictionary (zzaaam keys, float values), this dictionary \n            is first converted into a MassStream before being set as IsosIn.\n\n        Returns:\n            * output (MassStream): IsosOut.\n\n        ";
static PyObject *__pyx_pf_5BriPy_10Enrichment_4doCalc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input = 0;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_in_ms;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_output = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__input,0};
  __Pyx_RefNannySetupContext("doCalc");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__input);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "doCalc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 793; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_input = values[0];
  } else {
    __pyx_v_input = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_input = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("doCalc", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 793; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.doCalc");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_in_ms = ((struct __pyx_obj_11mass_stream_MassStream *)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":808
 *         """
 *         cdef mass_stream.MassStream in_ms
 *         cdef mass_stream.MassStream output = mass_stream.MassStream()             # <<<<<<<<<<<<<<
 * 
 *         if input is None:
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_output = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":810
 *         cdef mass_stream.MassStream output = mass_stream.MassStream()
 * 
 *         if input is None:             # <<<<<<<<<<<<<<
 *             output.ms_pointer[0] = (<cpp_bright.FCComp *> self.e_pointer).doCalc()
 *         elif isinstance(input, dict):
 */
  __pyx_t_2 = (__pyx_v_input == Py_None);
  if (__pyx_t_2) {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":811
 * 
 *         if input is None:
 *             output.ms_pointer[0] = (<cpp_bright.FCComp *> self.e_pointer).doCalc()             # <<<<<<<<<<<<<<
 *         elif isinstance(input, dict):
 *             output.ms_pointer[0] = self.e_pointer.doCalc(conv.dict_to_map_int_dbl(input))
 */
    (__pyx_v_output->ms_pointer[0]) = ((FCComp *)((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer)->doCalc();
    goto __pyx_L6;
  }

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":812
 *         if input is None:
 *             output.ms_pointer[0] = (<cpp_bright.FCComp *> self.e_pointer).doCalc()
 *         elif isinstance(input, dict):             # <<<<<<<<<<<<<<
 *             output.ms_pointer[0] = self.e_pointer.doCalc(conv.dict_to_map_int_dbl(input))
 *         elif isinstance(input, mass_stream.MassStream):
 */
  __pyx_t_2 = PyDict_Check(__pyx_v_input); 
  if (__pyx_t_2) {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":813
 *             output.ms_pointer[0] = (<cpp_bright.FCComp *> self.e_pointer).doCalc()
 *         elif isinstance(input, dict):
 *             output.ms_pointer[0] = self.e_pointer.doCalc(conv.dict_to_map_int_dbl(input))             # <<<<<<<<<<<<<<
 *         elif isinstance(input, mass_stream.MassStream):
 *             in_ms = input
 */
    if (!(likely(PyDict_CheckExact(__pyx_v_input))||((__pyx_v_input) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected dict, got %.200s", Py_TYPE(__pyx_v_input)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_output->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->doCalc(__pyx_f_13stlconverters_dict_to_map_int_dbl(((PyObject*)__pyx_v_input)));
    goto __pyx_L6;
  }

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":814
 *         elif isinstance(input, dict):
 *             output.ms_pointer[0] = self.e_pointer.doCalc(conv.dict_to_map_int_dbl(input))
 *         elif isinstance(input, mass_stream.MassStream):             # <<<<<<<<<<<<<<
 *             in_ms = input
 *             output.ms_pointer[0] = self.e_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0])
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_input, ((PyObject*)__pyx_ptype_11mass_stream_MassStream)); 
  if (__pyx_t_2) {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":815
 *             output.ms_pointer[0] = self.e_pointer.doCalc(conv.dict_to_map_int_dbl(input))
 *         elif isinstance(input, mass_stream.MassStream):
 *             in_ms = input             # <<<<<<<<<<<<<<
 *             output.ms_pointer[0] = self.e_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0])
 * 
 */
    if (!(likely(((__pyx_v_input) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_input, __pyx_ptype_11mass_stream_MassStream))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_INCREF(__pyx_v_input);
    __Pyx_DECREF(((PyObject *)__pyx_v_in_ms));
    __pyx_v_in_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_input);

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":816
 *         elif isinstance(input, mass_stream.MassStream):
 *             in_ms = input
 *             output.ms_pointer[0] = self.e_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0])             # <<<<<<<<<<<<<<
 * 
 *         return output
 */
    (__pyx_v_output->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->doCalc((__pyx_v_in_ms->ms_pointer[0]));
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":818
 *             output.ms_pointer[0] = self.e_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0])
 * 
 *         return output             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __pyx_r = ((PyObject *)__pyx_v_output);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.doCalc");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_in_ms);
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":821
 * 
 * 
 *     def PoverF(self, double x_F, double x_P, double x_W):             # <<<<<<<<<<<<<<
 *         """Solves for the product over feed enrichment ratio.
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_5PoverF(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5BriPy_10Enrichment_5PoverF[] = "Solves for the product over feed enrichment ratio.\n\n        .. math::\n\n            \\frac{p}{f} = \\frac{(x_F - x_W)}{(x_P - x_W)}\n\n        Args:\n            * x_F (float): Feed enrichment.\n            * x_P (float): Product enrichment.\n            * x_W (float): Waste enrichment.\n\n        Returns:\n            * pfratio (float): As calculated above.\n        ";
static PyObject *__pyx_pf_5BriPy_10Enrichment_5PoverF(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x_F;
  double __pyx_v_x_P;
  double __pyx_v_x_W;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x_F,&__pyx_n_s__x_P,&__pyx_n_s__x_W,0};
  __Pyx_RefNannySetupContext("PoverF");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x_F);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x_P);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("PoverF", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x_W);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("PoverF", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "PoverF") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x_F = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x_F == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x_P = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_x_P == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x_W = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_x_W == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x_F = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x_F == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x_P = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_x_P == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x_W = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_x_W == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PoverF", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.PoverF");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":836
 *             * pfratio (float): As calculated above.
 *         """
 *         return self.e_pointer.PoverF(x_F, x_P, x_W)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->PoverF(__pyx_v_x_F, __pyx_v_x_P, __pyx_v_x_W)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.PoverF");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":839
 * 
 * 
 *     def WoverF(self, double x_F, double x_P, double x_W):             # <<<<<<<<<<<<<<
 *         """Solves for the waste over feed enrichment ratio.
 * 
 */

static PyObject *__pyx_pf_5BriPy_10Enrichment_6WoverF(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5BriPy_10Enrichment_6WoverF[] = "Solves for the waste over feed enrichment ratio.\n\n        .. math::\n\n            \\frac{p}{f} = \\frac{(x_F - x_P)}{(x_W - x_P)}\n\n        Args:\n            * x_F (float): Feed enrichment.\n            * x_P (float): Product enrichment.\n            * x_W (float): Waste enrichment.\n\n        Returns:\n            * wfratio (float): As calculated above.\n        ";
static PyObject *__pyx_pf_5BriPy_10Enrichment_6WoverF(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x_F;
  double __pyx_v_x_P;
  double __pyx_v_x_W;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x_F,&__pyx_n_s__x_P,&__pyx_n_s__x_W,0};
  __Pyx_RefNannySetupContext("WoverF");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x_F);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x_P);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("WoverF", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x_W);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("WoverF", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "WoverF") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x_F = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x_F == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x_P = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_x_P == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x_W = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_x_W == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x_F = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x_F == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x_P = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_x_P == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x_W = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_x_W == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("WoverF", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Enrichment.WoverF");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":854
 *             * wfratio (float): As calculated above.
 *         """
 *         return self.e_pointer.WoverF(x_F, x_P, x_W)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Enrichment *)__pyx_v_self)->e_pointer->WoverF(__pyx_v_x_F, __pyx_v_x_P, __pyx_v_x_W)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Enrichment.WoverF");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":897
 *     cdef cpp_bright.Reprocess * r_pointer
 * 
 *     def _cpp_sepeff(self, dict d):             # <<<<<<<<<<<<<<
 *         sepeff = {}
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reprocess__cpp_sepeff(PyObject *__pyx_v_self, PyObject *__pyx_v_d); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reprocess__cpp_sepeff(PyObject *__pyx_v_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_v_sepeff;
  PyObject *__pyx_v_key;
  PyObject *__pyx_v_value;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("_cpp_sepeff");
  __pyx_v_sepeff = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_key = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_value = Py_None; __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_d), (&PyDict_Type), 1, "d", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":898
 * 
 *     def _cpp_sepeff(self, dict d):
 *         sepeff = {}             # <<<<<<<<<<<<<<
 * 
 *         for key, value in d.items():
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_v_sepeff));
  __pyx_v_sepeff = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":900
 *         sepeff = {}
 * 
 *         for key, value in d.items():             # <<<<<<<<<<<<<<
 *             value = float(value)
 * 
 */
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'items'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyDict_Items(__pyx_v_d); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = 0; __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
  } else {
    __pyx_t_2 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_3))) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_3))) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++;
    } else {
      __pyx_t_1 = PyIter_Next(__pyx_t_3);
      if (!__pyx_t_1) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (PyTuple_CheckExact(__pyx_t_1) && likely(PyTuple_GET_SIZE(__pyx_t_1) == 2)) {
      PyObject* tuple = __pyx_t_1;
      __pyx_t_4 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_4);
      __pyx_t_5 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_v_key);
      __pyx_v_key = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_v_value);
      __pyx_v_value = __pyx_t_5;
      __pyx_t_5 = 0;
    } else {
      __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_UnpackItem(__pyx_t_6, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_UnpackItem(__pyx_t_6, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_EndUnpack(__pyx_t_6, 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_v_key);
      __pyx_v_key = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_v_value);
      __pyx_v_value = __pyx_t_5;
      __pyx_t_5 = 0;
    }

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":901
 * 
 *         for key, value in d.items():
 *             value = float(value)             # <<<<<<<<<<<<<<
 * 
 *             if isinstance(key, int):
 */
    __pyx_t_7 = __Pyx_PyObject_AsDouble(__pyx_v_value); if (unlikely(__pyx_t_7 == ((double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyFloat_FromDouble(__pyx_t_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_v_value);
    __pyx_v_value = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":903
 *             value = float(value)
 * 
 *             if isinstance(key, int):             # <<<<<<<<<<<<<<
 *                 sepeff[key] = value
 *             elif isinstance(key, basestring):
 */
    __pyx_t_8 = PyInt_Check(__pyx_v_key); 
    if (__pyx_t_8) {

      /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":904
 * 
 *             if isinstance(key, int):
 *                 sepeff[key] = value             # <<<<<<<<<<<<<<
 *             elif isinstance(key, basestring):
 *                 if key in isoname.LLzz:
 */
      if (PyDict_SetItem(((PyObject *)__pyx_v_sepeff), __pyx_v_key, __pyx_v_value) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L7;
    }

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":905
 *             if isinstance(key, int):
 *                 sepeff[key] = value
 *             elif isinstance(key, basestring):             # <<<<<<<<<<<<<<
 *                 if key in isoname.LLzz:
 *                     sepeff[isoname.LLzz[key]] = value
 */
    __pyx_t_8 = PyObject_IsInstance(__pyx_v_key, __pyx_builtin_basestring); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_8) {

      /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":906
 *                 sepeff[key] = value
 *             elif isinstance(key, basestring):
 *                 if key in isoname.LLzz:             # <<<<<<<<<<<<<<
 *                     sepeff[isoname.LLzz[key]] = value
 *                 else:
 */
      __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__LLzz); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = ((PySequence_Contains(__pyx_t_5, __pyx_v_key))); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_8) {

        /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":907
 *             elif isinstance(key, basestring):
 *                 if key in isoname.LLzz:
 *                     sepeff[isoname.LLzz[key]] = value             # <<<<<<<<<<<<<<
 *                 else:
 *                     sepeff[isoname.mixed_2_zzaaam(key)] = value
 */
        __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__isoname); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__LLzz); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyObject_GetItem(__pyx_t_1, __pyx_v_key); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (PyDict_SetItem(((PyObject *)__pyx_v_sepeff), __pyx_t_5, __pyx_v_value) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L8;
      }
      /*else*/ {

        /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":909
 *                     sepeff[isoname.LLzz[key]] = value
 *                 else:
 *                     sepeff[isoname.mixed_2_zzaaam(key)] = value             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError("Separation keys must be strings or integers.")
 */
        __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__isoname); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__mixed_2_zzaaam); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_5));
        __Pyx_INCREF(__pyx_v_key);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_key);
        __Pyx_GIVEREF(__pyx_v_key);
        __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
        if (PyDict_SetItem(((PyObject *)__pyx_v_sepeff), __pyx_t_4, __pyx_v_value) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_L8:;
      goto __pyx_L7;
    }
    /*else*/ {

      /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":911
 *                     sepeff[isoname.mixed_2_zzaaam(key)] = value
 *             else:
 *                 raise TypeError("Separation keys must be strings or integers.")             # <<<<<<<<<<<<<<
 * 
 *         return sepeff
 */
      __pyx_t_4 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L7:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":913
 *                 raise TypeError("Separation keys must be strings or integers.")
 * 
 *         return sepeff             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, dict sepeff={}, char * name=""):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_sepeff));
  __pyx_r = ((PyObject *)__pyx_v_sepeff);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("BriPy.Reprocess._cpp_sepeff");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_sepeff);
  __Pyx_DECREF(__pyx_v_key);
  __Pyx_DECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":915
 *         return sepeff
 * 
 *     def __cinit__(self, dict sepeff={}, char * name=""):             # <<<<<<<<<<<<<<
 *         sepeff = self._cpp_sepeff(sepeff)
 *         self.r_pointer = new cpp_bright.Reprocess(conv.dict_to_map_int_dbl(sepeff), std.string(name))
 */

static int __pyx_pf_5BriPy_9Reprocess_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5BriPy_9Reprocess_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sepeff = 0;
  char *__pyx_v_name;
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sepeff,&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    values[0] = __pyx_k_4;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sepeff);
        if (value) { values[0] = value; kw_args--; }
      }
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (value) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_sepeff = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_name = ((char *)__pyx_k_1);
    }
  } else {
    __pyx_v_sepeff = __pyx_k_4;
    __pyx_v_name = ((char *)__pyx_k_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_sepeff = ((PyObject*)PyTuple_GET_ITEM(__pyx_args, 0));
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reprocess.__cinit__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF(__pyx_v_sepeff);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sepeff), (&PyDict_Type), 1, "sepeff", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":916
 * 
 *     def __cinit__(self, dict sepeff={}, char * name=""):
 *         sepeff = self._cpp_sepeff(sepeff)             # <<<<<<<<<<<<<<
 *         self.r_pointer = new cpp_bright.Reprocess(conv.dict_to_map_int_dbl(sepeff), std.string(name))
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___cpp_sepeff); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_sepeff));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_sepeff));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_sepeff));
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected dict, got %.200s", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_v_sepeff));
  __pyx_v_sepeff = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":917
 *     def __cinit__(self, dict sepeff={}, char * name=""):
 *         sepeff = self._cpp_sepeff(sepeff)
 *         self.r_pointer = new cpp_bright.Reprocess(conv.dict_to_map_int_dbl(sepeff), std.string(name))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer = new Reprocess(__pyx_f_13stlconverters_dict_to_map_int_dbl(__pyx_v_sepeff), std::string(__pyx_v_name));

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("BriPy.Reprocess.__cinit__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_sepeff);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":919
 *         self.r_pointer = new cpp_bright.Reprocess(conv.dict_to_map_int_dbl(sepeff), std.string(name))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.r_pointer
 * 
 */

static void __pyx_pf_5BriPy_9Reprocess_2__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_5BriPy_9Reprocess_2__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":920
 * 
 *     def __dealloc__(self):
 *         del self.r_pointer             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer;

  __Pyx_RefNannyFinishContext();
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":930
 * 
 *     property sepeff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.map_to_dict_int_dbl(self.r_pointer.sepeff)
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reprocess_6sepeff___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reprocess_6sepeff___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":931
 *     property sepeff:
 *         def __get__(self):
 *             return conv.map_to_dict_int_dbl(self.r_pointer.sepeff)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_int_dbl(((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->sepeff)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reprocess.sepeff.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":933
 *             return conv.map_to_dict_int_dbl(self.r_pointer.sepeff)
 * 
 *         def __set__(self, dict value):             # <<<<<<<<<<<<<<
 *             value = self._cpp_sepeff(value)
 *             self.r_pointer.sepeff = conv.dict_to_map_int_dbl(value)
 */

static int __pyx_pf_5BriPy_9Reprocess_6sepeff_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_9Reprocess_6sepeff_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__set__");
  __Pyx_INCREF(__pyx_v_value);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyDict_Type), 1, "value", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":934
 * 
 *         def __set__(self, dict value):
 *             value = self._cpp_sepeff(value)             # <<<<<<<<<<<<<<
 *             self.r_pointer.sepeff = conv.dict_to_map_int_dbl(value)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___cpp_sepeff); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_value));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_value));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_value));
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected dict, got %.200s", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_v_value));
  __pyx_v_value = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":935
 *         def __set__(self, dict value):
 *             value = self._cpp_sepeff(value)
 *             self.r_pointer.sepeff = conv.dict_to_map_int_dbl(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->sepeff = __pyx_f_13stlconverters_dict_to_map_int_dbl(__pyx_v_value);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("BriPy.Reprocess.sepeff.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":941
 * 
 *     property name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef std.string n = self.r_pointer.name
 *             return n.c_str()
 */

static PyObject *__pyx_pf_5BriPy_9Reprocess_4name___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reprocess_4name___get__(PyObject *__pyx_v_self) {
  std::string __pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":942
 *     property name:
 *         def __get__(self):
 *             cdef std.string n = self.r_pointer.name             # <<<<<<<<<<<<<<
 *             return n.c_str()
 * 
 */
  __pyx_v_n = ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->name;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":943
 *         def __get__(self):
 *             cdef std.string n = self.r_pointer.name
 *             return n.c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char * n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_n.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reprocess.name.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":945
 *             return n.c_str()
 * 
 *         def __set__(self, char * n):             # <<<<<<<<<<<<<<
 *             self.r_pointer.name = std.string(n)
 * 
 */

static int __pyx_pf_5BriPy_9Reprocess_4name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static int __pyx_pf_5BriPy_9Reprocess_4name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  char *__pyx_v_n;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_n); {
    __pyx_v_n = PyBytes_AsString(__pyx_arg_n); if (unlikely((!__pyx_v_n) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reprocess.name.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":946
 * 
 *         def __set__(self, char * n):
 *             self.r_pointer.name = std.string(n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->name = std::string(__pyx_v_n);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":950
 * 
 *     property natural_name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef std.string n = self.r_pointer.natural_name
 *             return n.c_str()
 */

static PyObject *__pyx_pf_5BriPy_9Reprocess_12natural_name___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reprocess_12natural_name___get__(PyObject *__pyx_v_self) {
  std::string __pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":951
 *     property natural_name:
 *         def __get__(self):
 *             cdef std.string n = self.r_pointer.natural_name             # <<<<<<<<<<<<<<
 *             return n.c_str()
 * 
 */
  __pyx_v_n = ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->natural_name;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":952
 *         def __get__(self):
 *             cdef std.string n = self.r_pointer.natural_name
 *             return n.c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char * n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_n.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reprocess.natural_name.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":954
 *             return n.c_str()
 * 
 *         def __set__(self, char * n):             # <<<<<<<<<<<<<<
 *             self.r_pointer.natural_name = std.string(n)
 * 
 */

static int __pyx_pf_5BriPy_9Reprocess_12natural_name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static int __pyx_pf_5BriPy_9Reprocess_12natural_name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  char *__pyx_v_n;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_n); {
    __pyx_v_n = PyBytes_AsString(__pyx_arg_n); if (unlikely((!__pyx_v_n) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reprocess.natural_name.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":955
 * 
 *         def __set__(self, char * n):
 *             self.r_pointer.natural_name = std.string(n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->natural_name = std::string(__pyx_v_n);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":959
 * 
 *     property IsosIn:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.r_pointer.IsosIn
 */

static PyObject *__pyx_pf_5BriPy_9Reprocess_6IsosIn___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reprocess_6IsosIn___get__(PyObject *__pyx_v_self) {
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":960
 *     property IsosIn:
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()             # <<<<<<<<<<<<<<
 *             py_ms.ms_pointer[0] = self.r_pointer.IsosIn
 *             return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 960; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":961
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.r_pointer.IsosIn             # <<<<<<<<<<<<<<
 *             return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->IsosIn;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":962
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.r_pointer.IsosIn
 *             return py_ms             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reprocess.IsosIn.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":964
 *             return py_ms
 * 
 *         def __set__(self, mass_stream.MassStream ms):             # <<<<<<<<<<<<<<
 *             self.r_pointer.IsosIn = <cpp_mass_stream.MassStream> ms.ms_pointer[0]
 * 
 */

static int __pyx_pf_5BriPy_9Reprocess_6IsosIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms); /*proto*/
static int __pyx_pf_5BriPy_9Reprocess_6IsosIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ms), __pyx_ptype_11mass_stream_MassStream, 1, "ms", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":965
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 *             self.r_pointer.IsosIn = <cpp_mass_stream.MassStream> ms.ms_pointer[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->IsosIn = (((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_ms)->ms_pointer[0]);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Reprocess.IsosIn.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":969
 * 
 *     property IsosOut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.r_pointer.IsosOut
 */

static PyObject *__pyx_pf_5BriPy_9Reprocess_7IsosOut___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reprocess_7IsosOut___get__(PyObject *__pyx_v_self) {
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":970
 *     property IsosOut:
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()             # <<<<<<<<<<<<<<
 *             py_ms.ms_pointer[0] = self.r_pointer.IsosOut
 *             return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":971
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.r_pointer.IsosOut             # <<<<<<<<<<<<<<
 *             return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->IsosOut;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":972
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.r_pointer.IsosOut
 *             return py_ms             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reprocess.IsosOut.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":974
 *             return py_ms
 * 
 *         def __set__(self, mass_stream.MassStream ms):             # <<<<<<<<<<<<<<
 *             self.r_pointer.IsosOut = <cpp_mass_stream.MassStream> ms.ms_pointer[0]
 * 
 */

static int __pyx_pf_5BriPy_9Reprocess_7IsosOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms); /*proto*/
static int __pyx_pf_5BriPy_9Reprocess_7IsosOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ms), __pyx_ptype_11mass_stream_MassStream, 1, "ms", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":975
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 *             self.r_pointer.IsosOut = <cpp_mass_stream.MassStream> ms.ms_pointer[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->IsosOut = (((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_ms)->ms_pointer[0]);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Reprocess.IsosOut.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":979
 * 
 *     property ParamsIn:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.map_to_dict_str_dbl(self.r_pointer.ParamsIn)
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reprocess_8ParamsIn___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reprocess_8ParamsIn___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":980
 *     property ParamsIn:
 *         def __get__(self):
 *             return conv.map_to_dict_str_dbl(self.r_pointer.ParamsIn)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict pi):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_str_dbl(((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->ParamsIn)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reprocess.ParamsIn.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":982
 *             return conv.map_to_dict_str_dbl(self.r_pointer.ParamsIn)
 * 
 *         def __set__(self, dict pi):             # <<<<<<<<<<<<<<
 *             self.r_pointer.ParamsIn = conv.dict_to_map_str_dbl(pi)
 * 
 */

static int __pyx_pf_5BriPy_9Reprocess_8ParamsIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_pi); /*proto*/
static int __pyx_pf_5BriPy_9Reprocess_8ParamsIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_pi) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pi), (&PyDict_Type), 1, "pi", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":983
 * 
 *         def __set__(self, dict pi):
 *             self.r_pointer.ParamsIn = conv.dict_to_map_str_dbl(pi)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->ParamsIn = __pyx_f_13stlconverters_dict_to_map_str_dbl(__pyx_v_pi);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Reprocess.ParamsIn.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":987
 * 
 *     property ParamsOut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.map_to_dict_str_dbl(self.r_pointer.ParamsOut)
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reprocess_9ParamsOut___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reprocess_9ParamsOut___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":988
 *     property ParamsOut:
 *         def __get__(self):
 *             return conv.map_to_dict_str_dbl(self.r_pointer.ParamsOut)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict po):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_str_dbl(((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->ParamsOut)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reprocess.ParamsOut.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":990
 *             return conv.map_to_dict_str_dbl(self.r_pointer.ParamsOut)
 * 
 *         def __set__(self, dict po):             # <<<<<<<<<<<<<<
 *             self.r_pointer.ParamsOut = conv.dict_to_map_str_dbl(po)
 * 
 */

static int __pyx_pf_5BriPy_9Reprocess_9ParamsOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_po); /*proto*/
static int __pyx_pf_5BriPy_9Reprocess_9ParamsOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_po) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_po), (&PyDict_Type), 1, "po", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 990; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":991
 * 
 *         def __set__(self, dict po):
 *             self.r_pointer.ParamsOut = conv.dict_to_map_str_dbl(po)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->ParamsOut = __pyx_f_13stlconverters_dict_to_map_str_dbl(__pyx_v_po);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Reprocess.ParamsOut.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":995
 * 
 *     property PassNum:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r_pointer.PassNum
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reprocess_7PassNum___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reprocess_7PassNum___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":996
 *     property PassNum:
 *         def __get__(self):
 *             return self.r_pointer.PassNum             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int pn):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->PassNum); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reprocess.PassNum.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":998
 *             return self.r_pointer.PassNum
 * 
 *         def __set__(self, int pn):             # <<<<<<<<<<<<<<
 *             self.r_pointer.PassNum = pn
 * 
 */

static int __pyx_pf_5BriPy_9Reprocess_7PassNum_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_pn); /*proto*/
static int __pyx_pf_5BriPy_9Reprocess_7PassNum_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_pn) {
  int __pyx_v_pn;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_pn); {
    __pyx_v_pn = __Pyx_PyInt_AsInt(__pyx_arg_pn); if (unlikely((__pyx_v_pn == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 998; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reprocess.PassNum.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":999
 * 
 *         def __set__(self, int pn):
 *             self.r_pointer.PassNum = pn             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->PassNum = __pyx_v_pn;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1003
 * 
 *     property params2track:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.cpp_to_py_set_str(self.r_pointer.params2track)
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reprocess_12params2track___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reprocess_12params2track___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1004
 *     property params2track:
 *         def __get__(self):
 *             return conv.cpp_to_py_set_str(self.r_pointer.params2track)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, set p2t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_cpp_to_py_set_str(((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->params2track)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reprocess.params2track.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1006
 *             return conv.cpp_to_py_set_str(self.r_pointer.params2track)
 * 
 *         def __set__(self, set p2t):             # <<<<<<<<<<<<<<
 *             self.r_pointer.params2track = conv.py_to_cpp_set_str(p2t)
 * 
 */

static int __pyx_pf_5BriPy_9Reprocess_12params2track_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_p2t); /*proto*/
static int __pyx_pf_5BriPy_9Reprocess_12params2track_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_p2t) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p2t), (&PySet_Type), 1, "p2t", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1007
 * 
 *         def __set__(self, set p2t):
 *             self.r_pointer.params2track = conv.py_to_cpp_set_str(p2t)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->params2track = __pyx_f_13stlconverters_py_to_cpp_set_str(__pyx_v_p2t);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Reprocess.params2track.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1015
 *     #
 * 
 *     def initialize(self, dict sepdict):             # <<<<<<<<<<<<<<
 *         """The initialize() function calculates the sepeff from an integer-keyed dictionary
 *         of separation efficiencies.  The difference is that sepdict may contain either elemental or
 */

static PyObject *__pyx_pf_5BriPy_9Reprocess_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_v_sepdict); /*proto*/
static char __pyx_doc_5BriPy_9Reprocess_3initialize[] = "The initialize() function calculates the sepeff from an integer-keyed dictionary\n        of separation efficiencies.  The difference is that sepdict may contain either elemental or\n        isotopic keys and need not contain every isotope tracked.  On the other hand, sepeff\n        must have only zzaaam keys that match exactly the isotopes in BriPy.isos2track.\n\n        Args:\n            * sepdict (dict): Integer valued dictionary of SE to be converted to sepeff.\n        ";
static PyObject *__pyx_pf_5BriPy_9Reprocess_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_v_sepdict) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("initialize");
  __Pyx_INCREF(__pyx_v_sepdict);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sepdict), (&PyDict_Type), 1, "sepdict", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1024
 *             * sepdict (dict): Integer valued dictionary of SE to be converted to sepeff.
 *         """
 *         sepdict = self._cpp_sepeff(sepdict)             # <<<<<<<<<<<<<<
 *         self.r_pointer.initialize(conv.dict_to_map_int_dbl(sepdict))
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___cpp_sepeff); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_sepdict));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_sepdict));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_sepdict));
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected dict, got %.200s", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_v_sepdict));
  __pyx_v_sepdict = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1025
 *         """
 *         sepdict = self._cpp_sepeff(sepdict)
 *         self.r_pointer.initialize(conv.dict_to_map_int_dbl(sepdict))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->initialize(__pyx_f_13stlconverters_dict_to_map_int_dbl(__pyx_v_sepdict));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("BriPy.Reprocess.initialize");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_sepdict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1028
 * 
 * 
 *     def setParams(self):             # <<<<<<<<<<<<<<
 *         """Here the parameters for Reprocess are set.  For reprocessing, this amounts to just
 *         a "Mass" parameter::
 */

static PyObject *__pyx_pf_5BriPy_9Reprocess_4setParams(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5BriPy_9Reprocess_4setParams[] = "Here the parameters for Reprocess are set.  For reprocessing, this amounts to just\n        a \"Mass\" parameter::\n\n            self.ParamsIn[\"Mass\"]  = self.IsosIn.mass\n            self.ParamsOut[\"Mass\"] = self.IsosOut.mass\n\n        ";
static PyObject *__pyx_pf_5BriPy_9Reprocess_4setParams(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("setParams");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1036
 * 
 *         """
 *         (<cpp_bright.FCComp *> self.r_pointer).setParams()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((FCComp *)((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer)->setParams();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1039
 * 
 * 
 *     def doCalc(self, input=None):             # <<<<<<<<<<<<<<
 *         """This method performs the relatively simply task of multiplying the current input stream by
 *         the SE to form a new output stream::
 */

static PyObject *__pyx_pf_5BriPy_9Reprocess_5doCalc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5BriPy_9Reprocess_5doCalc[] = "This method performs the relatively simply task of multiplying the current input stream by \n        the SE to form a new output stream::\n\n            incomp  = self.IsosIn.multByMass()\n            outcomp = {}\n            for iso in incomp.keys():\n                outcomp[iso] = incomp[iso] * sepeff[iso]\n            self.IsosOut = MassStream(outcomp)\n            return self.IsosOut\n\n        Args:\n            * input (dict or MassStream): If input is present, it set as the component's \n              IsosIn.  If input is a isotopic dictionary (zzaaam keys, float values), this\n              dictionary is first converted into a MassStream before being set as IsosIn.\n\n        Returns:\n            * output (MassStream): IsosOut.\n        ";
static PyObject *__pyx_pf_5BriPy_9Reprocess_5doCalc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input = 0;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_in_ms;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_output = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__input,0};
  __Pyx_RefNannySetupContext("doCalc");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__input);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "doCalc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_input = values[0];
  } else {
    __pyx_v_input = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_input = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("doCalc", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reprocess.doCalc");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_in_ms = ((struct __pyx_obj_11mass_stream_MassStream *)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1059
 *         """
 *         cdef mass_stream.MassStream in_ms
 *         cdef mass_stream.MassStream output = mass_stream.MassStream()             # <<<<<<<<<<<<<<
 * 
 *         if input is None:
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_output = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1061
 *         cdef mass_stream.MassStream output = mass_stream.MassStream()
 * 
 *         if input is None:             # <<<<<<<<<<<<<<
 *             output.ms_pointer[0] = (<cpp_bright.FCComp *> self.r_pointer).doCalc()
 *         elif isinstance(input, dict):
 */
  __pyx_t_2 = (__pyx_v_input == Py_None);
  if (__pyx_t_2) {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1062
 * 
 *         if input is None:
 *             output.ms_pointer[0] = (<cpp_bright.FCComp *> self.r_pointer).doCalc()             # <<<<<<<<<<<<<<
 *         elif isinstance(input, dict):
 *             output.ms_pointer[0] = self.r_pointer.doCalc(conv.dict_to_map_int_dbl(input))
 */
    (__pyx_v_output->ms_pointer[0]) = ((FCComp *)((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer)->doCalc();
    goto __pyx_L6;
  }

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1063
 *         if input is None:
 *             output.ms_pointer[0] = (<cpp_bright.FCComp *> self.r_pointer).doCalc()
 *         elif isinstance(input, dict):             # <<<<<<<<<<<<<<
 *             output.ms_pointer[0] = self.r_pointer.doCalc(conv.dict_to_map_int_dbl(input))
 *         elif isinstance(input, mass_stream.MassStream):
 */
  __pyx_t_2 = PyDict_Check(__pyx_v_input); 
  if (__pyx_t_2) {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1064
 *             output.ms_pointer[0] = (<cpp_bright.FCComp *> self.r_pointer).doCalc()
 *         elif isinstance(input, dict):
 *             output.ms_pointer[0] = self.r_pointer.doCalc(conv.dict_to_map_int_dbl(input))             # <<<<<<<<<<<<<<
 *         elif isinstance(input, mass_stream.MassStream):
 *             in_ms = input
 */
    if (!(likely(PyDict_CheckExact(__pyx_v_input))||((__pyx_v_input) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected dict, got %.200s", Py_TYPE(__pyx_v_input)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_output->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->doCalc(__pyx_f_13stlconverters_dict_to_map_int_dbl(((PyObject*)__pyx_v_input)));
    goto __pyx_L6;
  }

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1065
 *         elif isinstance(input, dict):
 *             output.ms_pointer[0] = self.r_pointer.doCalc(conv.dict_to_map_int_dbl(input))
 *         elif isinstance(input, mass_stream.MassStream):             # <<<<<<<<<<<<<<
 *             in_ms = input
 *             output.ms_pointer[0] = self.r_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0])
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_input, ((PyObject*)__pyx_ptype_11mass_stream_MassStream)); 
  if (__pyx_t_2) {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1066
 *             output.ms_pointer[0] = self.r_pointer.doCalc(conv.dict_to_map_int_dbl(input))
 *         elif isinstance(input, mass_stream.MassStream):
 *             in_ms = input             # <<<<<<<<<<<<<<
 *             output.ms_pointer[0] = self.r_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0])
 * 
 */
    if (!(likely(((__pyx_v_input) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_input, __pyx_ptype_11mass_stream_MassStream))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_INCREF(__pyx_v_input);
    __Pyx_DECREF(((PyObject *)__pyx_v_in_ms));
    __pyx_v_in_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_input);

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1067
 *         elif isinstance(input, mass_stream.MassStream):
 *             in_ms = input
 *             output.ms_pointer[0] = self.r_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0])             # <<<<<<<<<<<<<<
 * 
 *         return output
 */
    (__pyx_v_output->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Reprocess *)__pyx_v_self)->r_pointer->doCalc((__pyx_v_in_ms->ms_pointer[0]));
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1069
 *             output.ms_pointer[0] = self.r_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0])
 * 
 *         return output             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __pyx_r = ((PyObject *)__pyx_v_output);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reprocess.doCalc");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_in_ms);
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1087
 *     cdef cpp_bright.Storage * s_pointer
 * 
 *     def __cinit__(self, char * name=""):             # <<<<<<<<<<<<<<
 *         self.s_pointer = new cpp_bright.Storage(std.string(name))
 * 
 */

static int __pyx_pf_5BriPy_7Storage___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5BriPy_7Storage___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  int __pyx_r;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_name = ((char *)__pyx_k_1);
    }
  } else {
    __pyx_v_name = ((char *)__pyx_k_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Storage.__cinit__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1088
 * 
 *     def __cinit__(self, char * name=""):
 *         self.s_pointer = new cpp_bright.Storage(std.string(name))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer = new Storage(std::string(__pyx_v_name));

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1090
 *         self.s_pointer = new cpp_bright.Storage(std.string(name))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.s_pointer
 * 
 */

static void __pyx_pf_5BriPy_7Storage_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_5BriPy_7Storage_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1091
 * 
 *     def __dealloc__(self):
 *         del self.s_pointer             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer;

  __Pyx_RefNannyFinishContext();
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1101
 * 
 *     property decay_time:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s_pointer.decay_time
 * 
 */

static PyObject *__pyx_pf_5BriPy_7Storage_10decay_time___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_7Storage_10decay_time___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1102
 *     property decay_time:
 *         def __get__(self):
 *             return self.s_pointer.decay_time             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->decay_time); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Storage.decay_time.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1104
 *             return self.s_pointer.decay_time
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.s_pointer.decay_time = <double> value
 * 
 */

static int __pyx_pf_5BriPy_7Storage_10decay_time_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_7Storage_10decay_time_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1105
 * 
 *         def __set__(self, value):
 *             self.s_pointer.decay_time = <double> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->decay_time = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Storage.decay_time.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1111
 * 
 *     property name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef std.string n = self.s_pointer.name
 *             return n.c_str()
 */

static PyObject *__pyx_pf_5BriPy_7Storage_4name___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_7Storage_4name___get__(PyObject *__pyx_v_self) {
  std::string __pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1112
 *     property name:
 *         def __get__(self):
 *             cdef std.string n = self.s_pointer.name             # <<<<<<<<<<<<<<
 *             return n.c_str()
 * 
 */
  __pyx_v_n = ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->name;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1113
 *         def __get__(self):
 *             cdef std.string n = self.s_pointer.name
 *             return n.c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char * n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_n.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Storage.name.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1115
 *             return n.c_str()
 * 
 *         def __set__(self, char * n):             # <<<<<<<<<<<<<<
 *             self.s_pointer.name = std.string(n)
 * 
 */

static int __pyx_pf_5BriPy_7Storage_4name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static int __pyx_pf_5BriPy_7Storage_4name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  char *__pyx_v_n;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_n); {
    __pyx_v_n = PyBytes_AsString(__pyx_arg_n); if (unlikely((!__pyx_v_n) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1115; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Storage.name.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1116
 * 
 *         def __set__(self, char * n):
 *             self.s_pointer.name = std.string(n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->name = std::string(__pyx_v_n);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1120
 * 
 *     property natural_name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef std.string n = self.s_pointer.natural_name
 *             return n.c_str()
 */

static PyObject *__pyx_pf_5BriPy_7Storage_12natural_name___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_7Storage_12natural_name___get__(PyObject *__pyx_v_self) {
  std::string __pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1121
 *     property natural_name:
 *         def __get__(self):
 *             cdef std.string n = self.s_pointer.natural_name             # <<<<<<<<<<<<<<
 *             return n.c_str()
 * 
 */
  __pyx_v_n = ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->natural_name;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1122
 *         def __get__(self):
 *             cdef std.string n = self.s_pointer.natural_name
 *             return n.c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char * n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_n.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Storage.natural_name.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1124
 *             return n.c_str()
 * 
 *         def __set__(self, char * n):             # <<<<<<<<<<<<<<
 *             self.s_pointer.natural_name = std.string(n)
 * 
 */

static int __pyx_pf_5BriPy_7Storage_12natural_name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static int __pyx_pf_5BriPy_7Storage_12natural_name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  char *__pyx_v_n;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_n); {
    __pyx_v_n = PyBytes_AsString(__pyx_arg_n); if (unlikely((!__pyx_v_n) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1124; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Storage.natural_name.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1125
 * 
 *         def __set__(self, char * n):
 *             self.s_pointer.natural_name = std.string(n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->natural_name = std::string(__pyx_v_n);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1129
 * 
 *     property IsosIn:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.s_pointer.IsosIn
 */

static PyObject *__pyx_pf_5BriPy_7Storage_6IsosIn___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_7Storage_6IsosIn___get__(PyObject *__pyx_v_self) {
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1130
 *     property IsosIn:
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()             # <<<<<<<<<<<<<<
 *             py_ms.ms_pointer[0] = self.s_pointer.IsosIn
 *             return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1131
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.s_pointer.IsosIn             # <<<<<<<<<<<<<<
 *             return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->IsosIn;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1132
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.s_pointer.IsosIn
 *             return py_ms             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Storage.IsosIn.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1134
 *             return py_ms
 * 
 *         def __set__(self, mass_stream.MassStream ms):             # <<<<<<<<<<<<<<
 *             self.s_pointer.IsosIn = <cpp_mass_stream.MassStream> ms.ms_pointer[0]
 * 
 */

static int __pyx_pf_5BriPy_7Storage_6IsosIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms); /*proto*/
static int __pyx_pf_5BriPy_7Storage_6IsosIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ms), __pyx_ptype_11mass_stream_MassStream, 1, "ms", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1135
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 *             self.s_pointer.IsosIn = <cpp_mass_stream.MassStream> ms.ms_pointer[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->IsosIn = (((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_ms)->ms_pointer[0]);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Storage.IsosIn.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1139
 * 
 *     property IsosOut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.s_pointer.IsosOut
 */

static PyObject *__pyx_pf_5BriPy_7Storage_7IsosOut___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_7Storage_7IsosOut___get__(PyObject *__pyx_v_self) {
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1140
 *     property IsosOut:
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()             # <<<<<<<<<<<<<<
 *             py_ms.ms_pointer[0] = self.s_pointer.IsosOut
 *             return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1141
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.s_pointer.IsosOut             # <<<<<<<<<<<<<<
 *             return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->IsosOut;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1142
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.s_pointer.IsosOut
 *             return py_ms             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Storage.IsosOut.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1144
 *             return py_ms
 * 
 *         def __set__(self, mass_stream.MassStream ms):             # <<<<<<<<<<<<<<
 *             self.s_pointer.IsosOut = <cpp_mass_stream.MassStream> ms.ms_pointer[0]
 * 
 */

static int __pyx_pf_5BriPy_7Storage_7IsosOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms); /*proto*/
static int __pyx_pf_5BriPy_7Storage_7IsosOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ms), __pyx_ptype_11mass_stream_MassStream, 1, "ms", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1145
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 *             self.s_pointer.IsosOut = <cpp_mass_stream.MassStream> ms.ms_pointer[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->IsosOut = (((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_ms)->ms_pointer[0]);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Storage.IsosOut.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1149
 * 
 *     property ParamsIn:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.map_to_dict_str_dbl(self.s_pointer.ParamsIn)
 * 
 */

static PyObject *__pyx_pf_5BriPy_7Storage_8ParamsIn___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_7Storage_8ParamsIn___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1150
 *     property ParamsIn:
 *         def __get__(self):
 *             return conv.map_to_dict_str_dbl(self.s_pointer.ParamsIn)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict pi):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_str_dbl(((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->ParamsIn)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Storage.ParamsIn.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1152
 *             return conv.map_to_dict_str_dbl(self.s_pointer.ParamsIn)
 * 
 *         def __set__(self, dict pi):             # <<<<<<<<<<<<<<
 *             self.s_pointer.ParamsIn = conv.dict_to_map_str_dbl(pi)
 * 
 */

static int __pyx_pf_5BriPy_7Storage_8ParamsIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_pi); /*proto*/
static int __pyx_pf_5BriPy_7Storage_8ParamsIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_pi) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pi), (&PyDict_Type), 1, "pi", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1153
 * 
 *         def __set__(self, dict pi):
 *             self.s_pointer.ParamsIn = conv.dict_to_map_str_dbl(pi)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->ParamsIn = __pyx_f_13stlconverters_dict_to_map_str_dbl(__pyx_v_pi);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Storage.ParamsIn.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1157
 * 
 *     property ParamsOut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.map_to_dict_str_dbl(self.s_pointer.ParamsOut)
 * 
 */

static PyObject *__pyx_pf_5BriPy_7Storage_9ParamsOut___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_7Storage_9ParamsOut___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1158
 *     property ParamsOut:
 *         def __get__(self):
 *             return conv.map_to_dict_str_dbl(self.s_pointer.ParamsOut)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict po):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_str_dbl(((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->ParamsOut)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Storage.ParamsOut.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1160
 *             return conv.map_to_dict_str_dbl(self.s_pointer.ParamsOut)
 * 
 *         def __set__(self, dict po):             # <<<<<<<<<<<<<<
 *             self.s_pointer.ParamsOut = conv.dict_to_map_str_dbl(po)
 * 
 */

static int __pyx_pf_5BriPy_7Storage_9ParamsOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_po); /*proto*/
static int __pyx_pf_5BriPy_7Storage_9ParamsOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_po) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_po), (&PyDict_Type), 1, "po", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1161
 * 
 *         def __set__(self, dict po):
 *             self.s_pointer.ParamsOut = conv.dict_to_map_str_dbl(po)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->ParamsOut = __pyx_f_13stlconverters_dict_to_map_str_dbl(__pyx_v_po);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Storage.ParamsOut.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1165
 * 
 *     property PassNum:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s_pointer.PassNum
 * 
 */

static PyObject *__pyx_pf_5BriPy_7Storage_7PassNum___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_7Storage_7PassNum___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1166
 *     property PassNum:
 *         def __get__(self):
 *             return self.s_pointer.PassNum             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int pn):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->PassNum); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Storage.PassNum.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1168
 *             return self.s_pointer.PassNum
 * 
 *         def __set__(self, int pn):             # <<<<<<<<<<<<<<
 *             self.s_pointer.PassNum = pn
 * 
 */

static int __pyx_pf_5BriPy_7Storage_7PassNum_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_pn); /*proto*/
static int __pyx_pf_5BriPy_7Storage_7PassNum_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_pn) {
  int __pyx_v_pn;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_pn); {
    __pyx_v_pn = __Pyx_PyInt_AsInt(__pyx_arg_pn); if (unlikely((__pyx_v_pn == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Storage.PassNum.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1169
 * 
 *         def __set__(self, int pn):
 *             self.s_pointer.PassNum = pn             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->PassNum = __pyx_v_pn;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1173
 * 
 *     property params2track:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.cpp_to_py_set_str(self.s_pointer.params2track)
 * 
 */

static PyObject *__pyx_pf_5BriPy_7Storage_12params2track___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_7Storage_12params2track___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1174
 *     property params2track:
 *         def __get__(self):
 *             return conv.cpp_to_py_set_str(self.s_pointer.params2track)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, set p2t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_cpp_to_py_set_str(((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->params2track)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Storage.params2track.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1176
 *             return conv.cpp_to_py_set_str(self.s_pointer.params2track)
 * 
 *         def __set__(self, set p2t):             # <<<<<<<<<<<<<<
 *             self.s_pointer.params2track = conv.py_to_cpp_set_str(p2t)
 * 
 */

static int __pyx_pf_5BriPy_7Storage_12params2track_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_p2t); /*proto*/
static int __pyx_pf_5BriPy_7Storage_12params2track_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_p2t) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p2t), (&PySet_Type), 1, "p2t", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1177
 * 
 *         def __set__(self, set p2t):
 *             self.s_pointer.params2track = conv.py_to_cpp_set_str(p2t)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->params2track = __pyx_f_13stlconverters_py_to_cpp_set_str(__pyx_v_p2t);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Storage.params2track.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1184
 *     #
 * 
 *     def setParams(self):             # <<<<<<<<<<<<<<
 *         """Here the parameters for Storage are set.  For storage, this amounts to just
 *         a "Mass" parameter::
 */

static PyObject *__pyx_pf_5BriPy_7Storage_2setParams(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5BriPy_7Storage_2setParams[] = "Here the parameters for Storage are set.  For storage, this amounts to just\n        a \"Mass\" parameter::\n\n            self.ParamsIn[\"Mass\"]  = self.IsosIn.mass\n            self.ParamsOut[\"Mass\"] = self.IsosOut.mass\n        ";
static PyObject *__pyx_pf_5BriPy_7Storage_2setParams(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("setParams");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1191
 *             self.ParamsOut["Mass"] = self.IsosOut.mass
 *         """
 *         (<cpp_bright.FCComp *> self.s_pointer).setParams()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((FCComp *)((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer)->setParams();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1194
 * 
 * 
 *     def doCalc(self, input=None, decay_time=None):             # <<<<<<<<<<<<<<
 *         """As usual, doCalc sets up the Storage component's input stream and calculates the corresponding
 *         output MassStream.  Here, this amounts to calling bateman() for every nuclide in
 */

static PyObject *__pyx_pf_5BriPy_7Storage_3doCalc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5BriPy_7Storage_3doCalc[] = "As usual, doCalc sets up the Storage component's input stream and calculates the corresponding \n        output MassStream.  Here, this amounts to calling bateman() for every nuclide in \n        IsosIn, for each chain that ends with a nuclide in isos2track.\n\n        This method is public and accessible from Python.\n\n        Args:\n            * input (dict or MassStream): If input is present, it set as the component's \n              IsosIn.  If input is a isotopic dictionary (zzaaam keys, float values), this\n              dictionary is first converted into a MassStream before being set as IsosIn.\n            * decay_time (float): decay_time is set to the time value here prior to any other calculations.  This\n              time has units of seconds.\n\n        Returns:\n            * output (MassStream): IsosOut.\n        ";
static PyObject *__pyx_pf_5BriPy_7Storage_3doCalc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input = 0;
  PyObject *__pyx_v_decay_time = 0;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_in_ms;
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_output = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__input,&__pyx_n_s__decay_time,0};
  __Pyx_RefNannySetupContext("doCalc");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__input);
        if (value) { values[0] = value; kw_args--; }
      }
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__decay_time);
        if (value) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "doCalc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_input = values[0];
    __pyx_v_decay_time = values[1];
  } else {
    __pyx_v_input = ((PyObject *)Py_None);
    __pyx_v_decay_time = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_decay_time = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: __pyx_v_input = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("doCalc", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Storage.doCalc");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_in_ms = ((struct __pyx_obj_11mass_stream_MassStream *)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1212
 *         """
 *         cdef mass_stream.MassStream in_ms
 *         cdef mass_stream.MassStream output = mass_stream.MassStream()             # <<<<<<<<<<<<<<
 * 
 *         if decay_time is None:
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_output = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1214
 *         cdef mass_stream.MassStream output = mass_stream.MassStream()
 * 
 *         if decay_time is None:             # <<<<<<<<<<<<<<
 *             if input is None:
 *                 output.ms_pointer[0] = (<cpp_bright.FCComp *> self.s_pointer).doCalc()
 */
  __pyx_t_2 = (__pyx_v_decay_time == Py_None);
  if (__pyx_t_2) {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1215
 * 
 *         if decay_time is None:
 *             if input is None:             # <<<<<<<<<<<<<<
 *                 output.ms_pointer[0] = (<cpp_bright.FCComp *> self.s_pointer).doCalc()
 *             elif isinstance(input, dict):
 */
    __pyx_t_2 = (__pyx_v_input == Py_None);
    if (__pyx_t_2) {

      /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1216
 *         if decay_time is None:
 *             if input is None:
 *                 output.ms_pointer[0] = (<cpp_bright.FCComp *> self.s_pointer).doCalc()             # <<<<<<<<<<<<<<
 *             elif isinstance(input, dict):
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(conv.dict_to_map_int_dbl(input))
 */
      (__pyx_v_output->ms_pointer[0]) = ((FCComp *)((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer)->doCalc();
      goto __pyx_L7;
    }

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1217
 *             if input is None:
 *                 output.ms_pointer[0] = (<cpp_bright.FCComp *> self.s_pointer).doCalc()
 *             elif isinstance(input, dict):             # <<<<<<<<<<<<<<
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(conv.dict_to_map_int_dbl(input))
 *             elif isinstance(input, mass_stream.MassStream):
 */
    __pyx_t_2 = PyDict_Check(__pyx_v_input); 
    if (__pyx_t_2) {

      /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1218
 *                 output.ms_pointer[0] = (<cpp_bright.FCComp *> self.s_pointer).doCalc()
 *             elif isinstance(input, dict):
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(conv.dict_to_map_int_dbl(input))             # <<<<<<<<<<<<<<
 *             elif isinstance(input, mass_stream.MassStream):
 *                 in_ms = input
 */
      if (!(likely(PyDict_CheckExact(__pyx_v_input))||((__pyx_v_input) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected dict, got %.200s", Py_TYPE(__pyx_v_input)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      (__pyx_v_output->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->doCalc(__pyx_f_13stlconverters_dict_to_map_int_dbl(((PyObject*)__pyx_v_input)));
      goto __pyx_L7;
    }

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1219
 *             elif isinstance(input, dict):
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(conv.dict_to_map_int_dbl(input))
 *             elif isinstance(input, mass_stream.MassStream):             # <<<<<<<<<<<<<<
 *                 in_ms = input
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0])
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_input, ((PyObject*)__pyx_ptype_11mass_stream_MassStream)); 
    if (__pyx_t_2) {

      /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1220
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(conv.dict_to_map_int_dbl(input))
 *             elif isinstance(input, mass_stream.MassStream):
 *                 in_ms = input             # <<<<<<<<<<<<<<
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0])
 *             else:
 */
      if (!(likely(((__pyx_v_input) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_input, __pyx_ptype_11mass_stream_MassStream))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_INCREF(__pyx_v_input);
      __Pyx_DECREF(((PyObject *)__pyx_v_in_ms));
      __pyx_v_in_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_input);

      /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1221
 *             elif isinstance(input, mass_stream.MassStream):
 *                 in_ms = input
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError("'input' must be a MassStream, dict, or None.")
 */
      (__pyx_v_output->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->doCalc((__pyx_v_in_ms->ms_pointer[0]));
      goto __pyx_L7;
    }
    /*else*/ {

      /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1223
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0])
 *             else:
 *                 raise TypeError("'input' must be a MassStream, dict, or None.")             # <<<<<<<<<<<<<<
 *         else:
 *             if input is None:
 */
      __pyx_t_1 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1225
 *                 raise TypeError("'input' must be a MassStream, dict, or None.")
 *         else:
 *             if input is None:             # <<<<<<<<<<<<<<
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(<double> decay_time)
 *             elif isinstance(input, dict):
 */
    __pyx_t_2 = (__pyx_v_input == Py_None);
    if (__pyx_t_2) {

      /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1226
 *         else:
 *             if input is None:
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(<double> decay_time)             # <<<<<<<<<<<<<<
 *             elif isinstance(input, dict):
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(conv.dict_to_map_int_dbl(input), <double> decay_time)
 */
      __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_decay_time); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      (__pyx_v_output->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->doCalc(__pyx_t_3);
      goto __pyx_L8;
    }

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1227
 *             if input is None:
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(<double> decay_time)
 *             elif isinstance(input, dict):             # <<<<<<<<<<<<<<
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(conv.dict_to_map_int_dbl(input), <double> decay_time)
 *             elif isinstance(input, mass_stream.MassStream):
 */
    __pyx_t_2 = PyDict_Check(__pyx_v_input); 
    if (__pyx_t_2) {

      /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1228
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(<double> decay_time)
 *             elif isinstance(input, dict):
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(conv.dict_to_map_int_dbl(input), <double> decay_time)             # <<<<<<<<<<<<<<
 *             elif isinstance(input, mass_stream.MassStream):
 *                 in_ms = input
 */
      if (!(likely(PyDict_CheckExact(__pyx_v_input))||((__pyx_v_input) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected dict, got %.200s", Py_TYPE(__pyx_v_input)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_decay_time); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      (__pyx_v_output->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->doCalc(__pyx_f_13stlconverters_dict_to_map_int_dbl(((PyObject*)__pyx_v_input)), __pyx_t_3);
      goto __pyx_L8;
    }

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1229
 *             elif isinstance(input, dict):
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(conv.dict_to_map_int_dbl(input), <double> decay_time)
 *             elif isinstance(input, mass_stream.MassStream):             # <<<<<<<<<<<<<<
 *                 in_ms = input
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0], <double> decay_time)
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_input, ((PyObject*)__pyx_ptype_11mass_stream_MassStream)); 
    if (__pyx_t_2) {

      /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1230
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(conv.dict_to_map_int_dbl(input), <double> decay_time)
 *             elif isinstance(input, mass_stream.MassStream):
 *                 in_ms = input             # <<<<<<<<<<<<<<
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0], <double> decay_time)
 *             else:
 */
      if (!(likely(((__pyx_v_input) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_input, __pyx_ptype_11mass_stream_MassStream))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_INCREF(__pyx_v_input);
      __Pyx_DECREF(((PyObject *)__pyx_v_in_ms));
      __pyx_v_in_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_input);

      /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1231
 *             elif isinstance(input, mass_stream.MassStream):
 *                 in_ms = input
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0], <double> decay_time)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError("'input' must be a MassStream, dict, or None.")
 */
      __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_decay_time); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      (__pyx_v_output->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Storage *)__pyx_v_self)->s_pointer->doCalc((__pyx_v_in_ms->ms_pointer[0]), __pyx_t_3);
      goto __pyx_L8;
    }
    /*else*/ {

      /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1233
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0], <double> decay_time)
 *             else:
 *                 raise TypeError("'input' must be a MassStream, dict, or None.")             # <<<<<<<<<<<<<<
 * 
 *         return output
 */
      __pyx_t_1 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_7), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L8:;
  }
  __pyx_L6:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1235
 *                 raise TypeError("'input' must be a MassStream, dict, or None.")
 * 
 *         return output             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __pyx_r = ((PyObject *)__pyx_v_output);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Storage.doCalc");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_in_ms);
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1262
 *     cdef cpp_bright.FluencePoint fp
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.fp = cpp_bright.FluencePoint()
 * 
 */

static int __pyx_pf_5BriPy_12FluencePoint___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5BriPy_12FluencePoint___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  struct FluencePoint __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1263
 * 
 *     def __cinit__(self):
 *         self.fp = cpp_bright.FluencePoint()             # <<<<<<<<<<<<<<
 * 
 *     #def __dealloc__(self):
 */
  ((struct __pyx_obj_5BriPy_FluencePoint *)__pyx_v_self)->fp = __pyx_t_1;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1274
 * 
 *     property f:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.fp.f
 * 
 */

static PyObject *__pyx_pf_5BriPy_12FluencePoint_1f___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_12FluencePoint_1f___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1275
 *     property f:
 *         def __get__(self):
 *             return self.fp.f             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5BriPy_FluencePoint *)__pyx_v_self)->fp.f); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.FluencePoint.f.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1277
 *             return self.fp.f
 * 
 *         def __set__(self, int value):             # <<<<<<<<<<<<<<
 *             self.fp.f = value
 * 
 */

static int __pyx_pf_5BriPy_12FluencePoint_1f_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_12FluencePoint_1f_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_AsInt(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1277; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.FluencePoint.f.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1278
 * 
 *         def __set__(self, int value):
 *             self.fp.f = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_FluencePoint *)__pyx_v_self)->fp.f = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1282
 * 
 *     property F:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.fp.F
 * 
 */

static PyObject *__pyx_pf_5BriPy_12FluencePoint_1F___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_12FluencePoint_1F___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1283
 *     property F:
 *         def __get__(self):
 *             return self.fp.F             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_FluencePoint *)__pyx_v_self)->fp.F); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.FluencePoint.F.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1285
 *             return self.fp.F
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.fp.F = value
 * 
 */

static int __pyx_pf_5BriPy_12FluencePoint_1F_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_12FluencePoint_1F_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1285; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.FluencePoint.F.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1286
 * 
 *         def __set__(self, double value):
 *             self.fp.F = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_FluencePoint *)__pyx_v_self)->fp.F = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1290
 * 
 *     property m:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.fp.m
 * 
 */

static PyObject *__pyx_pf_5BriPy_12FluencePoint_1m___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_12FluencePoint_1m___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1291
 *     property m:
 *         def __get__(self):
 *             return self.fp.m             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_FluencePoint *)__pyx_v_self)->fp.m); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.FluencePoint.m.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1293
 *             return self.fp.m
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.fp.m = value
 * 
 */

static int __pyx_pf_5BriPy_12FluencePoint_1m_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_12FluencePoint_1m_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.FluencePoint.m.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1294
 * 
 *         def __set__(self, double value):
 *             self.fp.m = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_FluencePoint *)__pyx_v_self)->fp.m = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1364
 *     cdef cpp_bright.ReactorParameters * rp_pointer
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.rp_pointer = new cpp_bright.ReactorParameters()
 * 
 */

static int __pyx_pf_5BriPy_17ReactorParameters___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5BriPy_17ReactorParameters___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1365
 * 
 *     def __cinit__(self):
 *         self.rp_pointer = new cpp_bright.ReactorParameters()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer = new ReactorParameters();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1367
 *         self.rp_pointer = new cpp_bright.ReactorParameters()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.rp_pointer
 * 
 */

static void __pyx_pf_5BriPy_17ReactorParameters_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_5BriPy_17ReactorParameters_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1368
 * 
 *     def __dealloc__(self):
 *         del self.rp_pointer             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer;

  __Pyx_RefNannyFinishContext();
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1376
 * 
 *     property batches:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.rp_pointer.batches
 * 
 */

static PyObject *__pyx_pf_5BriPy_17ReactorParameters_7batches___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_17ReactorParameters_7batches___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1377
 *     property batches:
 *         def __get__(self):
 *             return self.rp_pointer.batches             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->batches); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.ReactorParameters.batches.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1379
 *             return self.rp_pointer.batches
 * 
 *         def __set__(self, int value):             # <<<<<<<<<<<<<<
 *             self.rp_pointer.batches = value
 * 
 */

static int __pyx_pf_5BriPy_17ReactorParameters_7batches_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_17ReactorParameters_7batches_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_AsInt(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.ReactorParameters.batches.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1380
 * 
 *         def __set__(self, int value):
 *             self.rp_pointer.batches = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->batches = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1384
 * 
 *     property flux:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.rp_pointer.flux
 * 
 */

static PyObject *__pyx_pf_5BriPy_17ReactorParameters_4flux___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_17ReactorParameters_4flux___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1385
 *     property flux:
 *         def __get__(self):
 *             return self.rp_pointer.flux             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->flux); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.ReactorParameters.flux.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1387
 *             return self.rp_pointer.flux
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.rp_pointer.flux = value
 * 
 */

static int __pyx_pf_5BriPy_17ReactorParameters_4flux_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_17ReactorParameters_4flux_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1387; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.ReactorParameters.flux.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1388
 * 
 *         def __set__(self, double value):
 *             self.rp_pointer.flux = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->flux = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1392
 * 
 *     property FuelForm:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.map_to_dict_str_dbl(self.rp_pointer.FuelForm)
 * 
 */

static PyObject *__pyx_pf_5BriPy_17ReactorParameters_8FuelForm___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_17ReactorParameters_8FuelForm___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1393
 *     property FuelForm:
 *         def __get__(self):
 *             return conv.map_to_dict_str_dbl(self.rp_pointer.FuelForm)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_str_dbl(((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->FuelForm)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.ReactorParameters.FuelForm.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1395
 *             return conv.map_to_dict_str_dbl(self.rp_pointer.FuelForm)
 * 
 *         def __set__(self, dict value):             # <<<<<<<<<<<<<<
 *             self.rp_pointer.FuelForm = conv.dict_to_map_str_dbl(value)
 * 
 */

static int __pyx_pf_5BriPy_17ReactorParameters_8FuelForm_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_17ReactorParameters_8FuelForm_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyDict_Type), 1, "value", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1396
 * 
 *         def __set__(self, dict value):
 *             self.rp_pointer.FuelForm = conv.dict_to_map_str_dbl(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->FuelForm = __pyx_f_13stlconverters_dict_to_map_str_dbl(__pyx_v_value);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.ReactorParameters.FuelForm.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1400
 * 
 *     property CoolantForm:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.map_to_dict_str_dbl(self.rp_pointer.CoolantForm)
 * 
 */

static PyObject *__pyx_pf_5BriPy_17ReactorParameters_11CoolantForm___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_17ReactorParameters_11CoolantForm___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1401
 *     property CoolantForm:
 *         def __get__(self):
 *             return conv.map_to_dict_str_dbl(self.rp_pointer.CoolantForm)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_str_dbl(((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->CoolantForm)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.ReactorParameters.CoolantForm.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1403
 *             return conv.map_to_dict_str_dbl(self.rp_pointer.CoolantForm)
 * 
 *         def __set__(self, dict value):             # <<<<<<<<<<<<<<
 *             self.rp_pointer.CoolantForm = conv.dict_to_map_str_dbl(value)
 * 
 */

static int __pyx_pf_5BriPy_17ReactorParameters_11CoolantForm_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_17ReactorParameters_11CoolantForm_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyDict_Type), 1, "value", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1404
 * 
 *         def __set__(self, dict value):
 *             self.rp_pointer.CoolantForm = conv.dict_to_map_str_dbl(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->CoolantForm = __pyx_f_13stlconverters_dict_to_map_str_dbl(__pyx_v_value);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.ReactorParameters.CoolantForm.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1408
 * 
 *     property FuelDensity:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.rp_pointer.FuelDensity
 * 
 */

static PyObject *__pyx_pf_5BriPy_17ReactorParameters_11FuelDensity___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_17ReactorParameters_11FuelDensity___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1409
 *     property FuelDensity:
 *         def __get__(self):
 *             return self.rp_pointer.FuelDensity             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->FuelDensity); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.ReactorParameters.FuelDensity.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1411
 *             return self.rp_pointer.FuelDensity
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.rp_pointer.FuelDensity = value
 * 
 */

static int __pyx_pf_5BriPy_17ReactorParameters_11FuelDensity_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_17ReactorParameters_11FuelDensity_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.ReactorParameters.FuelDensity.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1412
 * 
 *         def __set__(self, double value):
 *             self.rp_pointer.FuelDensity = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->FuelDensity = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1416
 * 
 *     property CoolantDensity:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.rp_pointer.CoolantDensity
 * 
 */

static PyObject *__pyx_pf_5BriPy_17ReactorParameters_14CoolantDensity___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_17ReactorParameters_14CoolantDensity___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1417
 *     property CoolantDensity:
 *         def __get__(self):
 *             return self.rp_pointer.CoolantDensity             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->CoolantDensity); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.ReactorParameters.CoolantDensity.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1419
 *             return self.rp_pointer.CoolantDensity
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.rp_pointer.CoolantDensity = value
 * 
 */

static int __pyx_pf_5BriPy_17ReactorParameters_14CoolantDensity_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_17ReactorParameters_14CoolantDensity_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.ReactorParameters.CoolantDensity.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1420
 * 
 *         def __set__(self, double value):
 *             self.rp_pointer.CoolantDensity = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->CoolantDensity = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1424
 * 
 *     property pnl:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.rp_pointer.pnl
 * 
 */

static PyObject *__pyx_pf_5BriPy_17ReactorParameters_3pnl___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_17ReactorParameters_3pnl___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1425
 *     property pnl:
 *         def __get__(self):
 *             return self.rp_pointer.pnl             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->pnl); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.ReactorParameters.pnl.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1427
 *             return self.rp_pointer.pnl
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.rp_pointer.pnl = value
 * 
 */

static int __pyx_pf_5BriPy_17ReactorParameters_3pnl_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_17ReactorParameters_3pnl_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.ReactorParameters.pnl.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1428
 * 
 *         def __set__(self, double value):
 *             self.rp_pointer.pnl = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->pnl = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1432
 * 
 *     property BUt:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.rp_pointer.BUt
 * 
 */

static PyObject *__pyx_pf_5BriPy_17ReactorParameters_3BUt___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_17ReactorParameters_3BUt___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1433
 *     property BUt:
 *         def __get__(self):
 *             return self.rp_pointer.BUt             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->BUt); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.ReactorParameters.BUt.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1435
 *             return self.rp_pointer.BUt
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.rp_pointer.BUt = value
 * 
 */

static int __pyx_pf_5BriPy_17ReactorParameters_3BUt_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_17ReactorParameters_3BUt_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1435; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.ReactorParameters.BUt.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1436
 * 
 *         def __set__(self, double value):
 *             self.rp_pointer.BUt = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->BUt = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1440
 * 
 *     property useDisadvantage:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.rp_pointer.useDisadvantage
 * 
 */

static PyObject *__pyx_pf_5BriPy_17ReactorParameters_15useDisadvantage___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_17ReactorParameters_15useDisadvantage___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1441
 *     property useDisadvantage:
 *         def __get__(self):
 *             return self.rp_pointer.useDisadvantage             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, bint value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->useDisadvantage); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.ReactorParameters.useDisadvantage.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1443
 *             return self.rp_pointer.useDisadvantage
 * 
 *         def __set__(self, bint value):             # <<<<<<<<<<<<<<
 *             self.rp_pointer.useDisadvantage = value
 * 
 */

static int __pyx_pf_5BriPy_17ReactorParameters_15useDisadvantage_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_17ReactorParameters_15useDisadvantage_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.ReactorParameters.useDisadvantage.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1444
 * 
 *         def __set__(self, bint value):
 *             self.rp_pointer.useDisadvantage = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->useDisadvantage = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1448
 * 
 *     property LatticeType:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef std.string value = self.rp_pointer.LatticeType
 *             return value.c_str()
 */

static PyObject *__pyx_pf_5BriPy_17ReactorParameters_11LatticeType___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_17ReactorParameters_11LatticeType___get__(PyObject *__pyx_v_self) {
  std::string __pyx_v_value;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1449
 *     property LatticeType:
 *         def __get__(self):
 *             cdef std.string value = self.rp_pointer.LatticeType             # <<<<<<<<<<<<<<
 *             return value.c_str()
 * 
 */
  __pyx_v_value = ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->LatticeType;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1450
 *         def __get__(self):
 *             cdef std.string value = self.rp_pointer.LatticeType
 *             return value.c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char * value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_value.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.ReactorParameters.LatticeType.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1452
 *             return value.c_str()
 * 
 *         def __set__(self, char * value):             # <<<<<<<<<<<<<<
 *             self.rp_pointer.LatticeType = std.string(value)
 * 
 */

static int __pyx_pf_5BriPy_17ReactorParameters_11LatticeType_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_17ReactorParameters_11LatticeType_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = PyBytes_AsString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1452; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.ReactorParameters.LatticeType.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1453
 * 
 *         def __set__(self, char * value):
 *             self.rp_pointer.LatticeType = std.string(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->LatticeType = std::string(__pyx_v_value);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1457
 * 
 *     property HydrogenRescale:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.rp_pointer.HydrogenRescale
 * 
 */

static PyObject *__pyx_pf_5BriPy_17ReactorParameters_15HydrogenRescale___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_17ReactorParameters_15HydrogenRescale___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1458
 *     property HydrogenRescale:
 *         def __get__(self):
 *             return self.rp_pointer.HydrogenRescale             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, bint value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->HydrogenRescale); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.ReactorParameters.HydrogenRescale.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1460
 *             return self.rp_pointer.HydrogenRescale
 * 
 *         def __set__(self, bint value):             # <<<<<<<<<<<<<<
 *             self.rp_pointer.HydrogenRescale = value
 * 
 */

static int __pyx_pf_5BriPy_17ReactorParameters_15HydrogenRescale_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_17ReactorParameters_15HydrogenRescale_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1460; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.ReactorParameters.HydrogenRescale.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1461
 * 
 *         def __set__(self, bint value):
 *             self.rp_pointer.HydrogenRescale = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->HydrogenRescale = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1465
 * 
 *     property Radius:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.rp_pointer.Radius
 * 
 */

static PyObject *__pyx_pf_5BriPy_17ReactorParameters_6Radius___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_17ReactorParameters_6Radius___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1466
 *     property Radius:
 *         def __get__(self):
 *             return self.rp_pointer.Radius             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->Radius); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.ReactorParameters.Radius.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1468
 *             return self.rp_pointer.Radius
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.rp_pointer.Radius = value
 * 
 */

static int __pyx_pf_5BriPy_17ReactorParameters_6Radius_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_17ReactorParameters_6Radius_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1468; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.ReactorParameters.Radius.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1469
 * 
 *         def __set__(self, double value):
 *             self.rp_pointer.Radius = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->Radius = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1473
 * 
 *     property Length:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.rp_pointer.Length
 * 
 */

static PyObject *__pyx_pf_5BriPy_17ReactorParameters_6Length___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_17ReactorParameters_6Length___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1474
 *     property Length:
 *         def __get__(self):
 *             return self.rp_pointer.Length             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->Length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.ReactorParameters.Length.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1476
 *             return self.rp_pointer.Length
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.rp_pointer.Length = value
 * 
 */

static int __pyx_pf_5BriPy_17ReactorParameters_6Length_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_17ReactorParameters_6Length_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.ReactorParameters.Length.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1477
 * 
 *         def __set__(self, double value):
 *             self.rp_pointer.Length = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->Length = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1481
 * 
 *     property open_slots:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.rp_pointer.open_slots
 * 
 */

static PyObject *__pyx_pf_5BriPy_17ReactorParameters_10open_slots___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_17ReactorParameters_10open_slots___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1482
 *     property open_slots:
 *         def __get__(self):
 *             return self.rp_pointer.open_slots             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->open_slots); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.ReactorParameters.open_slots.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1484
 *             return self.rp_pointer.open_slots
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.rp_pointer.open_slots = value
 * 
 */

static int __pyx_pf_5BriPy_17ReactorParameters_10open_slots_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_17ReactorParameters_10open_slots_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1484; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.ReactorParameters.open_slots.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1485
 * 
 *         def __set__(self, double value):
 *             self.rp_pointer.open_slots = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->open_slots = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1489
 * 
 *     property total_slots:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.rp_pointer.total_slots
 * 
 */

static PyObject *__pyx_pf_5BriPy_17ReactorParameters_11total_slots___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_17ReactorParameters_11total_slots___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1490
 *     property total_slots:
 *         def __get__(self):
 *             return self.rp_pointer.total_slots             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->total_slots); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.ReactorParameters.total_slots.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1492
 *             return self.rp_pointer.total_slots
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.rp_pointer.total_slots = value
 * 
 */

static int __pyx_pf_5BriPy_17ReactorParameters_11total_slots_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_17ReactorParameters_11total_slots_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1492; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.ReactorParameters.total_slots.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1493
 * 
 *         def __set__(self, double value):
 *             self.rp_pointer.total_slots = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_self)->rp_pointer->total_slots = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1519
 *     cdef cpp_bright.Reactor1G * r1g_pointer
 * 
 *     def __cinit__(self, reactor_parameters=None, params2track=None, char * name=""):             # <<<<<<<<<<<<<<
 *         cdef ReactorParameters rp
 *         cdef std.string cpp_name = std.string(name)
 */

static int __pyx_pf_5BriPy_9Reactor1G___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_reactor_parameters = 0;
  PyObject *__pyx_v_params2track = 0;
  char *__pyx_v_name;
  struct __pyx_obj_5BriPy_ReactorParameters *__pyx_v_rp;
  std::string __pyx_v_cpp_name;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__reactor_parameters,&__pyx_n_s__params2track,&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__reactor_parameters);
        if (value) { values[0] = value; kw_args--; }
      }
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__params2track);
        if (value) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1519; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_reactor_parameters = values[0];
    __pyx_v_params2track = values[1];
    if (values[2]) {
      __pyx_v_name = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1519; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_name = ((char *)__pyx_k_1);
    }
  } else {
    __pyx_v_reactor_parameters = ((PyObject *)Py_None);
    __pyx_v_params2track = ((PyObject *)Py_None);
    __pyx_v_name = ((char *)__pyx_k_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1519; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_params2track = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: __pyx_v_reactor_parameters = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1519; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.__cinit__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_rp = ((struct __pyx_obj_5BriPy_ReactorParameters *)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1521
 *     def __cinit__(self, reactor_parameters=None, params2track=None, char * name=""):
 *         cdef ReactorParameters rp
 *         cdef std.string cpp_name = std.string(name)             # <<<<<<<<<<<<<<
 * 
 *         if (reactor_parameters is None) and (params2track is None):
 */
  __pyx_v_cpp_name = std::string(__pyx_v_name);

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1523
 *         cdef std.string cpp_name = std.string(name)
 * 
 *         if (reactor_parameters is None) and (params2track is None):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer = new cpp_bright.Reactor1G(cpp_name)
 * 
 */
  __pyx_t_1 = (__pyx_v_reactor_parameters == Py_None);
  if (__pyx_t_1) {
    __pyx_t_2 = (__pyx_v_params2track == Py_None);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1524
 * 
 *         if (reactor_parameters is None) and (params2track is None):
 *             self.r1g_pointer = new cpp_bright.Reactor1G(cpp_name)             # <<<<<<<<<<<<<<
 * 
 *         elif (reactor_parameters is None) and isinstance(params2track, set):
 */
    ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer = new Reactor1G(__pyx_v_cpp_name);
    goto __pyx_L6;
  }

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1526
 *             self.r1g_pointer = new cpp_bright.Reactor1G(cpp_name)
 * 
 *         elif (reactor_parameters is None) and isinstance(params2track, set):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer = new cpp_bright.Reactor1G(conv.py_to_cpp_set_str(params2track), cpp_name)
 * 
 */
  __pyx_t_3 = (__pyx_v_reactor_parameters == Py_None);
  if (__pyx_t_3) {
    __pyx_t_1 = PySet_Check(__pyx_v_params2track); 
    __pyx_t_2 = __pyx_t_1;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  if (__pyx_t_2) {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1527
 * 
 *         elif (reactor_parameters is None) and isinstance(params2track, set):
 *             self.r1g_pointer = new cpp_bright.Reactor1G(conv.py_to_cpp_set_str(params2track), cpp_name)             # <<<<<<<<<<<<<<
 * 
 *         elif isinstance(reactor_parameters, ReactorParameters) and (params2track is None):
 */
    if (!(likely(PySet_CheckExact(__pyx_v_params2track))||((__pyx_v_params2track) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected set, got %.200s", Py_TYPE(__pyx_v_params2track)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer = new Reactor1G(__pyx_f_13stlconverters_py_to_cpp_set_str(((PyObject*)__pyx_v_params2track)), __pyx_v_cpp_name);
    goto __pyx_L6;
  }

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1529
 *             self.r1g_pointer = new cpp_bright.Reactor1G(conv.py_to_cpp_set_str(params2track), cpp_name)
 * 
 *         elif isinstance(reactor_parameters, ReactorParameters) and (params2track is None):             # <<<<<<<<<<<<<<
 *             rp = reactor_parameters
 *             self.r1g_pointer = new cpp_bright.Reactor1G(<cpp_bright.ReactorParameters> rp.rp_pointer[0], cpp_name)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_reactor_parameters, ((PyObject*)__pyx_ptype_5BriPy_ReactorParameters)); 
  if (__pyx_t_2) {
    __pyx_t_3 = (__pyx_v_params2track == Py_None);
    __pyx_t_1 = __pyx_t_3;
  } else {
    __pyx_t_1 = __pyx_t_2;
  }
  if (__pyx_t_1) {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1530
 * 
 *         elif isinstance(reactor_parameters, ReactorParameters) and (params2track is None):
 *             rp = reactor_parameters             # <<<<<<<<<<<<<<
 *             self.r1g_pointer = new cpp_bright.Reactor1G(<cpp_bright.ReactorParameters> rp.rp_pointer[0], cpp_name)
 * 
 */
    if (!(likely(((__pyx_v_reactor_parameters) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_reactor_parameters, __pyx_ptype_5BriPy_ReactorParameters))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_INCREF(__pyx_v_reactor_parameters);
    __Pyx_DECREF(((PyObject *)__pyx_v_rp));
    __pyx_v_rp = ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_reactor_parameters);

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1531
 *         elif isinstance(reactor_parameters, ReactorParameters) and (params2track is None):
 *             rp = reactor_parameters
 *             self.r1g_pointer = new cpp_bright.Reactor1G(<cpp_bright.ReactorParameters> rp.rp_pointer[0], cpp_name)             # <<<<<<<<<<<<<<
 * 
 *         elif isinstance(reactor_parameters, ReactorParameters) and isinstance(params2track, set):
 */
    ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer = new Reactor1G((__pyx_v_rp->rp_pointer[0]), __pyx_v_cpp_name);
    goto __pyx_L6;
  }

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1533
 *             self.r1g_pointer = new cpp_bright.Reactor1G(<cpp_bright.ReactorParameters> rp.rp_pointer[0], cpp_name)
 * 
 *         elif isinstance(reactor_parameters, ReactorParameters) and isinstance(params2track, set):             # <<<<<<<<<<<<<<
 *             rp = reactor_parameters
 *             self.r1g_pointer = new cpp_bright.Reactor1G(<cpp_bright.ReactorParameters> rp.rp_pointer[0], conv.py_to_cpp_set_str(params2track), cpp_name)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_reactor_parameters, ((PyObject*)__pyx_ptype_5BriPy_ReactorParameters)); 
  if (__pyx_t_1) {
    __pyx_t_2 = PySet_Check(__pyx_v_params2track); 
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1534
 * 
 *         elif isinstance(reactor_parameters, ReactorParameters) and isinstance(params2track, set):
 *             rp = reactor_parameters             # <<<<<<<<<<<<<<
 *             self.r1g_pointer = new cpp_bright.Reactor1G(<cpp_bright.ReactorParameters> rp.rp_pointer[0], conv.py_to_cpp_set_str(params2track), cpp_name)
 * 
 */
    if (!(likely(((__pyx_v_reactor_parameters) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_reactor_parameters, __pyx_ptype_5BriPy_ReactorParameters))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_INCREF(__pyx_v_reactor_parameters);
    __Pyx_DECREF(((PyObject *)__pyx_v_rp));
    __pyx_v_rp = ((struct __pyx_obj_5BriPy_ReactorParameters *)__pyx_v_reactor_parameters);

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1535
 *         elif isinstance(reactor_parameters, ReactorParameters) and isinstance(params2track, set):
 *             rp = reactor_parameters
 *             self.r1g_pointer = new cpp_bright.Reactor1G(<cpp_bright.ReactorParameters> rp.rp_pointer[0], conv.py_to_cpp_set_str(params2track), cpp_name)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    if (!(likely(PySet_CheckExact(__pyx_v_params2track))||((__pyx_v_params2track) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected set, got %.200s", Py_TYPE(__pyx_v_params2track)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer = new Reactor1G((__pyx_v_rp->rp_pointer[0]), __pyx_f_13stlconverters_py_to_cpp_set_str(((PyObject*)__pyx_v_params2track)), __pyx_v_cpp_name);
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1538
 * 
 *         else:
 *             if reactor_parameters is not None:             # <<<<<<<<<<<<<<
 *                 raise TypeError("The reactor_parameters keyword must be an instance of the ReactorParameters class or None.  Got " + str(type(reactor_parameters)))
 * 
 */
    __pyx_t_3 = (__pyx_v_reactor_parameters != Py_None);
    if (__pyx_t_3) {

      /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1539
 *         else:
 *             if reactor_parameters is not None:
 *                 raise TypeError("The reactor_parameters keyword must be an instance of the ReactorParameters class or None.  Got " + str(type(reactor_parameters)))             # <<<<<<<<<<<<<<
 * 
 *             if params2track is not None:
 */
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_reactor_parameters)));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(__pyx_v_reactor_parameters)));
      __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_reactor_parameters)));
      __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(((PyObject *)__pyx_kp_s_8), __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1541
 *                 raise TypeError("The reactor_parameters keyword must be an instance of the ReactorParameters class or None.  Got " + str(type(reactor_parameters)))
 * 
 *             if params2track is not None:             # <<<<<<<<<<<<<<
 *                 raise TypeError("The params2track keyword must be a set of strings or None.  Got " + str(type(params2track)))
 * 
 */
    __pyx_t_3 = (__pyx_v_params2track != Py_None);
    if (__pyx_t_3) {

      /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1542
 * 
 *             if params2track is not None:
 *                 raise TypeError("The params2track keyword must be a set of strings or None.  Got " + str(type(params2track)))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_params2track)));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(__pyx_v_params2track)));
      __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_params2track)));
      __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(((PyObject *)__pyx_kp_s_9), __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L8;
    }
    __pyx_L8:;
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("BriPy.Reactor1G.__cinit__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_rp);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1544
 *                 raise TypeError("The params2track keyword must be a set of strings or None.  Got " + str(type(params2track)))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.r1g_pointer
 * 
 */

static void __pyx_pf_5BriPy_9Reactor1G_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_5BriPy_9Reactor1G_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1545
 * 
 *     def __dealloc__(self):
 *         del self.r1g_pointer             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer;

  __Pyx_RefNannyFinishContext();
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1555
 * 
 *     property B:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1g_pointer.B
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_1B___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_1B___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1556
 *     property B:
 *         def __get__(self):
 *             return self.r1g_pointer.B             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->B); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.B.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1558
 *             return self.r1g_pointer.B
 * 
 *         def __set__(self, int value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.B = value
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_1B_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_1B_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_AsInt(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.B.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1559
 * 
 *         def __set__(self, int value):
 *             self.r1g_pointer.B = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->B = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1563
 * 
 *     property phi:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1g_pointer.phi
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_3phi___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_3phi___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1564
 *     property phi:
 *         def __get__(self):
 *             return self.r1g_pointer.phi             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->phi); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.phi.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1566
 *             return self.r1g_pointer.phi
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.phi = value
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_3phi_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_3phi_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.phi.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1567
 * 
 *         def __set__(self, double value):
 *             self.r1g_pointer.phi = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->phi = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1571
 * 
 *     property FuelChemicalForm:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.map_to_dict_str_dbl(self.r1g_pointer.FuelChemicalForm)
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_16FuelChemicalForm___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_16FuelChemicalForm___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1572
 *     property FuelChemicalForm:
 *         def __get__(self):
 *             return conv.map_to_dict_str_dbl(self.r1g_pointer.FuelChemicalForm)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_str_dbl(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->FuelChemicalForm)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.FuelChemicalForm.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1574
 *             return conv.map_to_dict_str_dbl(self.r1g_pointer.FuelChemicalForm)
 * 
 *         def __set__(self, dict value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.FuelChemicalForm = conv.dict_to_map_str_dbl(value)
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_16FuelChemicalForm_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_16FuelChemicalForm_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyDict_Type), 1, "value", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1575
 * 
 *         def __set__(self, dict value):
 *             self.r1g_pointer.FuelChemicalForm = conv.dict_to_map_str_dbl(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->FuelChemicalForm = __pyx_f_13stlconverters_dict_to_map_str_dbl(__pyx_v_value);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.FuelChemicalForm.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1579
 * 
 *     property CoolantChemicalForm:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.map_to_dict_str_dbl(self.r1g_pointer.CoolantChemicalForm)
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_19CoolantChemicalForm___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_19CoolantChemicalForm___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1580
 *     property CoolantChemicalForm:
 *         def __get__(self):
 *             return conv.map_to_dict_str_dbl(self.r1g_pointer.CoolantChemicalForm)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_str_dbl(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->CoolantChemicalForm)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.CoolantChemicalForm.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1582
 *             return conv.map_to_dict_str_dbl(self.r1g_pointer.CoolantChemicalForm)
 * 
 *         def __set__(self, dict value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.CoolantChemicalForm = conv.dict_to_map_str_dbl(value)
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_19CoolantChemicalForm_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_19CoolantChemicalForm_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyDict_Type), 1, "value", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1583
 * 
 *         def __set__(self, dict value):
 *             self.r1g_pointer.CoolantChemicalForm = conv.dict_to_map_str_dbl(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->CoolantChemicalForm = __pyx_f_13stlconverters_dict_to_map_str_dbl(__pyx_v_value);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.CoolantChemicalForm.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1587
 * 
 *     property rhoF:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1g_pointer.rhoF
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_4rhoF___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_4rhoF___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1588
 *     property rhoF:
 *         def __get__(self):
 *             return self.r1g_pointer.rhoF             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->rhoF); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.rhoF.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1590
 *             return self.r1g_pointer.rhoF
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.rhoF = value
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_4rhoF_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_4rhoF_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1590; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.rhoF.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1591
 * 
 *         def __set__(self, double value):
 *             self.r1g_pointer.rhoF = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->rhoF = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1595
 * 
 *     property rhoC:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1g_pointer.rhoC
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_4rhoC___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_4rhoC___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1596
 *     property rhoC:
 *         def __get__(self):
 *             return self.r1g_pointer.rhoC             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->rhoC); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.rhoC.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1598
 *             return self.r1g_pointer.rhoC
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.rhoC = value
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_4rhoC_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_4rhoC_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1598; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.rhoC.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1599
 * 
 *         def __set__(self, double value):
 *             self.r1g_pointer.rhoC = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->rhoC = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1603
 * 
 *     property P_NL:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1g_pointer.P_NL
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_4P_NL___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_4P_NL___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1604
 *     property P_NL:
 *         def __get__(self):
 *             return self.r1g_pointer.P_NL             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->P_NL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.P_NL.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1606
 *             return self.r1g_pointer.P_NL
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.P_NL = value
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_4P_NL_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_4P_NL_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1606; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.P_NL.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1607
 * 
 *         def __set__(self, double value):
 *             self.r1g_pointer.P_NL = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->P_NL = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1611
 * 
 *     property TargetBU:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1g_pointer.TargetBU
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_8TargetBU___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_8TargetBU___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1612
 *     property TargetBU:
 *         def __get__(self):
 *             return self.r1g_pointer.TargetBU             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->TargetBU); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.TargetBU.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1614
 *             return self.r1g_pointer.TargetBU
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.TargetBU = value
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_8TargetBU_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_8TargetBU_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1614; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.TargetBU.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1615
 * 
 *         def __set__(self, double value):
 *             self.r1g_pointer.TargetBU = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->TargetBU = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1619
 * 
 *     property useZeta:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1g_pointer.useZeta
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_7useZeta___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_7useZeta___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1620
 *     property useZeta:
 *         def __get__(self):
 *             return self.r1g_pointer.useZeta             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, bint value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->useZeta); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.useZeta.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1622
 *             return self.r1g_pointer.useZeta
 * 
 *         def __set__(self, bint value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.useZeta = value
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_7useZeta_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_7useZeta_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1622; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.useZeta.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1623
 * 
 *         def __set__(self, bint value):
 *             self.r1g_pointer.useZeta = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->useZeta = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1627
 * 
 *     property Lattice:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef std.string value = self.r1g_pointer.Lattice
 *             return value.c_str()
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_7Lattice___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_7Lattice___get__(PyObject *__pyx_v_self) {
  std::string __pyx_v_value;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1628
 *     property Lattice:
 *         def __get__(self):
 *             cdef std.string value = self.r1g_pointer.Lattice             # <<<<<<<<<<<<<<
 *             return value.c_str()
 * 
 */
  __pyx_v_value = ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->Lattice;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1629
 *         def __get__(self):
 *             cdef std.string value = self.r1g_pointer.Lattice
 *             return value.c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char * value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_value.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.Lattice.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1631
 *             return value.c_str()
 * 
 *         def __set__(self, char * value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.Lattice = std.string(value)
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_7Lattice_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_7Lattice_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = PyBytes_AsString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1631; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.Lattice.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1632
 * 
 *         def __set__(self, char * value):
 *             self.r1g_pointer.Lattice = std.string(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->Lattice = std::string(__pyx_v_value);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1636
 * 
 *     property H_XS_Rescale:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1g_pointer.H_XS_Rescale
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_12H_XS_Rescale___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_12H_XS_Rescale___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1637
 *     property H_XS_Rescale:
 *         def __get__(self):
 *             return self.r1g_pointer.H_XS_Rescale             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, bint value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->H_XS_Rescale); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.H_XS_Rescale.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1639
 *             return self.r1g_pointer.H_XS_Rescale
 * 
 *         def __set__(self, bint value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.H_XS_Rescale = value
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_12H_XS_Rescale_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_12H_XS_Rescale_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1639; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.H_XS_Rescale.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1640
 * 
 *         def __set__(self, bint value):
 *             self.r1g_pointer.H_XS_Rescale = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->H_XS_Rescale = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1644
 * 
 *     property r:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1g_pointer.r
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_1r___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_1r___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1645
 *     property r:
 *         def __get__(self):
 *             return self.r1g_pointer.r             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->r); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.r.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1647
 *             return self.r1g_pointer.r
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.r = value
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_1r_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_1r_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.r.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1648
 * 
 *         def __set__(self, double value):
 *             self.r1g_pointer.r = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->r = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1652
 * 
 *     property l:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1g_pointer.l
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_1l___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_1l___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1653
 *     property l:
 *         def __get__(self):
 *             return self.r1g_pointer.l             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->l); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.l.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1655
 *             return self.r1g_pointer.l
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.l = value
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_1l_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_1l_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.l.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1656
 * 
 *         def __set__(self, double value):
 *             self.r1g_pointer.l = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->l = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1660
 * 
 *     property S_O:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1g_pointer.S_O
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_3S_O___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_3S_O___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1661
 *     property S_O:
 *         def __get__(self):
 *             return self.r1g_pointer.S_O             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->S_O); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.S_O.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1663
 *             return self.r1g_pointer.S_O
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.S_O = value
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_3S_O_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_3S_O_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1663; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.S_O.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1664
 * 
 *         def __set__(self, double value):
 *             self.r1g_pointer.S_O = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->S_O = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1668
 * 
 *     property S_T:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1g_pointer.S_T
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_3S_T___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_3S_T___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1669
 *     property S_T:
 *         def __get__(self):
 *             return self.r1g_pointer.S_T             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->S_T); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.S_T.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1671
 *             return self.r1g_pointer.S_T
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.S_T = value
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_3S_T_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_3S_T_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1671; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.S_T.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1672
 * 
 *         def __set__(self, double value):
 *             self.r1g_pointer.S_T = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->S_T = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1676
 * 
 *     property VF:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1g_pointer.VF
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_2VF___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_2VF___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1677
 *     property VF:
 *         def __get__(self):
 *             return self.r1g_pointer.VF             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->VF); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.VF.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1679
 *             return self.r1g_pointer.VF
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.VF = value
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_2VF_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_2VF_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1679; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.VF.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1680
 * 
 *         def __set__(self, double value):
 *             self.r1g_pointer.VF = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->VF = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1684
 * 
 *     property VC:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1g_pointer.VC
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_2VC___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_2VC___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1685
 *     property VC:
 *         def __get__(self):
 *             return self.r1g_pointer.VC             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->VC); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.VC.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1687
 *             return self.r1g_pointer.VC
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.VC = value
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_2VC_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_2VC_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1687; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.VC.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1688
 * 
 *         def __set__(self, double value):
 *             self.r1g_pointer.VC = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->VC = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1692
 * 
 *     property libfile:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef std.string value = self.r1g_pointer.libfile
 *             return value.c_str()
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_7libfile___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_7libfile___get__(PyObject *__pyx_v_self) {
  std::string __pyx_v_value;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1693
 *     property libfile:
 *         def __get__(self):
 *             cdef std.string value = self.r1g_pointer.libfile             # <<<<<<<<<<<<<<
 *             return value.c_str()
 * 
 */
  __pyx_v_value = ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->libfile;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1694
 *         def __get__(self):
 *             cdef std.string value = self.r1g_pointer.libfile
 *             return value.c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char * value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_value.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.libfile.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1696
 *             return value.c_str()
 * 
 *         def __set__(self, char * value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.libfile = std.string(value)
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_7libfile_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_7libfile_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_value); {
    __pyx_v_value = PyBytes_AsString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.libfile.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1697
 * 
 *         def __set__(self, char * value):
 *             self.r1g_pointer.libfile = std.string(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->libfile = std::string(__pyx_v_value);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1701
 * 
 *     property F:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.vector_to_array_1d_dbl(self.r1g_pointer.F)
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_1F___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_1F___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1702
 *     property F:
 *         def __get__(self):
 *             return conv.vector_to_array_1d_dbl(self.r1g_pointer.F)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, np.ndarray[np.float64_t, ndim=1] value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_vector_to_array_1d_dbl(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->F)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.F.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1704
 *             return conv.vector_to_array_1d_dbl(self.r1g_pointer.F)
 * 
 *         def __set__(self, np.ndarray[np.float64_t, ndim=1] value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.F = conv.array_to_vector_1d_dbl(value)
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_1F_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_1F_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  Py_buffer __pyx_bstruct_value;
  Py_ssize_t __pyx_bstride_0_value = 0;
  Py_ssize_t __pyx_bshape_0_value = 0;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  __pyx_bstruct_value.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_5numpy_ndarray, 1, "value", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_value, (PyObject*)__pyx_v_value, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_value = __pyx_bstruct_value.strides[0];
  __pyx_bshape_0_value = __pyx_bstruct_value.shape[0];

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1705
 * 
 *         def __set__(self, np.ndarray[np.float64_t, ndim=1] value):
 *             self.r1g_pointer.F = conv.array_to_vector_1d_dbl(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->F = __pyx_f_13stlconverters_array_to_vector_1d_dbl(((PyArrayObject *)__pyx_v_value));

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_value);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("BriPy.Reactor1G.F.__set__");
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_value);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1709
 * 
 *     property BUi_F_:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.map_to_dict_int_array_to_vector_1d_dbl(self.r1g_pointer.BUi_F_)
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_6BUi_F____get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_6BUi_F____get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1710
 *     property BUi_F_:
 *         def __get__(self):
 *             return conv.map_to_dict_int_array_to_vector_1d_dbl(self.r1g_pointer.BUi_F_)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_int_array_to_vector_1d_dbl(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->BUi_F_)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.BUi_F_.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1712
 *             return conv.map_to_dict_int_array_to_vector_1d_dbl(self.r1g_pointer.BUi_F_)
 * 
 *         def __set__(self, dict value):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.BUi_F_ = conv.dict_to_map_int_vector_to_array_1d_dbl(value)
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_6BUi_F__1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_6BUi_F__1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyDict_Type), 1, "value", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1713
 * 
 *         def __set__(self, dict value):
 *             self.r1g_pointer.BUi_F_ = conv.dict_to_map_int_vector_to_array_1d_dbl(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->BUi_F_ = __pyx_f_13stlconverters_dict_to_map_int_vector_to_array_1d_dbl(__pyx_v_value);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.BUi_F_.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1719
 * 
 *     property name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef std.string n = self.r1g_pointer.name
 *             return n.c_str()
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_4name___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_4name___get__(PyObject *__pyx_v_self) {
  std::string __pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1720
 *     property name:
 *         def __get__(self):
 *             cdef std.string n = self.r1g_pointer.name             # <<<<<<<<<<<<<<
 *             return n.c_str()
 * 
 */
  __pyx_v_n = ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->name;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1721
 *         def __get__(self):
 *             cdef std.string n = self.r1g_pointer.name
 *             return n.c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char * n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_n.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.name.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1723
 *             return n.c_str()
 * 
 *         def __set__(self, char * n):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.name = std.string(n)
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_4name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_4name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  char *__pyx_v_n;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_n); {
    __pyx_v_n = PyBytes_AsString(__pyx_arg_n); if (unlikely((!__pyx_v_n) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1723; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.name.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1724
 * 
 *         def __set__(self, char * n):
 *             self.r1g_pointer.name = std.string(n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->name = std::string(__pyx_v_n);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1728
 * 
 *     property natural_name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef std.string n = self.r1g_pointer.natural_name
 *             return n.c_str()
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_12natural_name___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_12natural_name___get__(PyObject *__pyx_v_self) {
  std::string __pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1729
 *     property natural_name:
 *         def __get__(self):
 *             cdef std.string n = self.r1g_pointer.natural_name             # <<<<<<<<<<<<<<
 *             return n.c_str()
 * 
 */
  __pyx_v_n = ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->natural_name;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1730
 *         def __get__(self):
 *             cdef std.string n = self.r1g_pointer.natural_name
 *             return n.c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char * n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_n.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.natural_name.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1732
 *             return n.c_str()
 * 
 *         def __set__(self, char * n):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.natural_name = std.string(n)
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_12natural_name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_12natural_name_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  char *__pyx_v_n;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_n); {
    __pyx_v_n = PyBytes_AsString(__pyx_arg_n); if (unlikely((!__pyx_v_n) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1732; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.natural_name.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1733
 * 
 *         def __set__(self, char * n):
 *             self.r1g_pointer.natural_name = std.string(n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->natural_name = std::string(__pyx_v_n);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1737
 * 
 *     property IsosIn:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.r1g_pointer.IsosIn
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_6IsosIn___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_6IsosIn___get__(PyObject *__pyx_v_self) {
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1738
 *     property IsosIn:
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()             # <<<<<<<<<<<<<<
 *             py_ms.ms_pointer[0] = self.r1g_pointer.IsosIn
 *             return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1739
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.r1g_pointer.IsosIn             # <<<<<<<<<<<<<<
 *             return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->IsosIn;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1740
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.r1g_pointer.IsosIn
 *             return py_ms             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.IsosIn.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1742
 *             return py_ms
 * 
 *         def __set__(self, mass_stream.MassStream ms):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.IsosIn = <cpp_mass_stream.MassStream> ms.ms_pointer[0]
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_6IsosIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_6IsosIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ms), __pyx_ptype_11mass_stream_MassStream, 1, "ms", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1743
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 *             self.r1g_pointer.IsosIn = <cpp_mass_stream.MassStream> ms.ms_pointer[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->IsosIn = (((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_ms)->ms_pointer[0]);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.IsosIn.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1747
 * 
 *     property IsosOut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.r1g_pointer.IsosOut
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_7IsosOut___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_7IsosOut___get__(PyObject *__pyx_v_self) {
  struct __pyx_obj_11mass_stream_MassStream *__pyx_v_py_ms = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1748
 *     property IsosOut:
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()             # <<<<<<<<<<<<<<
 *             py_ms.ms_pointer[0] = self.r1g_pointer.IsosOut
 *             return py_ms
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_11mass_stream_MassStream)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_ms = ((struct __pyx_obj_11mass_stream_MassStream *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1749
 *         def __get__(self):
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.r1g_pointer.IsosOut             # <<<<<<<<<<<<<<
 *             return py_ms
 * 
 */
  (__pyx_v_py_ms->ms_pointer[0]) = ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->IsosOut;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1750
 *             cdef mass_stream.MassStream py_ms = mass_stream.MassStream()
 *             py_ms.ms_pointer[0] = self.r1g_pointer.IsosOut
 *             return py_ms             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_ms));
  __pyx_r = ((PyObject *)__pyx_v_py_ms);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.IsosOut.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1752
 *             return py_ms
 * 
 *         def __set__(self, mass_stream.MassStream ms):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.IsosOut = <cpp_mass_stream.MassStream> ms.ms_pointer[0]
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_7IsosOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_7IsosOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ms) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ms), __pyx_ptype_11mass_stream_MassStream, 1, "ms", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1753
 * 
 *         def __set__(self, mass_stream.MassStream ms):
 *             self.r1g_pointer.IsosOut = <cpp_mass_stream.MassStream> ms.ms_pointer[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->IsosOut = (((struct __pyx_obj_11mass_stream_MassStream *)__pyx_v_ms)->ms_pointer[0]);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.IsosOut.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1757
 * 
 *     property ParamsIn:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.map_to_dict_str_dbl(self.r1g_pointer.ParamsIn)
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_8ParamsIn___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_8ParamsIn___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1758
 *     property ParamsIn:
 *         def __get__(self):
 *             return conv.map_to_dict_str_dbl(self.r1g_pointer.ParamsIn)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict pi):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_str_dbl(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->ParamsIn)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.ParamsIn.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1760
 *             return conv.map_to_dict_str_dbl(self.r1g_pointer.ParamsIn)
 * 
 *         def __set__(self, dict pi):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.ParamsIn = conv.dict_to_map_str_dbl(pi)
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_8ParamsIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_pi); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_8ParamsIn_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_pi) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pi), (&PyDict_Type), 1, "pi", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1761
 * 
 *         def __set__(self, dict pi):
 *             self.r1g_pointer.ParamsIn = conv.dict_to_map_str_dbl(pi)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->ParamsIn = __pyx_f_13stlconverters_dict_to_map_str_dbl(__pyx_v_pi);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.ParamsIn.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1765
 * 
 *     property ParamsOut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.map_to_dict_str_dbl(self.r1g_pointer.ParamsOut)
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_9ParamsOut___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_9ParamsOut___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1766
 *     property ParamsOut:
 *         def __get__(self):
 *             return conv.map_to_dict_str_dbl(self.r1g_pointer.ParamsOut)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict po):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_map_to_dict_str_dbl(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->ParamsOut)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.ParamsOut.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1768
 *             return conv.map_to_dict_str_dbl(self.r1g_pointer.ParamsOut)
 * 
 *         def __set__(self, dict po):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.ParamsOut = conv.dict_to_map_str_dbl(po)
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_9ParamsOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_po); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_9ParamsOut_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_po) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_po), (&PyDict_Type), 1, "po", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1769
 * 
 *         def __set__(self, dict po):
 *             self.r1g_pointer.ParamsOut = conv.dict_to_map_str_dbl(po)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->ParamsOut = __pyx_f_13stlconverters_dict_to_map_str_dbl(__pyx_v_po);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.ParamsOut.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1773
 * 
 *     property PassNum:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1g_pointer.PassNum
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_7PassNum___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_7PassNum___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1774
 *     property PassNum:
 *         def __get__(self):
 *             return self.r1g_pointer.PassNum             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int pn):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->PassNum); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.PassNum.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1776
 *             return self.r1g_pointer.PassNum
 * 
 *         def __set__(self, int pn):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.PassNum = pn
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_7PassNum_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_pn); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_7PassNum_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_pn) {
  int __pyx_v_pn;
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_pn); {
    __pyx_v_pn = __Pyx_PyInt_AsInt(__pyx_arg_pn); if (unlikely((__pyx_v_pn == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1776; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.PassNum.__set__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1777
 * 
 *         def __set__(self, int pn):
 *             self.r1g_pointer.PassNum = pn             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->PassNum = __pyx_v_pn;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1781
 * 
 *     property params2track:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return conv.cpp_to_py_set_str(self.r1g_pointer.params2track)
 * 
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_12params2track___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5BriPy_9Reactor1G_12params2track___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1782
 *     property params2track:
 *         def __get__(self):
 *             return conv.cpp_to_py_set_str(self.r1g_pointer.params2track)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, set p2t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_13stlconverters_cpp_to_py_set_str(((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->params2track)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1782; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("BriPy.Reactor1G.params2track.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1784
 *             return conv.cpp_to_py_set_str(self.r1g_pointer.params2track)
 * 
 *         def __set__(self, set p2t):             # <<<<<<<<<<<<<<
 *             self.r1g_pointer.params2track = conv.py_to_cpp_set_str(p2t)
 * 
 */

static int __pyx_pf_5BriPy_9Reactor1G_12params2track_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_p2t); /*proto*/
static int __pyx_pf_5BriPy_9Reactor1G_12params2track_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_p2t) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p2t), (&PySet_Type), 1, "p2t", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1785
 * 
 *         def __set__(self, set p2t):
 *             self.r1g_pointer.params2track = conv.py_to_cpp_set_str(p2t)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->params2track = __pyx_f_13stlconverters_py_to_cpp_set_str(__pyx_v_p2t);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.params2track.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1792
 *     #
 * 
 *     def loadLib(self, char * libfile="reactor.h5"):             # <<<<<<<<<<<<<<
 *         """This method finds the HDF5 library for this reactor and extracts the necessary information from it.
 *         This method is typically called by the constructor of the child reactor type object.  It must be
 */

static PyObject *__pyx_pf_5BriPy_9Reactor1G_2loadLib(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5BriPy_9Reactor1G_2loadLib[] = "This method finds the HDF5 library for this reactor and extracts the necessary information from it.\n        This method is typically called by the constructor of the child reactor type object.  It must be \n        called before attempting to do any real computation.\n\n        Args: \n            * libfile (str): Path to the reactor library.\n        ";
static PyObject *__pyx_pf_5BriPy_9Reactor1G_2loadLib(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_libfile;
  PyObject *__pyx_r = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__libfile,0};
  __Pyx_RefNannySetupContext("loadLib");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__libfile);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "loadLib") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1792; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_libfile = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_libfile) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1792; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_libfile = ((char *)__pyx_k_10);
    }
  } else {
    __pyx_v_libfile = ((char *)__pyx_k_10);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_libfile = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_libfile) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1792; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("loadLib", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1792; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("BriPy.Reactor1G.loadLib");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1800
 *             * libfile (str): Path to the reactor library.
 *         """
 *         self.r1g_pointer.loadLib(std.string(libfile))             # <<<<<<<<<<<<<<
 */
  ((struct __pyx_obj_5BriPy_Reactor1G *)__pyx_v_self)->r1g_pointer->loadLib(std::string(__pyx_v_libfile));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":188
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

static CYTHON_UNUSED int __pyx_pf_5numpy_7ndarray___getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pf_5numpy_7ndarray___getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("__getbuffer__");
  if (__pyx_v_info == NULL) return 0;
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "numpy.pxd":194
 *             # of flags
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "numpy.pxd":195
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "numpy.pxd":197
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(((PyArrayObject *)__pyx_v_self));

  /* "numpy.pxd":199
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = ((sizeof(npy_intp)) != (sizeof(Py_ssize_t)));
  if (__pyx_t_1) {

    /* "numpy.pxd":200
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "numpy.pxd":202
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L5:;

  /* "numpy.pxd":204
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS);
  if (__pyx_t_1) {

    /* "numpy.pxd":205
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
    __pyx_t_2 = (!PyArray_CHKFLAGS(((PyArrayObject *)__pyx_v_self), NPY_C_CONTIGUOUS));
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "numpy.pxd":206
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_12), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "numpy.pxd":208
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_3 = ((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS);
  if (__pyx_t_3) {

    /* "numpy.pxd":209
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
    __pyx_t_1 = (!PyArray_CHKFLAGS(((PyArrayObject *)__pyx_v_self), NPY_F_CONTIGUOUS));
    __pyx_t_2 = __pyx_t_1;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  if (__pyx_t_2) {

    /* "numpy.pxd":210
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_14), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "numpy.pxd":212
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(((PyArrayObject *)__pyx_v_self));

  /* "numpy.pxd":213
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info. This is allocated
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "numpy.pxd":214
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info. This is allocated
 *                 # as one block, strides first.
 */
  if (__pyx_v_copy_shape) {

    /* "numpy.pxd":217
 *                 # Allocate new buffer for strides and shape info. This is allocated
 *                 # as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * __pyx_v_ndim) * 2)));

    /* "numpy.pxd":218
 *                 # as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "numpy.pxd":219
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_5 = __pyx_v_ndim;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "numpy.pxd":220
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(((PyArrayObject *)__pyx_v_self))[__pyx_v_i]);

      /* "numpy.pxd":221
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(((PyArrayObject *)__pyx_v_self))[__pyx_v_i]);
    }
    goto __pyx_L8;
  }
  /*else*/ {

    /* "numpy.pxd":223
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(((PyArrayObject *)__pyx_v_self)));

    /* "numpy.pxd":224
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(((PyArrayObject *)__pyx_v_self)));
  }
  __pyx_L8:;

  /* "numpy.pxd":225
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "numpy.pxd":226
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(((PyArrayObject *)__pyx_v_self));

  /* "numpy.pxd":227
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!PyArray_ISWRITEABLE(((PyArrayObject *)__pyx_v_self)));

  /* "numpy.pxd":230
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "numpy.pxd":231
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __Pyx_INCREF(((PyObject *)((PyArrayObject *)__pyx_v_self)->descr));
  __pyx_v_descr = ((PyArrayObject *)__pyx_v_self)->descr;

  /* "numpy.pxd":235
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "numpy.pxd":237
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = (!__pyx_v_hasfields);
  if (__pyx_t_2) {
    __pyx_t_3 = (!__pyx_v_copy_shape);
    __pyx_t_1 = __pyx_t_3;
  } else {
    __pyx_t_1 = __pyx_t_2;
  }
  if (__pyx_t_1) {

    /* "numpy.pxd":239
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L11;
  }
  /*else*/ {

    /* "numpy.pxd":242
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = __pyx_v_self;
  }
  __pyx_L11:;

  /* "numpy.pxd":244
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == '>' and little_endian) or
 */
  __pyx_t_1 = (!__pyx_v_hasfields);
  if (__pyx_t_1) {

    /* "numpy.pxd":245
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == '>' and little_endian) or
 *                     (descr.byteorder == '<' and not little_endian)):
 */
    __pyx_v_t = __pyx_v_descr->type_num;

    /* "numpy.pxd":246
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == '>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == '<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_1 = (__pyx_v_descr->byteorder == '>');
    if (__pyx_t_1) {
      __pyx_t_2 = __pyx_v_little_endian;
    } else {
      __pyx_t_2 = __pyx_t_1;
    }
    if (!__pyx_t_2) {

      /* "numpy.pxd":247
 *                 t = descr.type_num
 *                 if ((descr.byteorder == '>' and little_endian) or
 *                     (descr.byteorder == '<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
      __pyx_t_1 = (__pyx_v_descr->byteorder == '<');
      if (__pyx_t_1) {
        __pyx_t_3 = (!__pyx_v_little_endian);
        __pyx_t_7 = __pyx_t_3;
      } else {
        __pyx_t_7 = __pyx_t_1;
      }
      __pyx_t_1 = __pyx_t_7;
    } else {
      __pyx_t_1 = __pyx_t_2;
    }
    if (__pyx_t_1) {

      /* "numpy.pxd":248
 *                 if ((descr.byteorder == '>' and little_endian) or
 *                     (descr.byteorder == '<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_16), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L13;
    }
    __pyx_L13:;

    /* "numpy.pxd":249
 *                     (descr.byteorder == '<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_BYTE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__b;
      goto __pyx_L14;
    }

    /* "numpy.pxd":250
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_UBYTE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__B;
      goto __pyx_L14;
    }

    /* "numpy.pxd":251
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_SHORT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__h;
      goto __pyx_L14;
    }

    /* "numpy.pxd":252
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_USHORT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__H;
      goto __pyx_L14;
    }

    /* "numpy.pxd":253
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_INT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__i;
      goto __pyx_L14;
    }

    /* "numpy.pxd":254
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_UINT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__I;
      goto __pyx_L14;
    }

    /* "numpy.pxd":255
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_LONG);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__l;
      goto __pyx_L14;
    }

    /* "numpy.pxd":256
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_ULONG);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__L;
      goto __pyx_L14;
    }

    /* "numpy.pxd":257
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_LONGLONG);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__q;
      goto __pyx_L14;
    }

    /* "numpy.pxd":258
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_ULONGLONG);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__Q;
      goto __pyx_L14;
    }

    /* "numpy.pxd":259
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_FLOAT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__f;
      goto __pyx_L14;
    }

    /* "numpy.pxd":260
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_DOUBLE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__d;
      goto __pyx_L14;
    }

    /* "numpy.pxd":261
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_LONGDOUBLE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__g;
      goto __pyx_L14;
    }

    /* "numpy.pxd":262
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_CFLOAT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__Zf;
      goto __pyx_L14;
    }

    /* "numpy.pxd":263
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_CDOUBLE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__Zd;
      goto __pyx_L14;
    }

    /* "numpy.pxd":264
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
    __pyx_t_1 = (__pyx_v_t == NPY_CLONGDOUBLE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__Zg;
      goto __pyx_L14;
    }

    /* "numpy.pxd":265
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    __pyx_t_1 = (__pyx_v_t == NPY_OBJECT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__O;
      goto __pyx_L14;
    }
    /*else*/ {

      /* "numpy.pxd":267
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_4 = PyInt_FromLong(__pyx_v_t); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyNumber_Remainder(((PyObject *)__pyx_kp_u_17), __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_8));
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_8));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_8));
      __pyx_t_8 = 0;
      __pyx_t_8 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L14:;

    /* "numpy.pxd":268
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "numpy.pxd":269
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L12;
  }
  /*else*/ {

    /* "numpy.pxd":271
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = '^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "numpy.pxd":272
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = '^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "numpy.pxd":273
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = '^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "numpy.pxd":276
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)             # <<<<<<<<<<<<<<
 *                 f[0] = 0 # Terminate format string
 * 
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_9;

    /* "numpy.pxd":277
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = 0 # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = 0;
  }
  __pyx_L12:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__");
  __pyx_r = -1;
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":279
 *                 f[0] = 0 # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

static CYTHON_UNUSED void __pyx_pf_5numpy_7ndarray_1__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pf_5numpy_7ndarray_1__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__");

  /* "numpy.pxd":280
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = PyArray_HASFIELDS(((PyArrayObject *)__pyx_v_self));
  if (__pyx_t_1) {

    /* "numpy.pxd":281
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "numpy.pxd":282
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = ((sizeof(npy_intp)) != (sizeof(Py_ssize_t)));
  if (__pyx_t_1) {

    /* "numpy.pxd":283
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L6;
  }
  __pyx_L6:;

  __Pyx_RefNannyFinishContext();
}

/* "numpy.pxd":756
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1");

  /* "numpy.pxd":757
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":759
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2");

  /* "numpy.pxd":760
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":762
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3");

  /* "numpy.pxd":763
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":765
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4");

  /* "numpy.pxd":766
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":768
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5");

  /* "numpy.pxd":769
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":771
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields;
  PyObject *__pyx_v_childname;
  PyObject *__pyx_v_new_offset;
  PyObject *__pyx_v_t;
  char *__pyx_r;
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  long __pyx_t_10;
  char *__pyx_t_11;
  __Pyx_RefNannySetupContext("_util_dtypestring");
  __pyx_v_child = ((PyArray_Descr *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_fields = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_childname = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_new_offset = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_t = Py_None; __Pyx_INCREF(Py_None);

  /* "numpy.pxd":778
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "numpy.pxd":779
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "numpy.pxd":782
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 782; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = 0; __pyx_t_2 = ((PyObject *)__pyx_v_descr->names); __Pyx_INCREF(__pyx_t_2);
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++;
    __Pyx_DECREF(__pyx_v_childname);
    __pyx_v_childname = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "numpy.pxd":783
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 783; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected tuple, got %.200s", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 783; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_v_fields));
    __pyx_v_fields = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "numpy.pxd":784
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 */
    if (likely(((PyObject *)__pyx_v_fields) != Py_None) && likely(PyTuple_GET_SIZE(((PyObject *)__pyx_v_fields)) == 2)) {
      PyObject* tuple = ((PyObject *)__pyx_v_fields);
      __pyx_t_3 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_4 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_v_child));
      __pyx_v_child = ((PyArray_Descr *)__pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_v_new_offset);
      __pyx_v_new_offset = __pyx_t_4;
      __pyx_t_4 = 0;
    } else {
      __Pyx_UnpackTupleError(((PyObject *)__pyx_v_fields), 2);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "numpy.pxd":786
 *         child, new_offset = fields
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = PyInt_FromLong((__pyx_v_end - __pyx_v_f)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyInt_FromLong((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_15, Py_LT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "numpy.pxd":787
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == '>' and little_endian) or
 */
      __pyx_t_5 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_19), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "numpy.pxd":789
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == '>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == '<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_6 = (__pyx_v_child->byteorder == '>');
    if (__pyx_t_6) {
      __pyx_t_7 = __pyx_v_little_endian;
    } else {
      __pyx_t_7 = __pyx_t_6;
    }
    if (!__pyx_t_7) {

      /* "numpy.pxd":790
 * 
 *         if ((child.byteorder == '>' and little_endian) or
 *             (child.byteorder == '<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
      __pyx_t_6 = (__pyx_v_child->byteorder == '<');
      if (__pyx_t_6) {
        __pyx_t_8 = (!__pyx_v_little_endian);
        __pyx_t_9 = __pyx_t_8;
      } else {
        __pyx_t_9 = __pyx_t_6;
      }
      __pyx_t_6 = __pyx_t_9;
    } else {
      __pyx_t_6 = __pyx_t_7;
    }
    if (__pyx_t_6) {

      /* "numpy.pxd":791
 *         if ((child.byteorder == '>' and little_endian) or
 *             (child.byteorder == '<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_20), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "numpy.pxd":801
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_5 = PyInt_FromLong((__pyx_v_offset[0])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_v_new_offset, Py_LT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_6) break;

      /* "numpy.pxd":802
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "numpy.pxd":803
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "numpy.pxd":804
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_10 = 0;
      (__pyx_v_offset[__pyx_t_10]) = ((__pyx_v_offset[__pyx_t_10]) + 1);
    }

    /* "numpy.pxd":806
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_10 = 0;
    (__pyx_v_offset[__pyx_t_10]) = ((__pyx_v_offset[__pyx_t_10]) + __pyx_v_child->elsize);

    /* "numpy.pxd":808
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = (!PyDataType_HASFIELDS(__pyx_v_child));
    if (__pyx_t_6) {

      /* "numpy.pxd":809
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_3 = PyInt_FromLong(__pyx_v_child->type_num); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_v_t);
      __pyx_v_t = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "numpy.pxd":810
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = ((__pyx_v_end - __pyx_v_f) < 5);
      if (__pyx_t_6) {

        /* "numpy.pxd":811
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_3 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_22), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L10;
      }
      __pyx_L10:;

      /* "numpy.pxd":814
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 814; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 814; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 814; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L11;
      }

      /* "numpy.pxd":815
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L11;
      }

      /* "numpy.pxd":816
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L11;
      }

      /* "numpy.pxd":817
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L11;
      }

      /* "numpy.pxd":818
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L11;
      }

      /* "numpy.pxd":819
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L11;
      }

      /* "numpy.pxd":820
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L11;
      }

      /* "numpy.pxd":821
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L11;
      }

      /* "numpy.pxd":822
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L11;
      }

      /* "numpy.pxd":823
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L11;
      }

      /* "numpy.pxd":824
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L11;
      }

      /* "numpy.pxd":825
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_5 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L11;
      }

      /* "numpy.pxd":826
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_3 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L11;
      }

      /* "numpy.pxd":827
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_5 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "numpy.pxd":828
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "numpy.pxd":829
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_5 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "numpy.pxd":830
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_3 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L11;
      }
      /*else*/ {

        /* "numpy.pxd":832
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_5 = PyNumber_Remainder(((PyObject *)__pyx_kp_u_17), __pyx_v_t); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_5));
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_3));
        PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_5));
        __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
        __pyx_t_5 = 0;
        __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_5, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L11:;

      /* "numpy.pxd":833
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L9;
    }
    /*else*/ {

      /* "numpy.pxd":837
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_11 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_11 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_11;
    }
    __pyx_L9:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "numpy.pxd":838
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("numpy._util_dtypestring");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_child);
  __Pyx_DECREF(__pyx_v_fields);
  __Pyx_DECREF(__pyx_v_childname);
  __Pyx_DECREF(__pyx_v_new_offset);
  __Pyx_DECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":953
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("set_array_base");

  /* "numpy.pxd":955
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  if (__pyx_t_1) {

    /* "numpy.pxd":956
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "numpy.pxd":958
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "numpy.pxd":959
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "numpy.pxd":960
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "numpy.pxd":961
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  __Pyx_RefNannyFinishContext();
}

/* "numpy.pxd":963
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base");

  /* "numpy.pxd":964
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = (__pyx_v_arr->base == NULL);
  if (__pyx_t_1) {

    /* "numpy.pxd":965
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "numpy.pxd":967
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_5BriPy_BrightConfig(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_5BriPy_BrightConfig(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5BriPy_12BrightConfig_BRIGHT_DATA(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_12BrightConfig_11BRIGHT_DATA___get__(o);
}

static int __pyx_setprop_5BriPy_12BrightConfig_BRIGHT_DATA(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_12BrightConfig_11BRIGHT_DATA_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_12BrightConfig_isos2track(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_12BrightConfig_10isos2track___get__(o);
}

static int __pyx_setprop_5BriPy_12BrightConfig_isos2track(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_12BrightConfig_10isos2track_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_12BrightConfig_verbosity(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_12BrightConfig_9verbosity___get__(o);
}

static int __pyx_setprop_5BriPy_12BrightConfig_verbosity(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_12BrightConfig_9verbosity_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_12BrightConfig_write_hdf5(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_12BrightConfig_10write_hdf5___get__(o);
}

static int __pyx_setprop_5BriPy_12BrightConfig_write_hdf5(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_12BrightConfig_10write_hdf5_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_12BrightConfig_write_text(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_12BrightConfig_10write_text___get__(o);
}

static int __pyx_setprop_5BriPy_12BrightConfig_write_text(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_12BrightConfig_10write_text_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_12BrightConfig_output_filename(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_12BrightConfig_15output_filename___get__(o);
}

static int __pyx_setprop_5BriPy_12BrightConfig_output_filename(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_12BrightConfig_15output_filename_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5BriPy_BrightConfig[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5BriPy_BrightConfig[] = {
  {(char *)"BRIGHT_DATA", __pyx_getprop_5BriPy_12BrightConfig_BRIGHT_DATA, __pyx_setprop_5BriPy_12BrightConfig_BRIGHT_DATA, 0, 0},
  {(char *)"isos2track", __pyx_getprop_5BriPy_12BrightConfig_isos2track, __pyx_setprop_5BriPy_12BrightConfig_isos2track, 0, 0},
  {(char *)"verbosity", __pyx_getprop_5BriPy_12BrightConfig_verbosity, __pyx_setprop_5BriPy_12BrightConfig_verbosity, 0, 0},
  {(char *)"write_hdf5", __pyx_getprop_5BriPy_12BrightConfig_write_hdf5, __pyx_setprop_5BriPy_12BrightConfig_write_hdf5, 0, 0},
  {(char *)"write_text", __pyx_getprop_5BriPy_12BrightConfig_write_text, __pyx_setprop_5BriPy_12BrightConfig_write_text, 0, 0},
  {(char *)"output_filename", __pyx_getprop_5BriPy_12BrightConfig_output_filename, __pyx_setprop_5BriPy_12BrightConfig_output_filename, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_BrightConfig = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_BrightConfig = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BrightConfig = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_BrightConfig = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5BriPy_BrightConfig = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("BriPy.BrightConfig"), /*tp_name*/
  sizeof(struct __pyx_obj_5BriPy_BrightConfig), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5BriPy_BrightConfig, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_BrightConfig, /*tp_as_number*/
  &__pyx_tp_as_sequence_BrightConfig, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BrightConfig, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_BrightConfig, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5BriPy_BrightConfig, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5BriPy_BrightConfig, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5BriPy_BrightConfig, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5BriPy_FCComp(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_5BriPy_6FCComp___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5BriPy_FCComp(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_5BriPy_6FCComp_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5BriPy_6FCComp_name(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_6FCComp_4name___get__(o);
}

static int __pyx_setprop_5BriPy_6FCComp_name(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_6FCComp_4name_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_6FCComp_natural_name(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_6FCComp_12natural_name___get__(o);
}

static int __pyx_setprop_5BriPy_6FCComp_natural_name(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_6FCComp_12natural_name_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_6FCComp_IsosIn(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_6FCComp_6IsosIn___get__(o);
}

static int __pyx_setprop_5BriPy_6FCComp_IsosIn(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_6FCComp_6IsosIn_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_6FCComp_IsosOut(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_6FCComp_7IsosOut___get__(o);
}

static int __pyx_setprop_5BriPy_6FCComp_IsosOut(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_6FCComp_7IsosOut_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_6FCComp_ParamsIn(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_6FCComp_8ParamsIn___get__(o);
}

static int __pyx_setprop_5BriPy_6FCComp_ParamsIn(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_6FCComp_8ParamsIn_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_6FCComp_ParamsOut(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_6FCComp_9ParamsOut___get__(o);
}

static int __pyx_setprop_5BriPy_6FCComp_ParamsOut(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_6FCComp_9ParamsOut_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_6FCComp_PassNum(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_6FCComp_7PassNum___get__(o);
}

static int __pyx_setprop_5BriPy_6FCComp_PassNum(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_6FCComp_7PassNum_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_6FCComp_params2track(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_6FCComp_12params2track___get__(o);
}

static int __pyx_setprop_5BriPy_6FCComp_params2track(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_6FCComp_12params2track_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5BriPy_FCComp[] = {
  {__Pyx_NAMESTR("writeIsoPass"), (PyCFunction)__pyx_pf_5BriPy_6FCComp_2writeIsoPass, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5BriPy_6FCComp_2writeIsoPass)},
  {__Pyx_NAMESTR("writeParamPass"), (PyCFunction)__pyx_pf_5BriPy_6FCComp_3writeParamPass, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5BriPy_6FCComp_3writeParamPass)},
  {__Pyx_NAMESTR("writeText"), (PyCFunction)__pyx_pf_5BriPy_6FCComp_4writeText, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5BriPy_6FCComp_4writeText)},
  {__Pyx_NAMESTR("writeHDF5"), (PyCFunction)__pyx_pf_5BriPy_6FCComp_5writeHDF5, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5BriPy_6FCComp_5writeHDF5)},
  {__Pyx_NAMESTR("writeout"), (PyCFunction)__pyx_pf_5BriPy_6FCComp_6writeout, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5BriPy_6FCComp_6writeout)},
  {__Pyx_NAMESTR("setParams"), (PyCFunction)__pyx_pf_5BriPy_6FCComp_7setParams, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5BriPy_6FCComp_7setParams)},
  {__Pyx_NAMESTR("doCalc"), (PyCFunction)__pyx_pf_5BriPy_6FCComp_8doCalc, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5BriPy_6FCComp_8doCalc)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5BriPy_FCComp[] = {
  {(char *)"name", __pyx_getprop_5BriPy_6FCComp_name, __pyx_setprop_5BriPy_6FCComp_name, 0, 0},
  {(char *)"natural_name", __pyx_getprop_5BriPy_6FCComp_natural_name, __pyx_setprop_5BriPy_6FCComp_natural_name, 0, 0},
  {(char *)"IsosIn", __pyx_getprop_5BriPy_6FCComp_IsosIn, __pyx_setprop_5BriPy_6FCComp_IsosIn, 0, 0},
  {(char *)"IsosOut", __pyx_getprop_5BriPy_6FCComp_IsosOut, __pyx_setprop_5BriPy_6FCComp_IsosOut, 0, 0},
  {(char *)"ParamsIn", __pyx_getprop_5BriPy_6FCComp_ParamsIn, __pyx_setprop_5BriPy_6FCComp_ParamsIn, 0, 0},
  {(char *)"ParamsOut", __pyx_getprop_5BriPy_6FCComp_ParamsOut, __pyx_setprop_5BriPy_6FCComp_ParamsOut, 0, 0},
  {(char *)"PassNum", __pyx_getprop_5BriPy_6FCComp_PassNum, __pyx_setprop_5BriPy_6FCComp_PassNum, 0, 0},
  {(char *)"params2track", __pyx_getprop_5BriPy_6FCComp_params2track, __pyx_setprop_5BriPy_6FCComp_params2track, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_FCComp = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_FCComp = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_FCComp = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_FCComp = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5BriPy_FCComp = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("BriPy.FCComp"), /*tp_name*/
  sizeof(struct __pyx_obj_5BriPy_FCComp), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5BriPy_FCComp, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_FCComp, /*tp_as_number*/
  &__pyx_tp_as_sequence_FCComp, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_FCComp, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_FCComp, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("Base Fuel Cycle Component Class.\n\n    Args:\n        * paramlist (sequence of str): A set of parameter names (str) that the component will track.\n        * name (str): The name of the fuel cycle component instance.\n\n    Note that this automatically calls the protected :meth:`initialize` C function.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5BriPy_FCComp, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5BriPy_FCComp, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5BriPy_FCComp, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5BriPy_EnrichmentParameters(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_5BriPy_20EnrichmentParameters___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5BriPy_EnrichmentParameters(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5BriPy_20EnrichmentParameters_alpha_0(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_20EnrichmentParameters_7alpha_0___get__(o);
}

static int __pyx_setprop_5BriPy_20EnrichmentParameters_alpha_0(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_20EnrichmentParameters_7alpha_0_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_20EnrichmentParameters_Mstar_0(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_20EnrichmentParameters_7Mstar_0___get__(o);
}

static int __pyx_setprop_5BriPy_20EnrichmentParameters_Mstar_0(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_20EnrichmentParameters_7Mstar_0_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_20EnrichmentParameters_j(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_20EnrichmentParameters_1j___get__(o);
}

static int __pyx_setprop_5BriPy_20EnrichmentParameters_j(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_20EnrichmentParameters_1j_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_20EnrichmentParameters_k(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_20EnrichmentParameters_1k___get__(o);
}

static int __pyx_setprop_5BriPy_20EnrichmentParameters_k(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_20EnrichmentParameters_1k_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_20EnrichmentParameters_N0(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_20EnrichmentParameters_2N0___get__(o);
}

static int __pyx_setprop_5BriPy_20EnrichmentParameters_N0(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_20EnrichmentParameters_2N0_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_20EnrichmentParameters_M0(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_20EnrichmentParameters_2M0___get__(o);
}

static int __pyx_setprop_5BriPy_20EnrichmentParameters_M0(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_20EnrichmentParameters_2M0_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_20EnrichmentParameters_xP_j(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_20EnrichmentParameters_4xP_j___get__(o);
}

static int __pyx_setprop_5BriPy_20EnrichmentParameters_xP_j(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_20EnrichmentParameters_4xP_j_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_20EnrichmentParameters_xW_j(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_20EnrichmentParameters_4xW_j___get__(o);
}

static int __pyx_setprop_5BriPy_20EnrichmentParameters_xW_j(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_20EnrichmentParameters_4xW_j_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5BriPy_EnrichmentParameters[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5BriPy_EnrichmentParameters[] = {
  {(char *)"alpha_0", __pyx_getprop_5BriPy_20EnrichmentParameters_alpha_0, __pyx_setprop_5BriPy_20EnrichmentParameters_alpha_0, 0, 0},
  {(char *)"Mstar_0", __pyx_getprop_5BriPy_20EnrichmentParameters_Mstar_0, __pyx_setprop_5BriPy_20EnrichmentParameters_Mstar_0, 0, 0},
  {(char *)"j", __pyx_getprop_5BriPy_20EnrichmentParameters_j, __pyx_setprop_5BriPy_20EnrichmentParameters_j, 0, 0},
  {(char *)"k", __pyx_getprop_5BriPy_20EnrichmentParameters_k, __pyx_setprop_5BriPy_20EnrichmentParameters_k, 0, 0},
  {(char *)"N0", __pyx_getprop_5BriPy_20EnrichmentParameters_N0, __pyx_setprop_5BriPy_20EnrichmentParameters_N0, 0, 0},
  {(char *)"M0", __pyx_getprop_5BriPy_20EnrichmentParameters_M0, __pyx_setprop_5BriPy_20EnrichmentParameters_M0, 0, 0},
  {(char *)"xP_j", __pyx_getprop_5BriPy_20EnrichmentParameters_xP_j, __pyx_setprop_5BriPy_20EnrichmentParameters_xP_j, 0, 0},
  {(char *)"xW_j", __pyx_getprop_5BriPy_20EnrichmentParameters_xW_j, __pyx_setprop_5BriPy_20EnrichmentParameters_xW_j, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_EnrichmentParameters = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_EnrichmentParameters = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_EnrichmentParameters = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_EnrichmentParameters = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5BriPy_EnrichmentParameters = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("BriPy.EnrichmentParameters"), /*tp_name*/
  sizeof(struct __pyx_obj_5BriPy_EnrichmentParameters), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5BriPy_EnrichmentParameters, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_EnrichmentParameters, /*tp_as_number*/
  &__pyx_tp_as_sequence_EnrichmentParameters, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_EnrichmentParameters, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_EnrichmentParameters, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("This class is a collection of values that mirror the attributes in \n    Enrichment that are required for the cascade model to run.\n    In C-code this a simple `struct.  Like ReactorParameters, this class \n    takes no arguments on initialization.  An empty ErichmentParameters\n    instance has all values (weakly) set to zero.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5BriPy_EnrichmentParameters, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5BriPy_EnrichmentParameters, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5BriPy_EnrichmentParameters, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5BriPy_Enrichment(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_5BriPy_FCComp(t, a, k);
  if (!o) return 0;
  if (__pyx_pf_5BriPy_10Enrichment___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5BriPy_Enrichment(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_5BriPy_10Enrichment_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_5BriPy_FCComp(o);
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_alpha_0(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_7alpha_0___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_alpha_0(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_7alpha_0_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_Mstar_0(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_7Mstar_0___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_Mstar_0(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_7Mstar_0_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_Mstar(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_5Mstar___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_Mstar(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_5Mstar_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_IsosTail(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_8IsosTail___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_IsosTail(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_8IsosTail_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_j(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_1j___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_j(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_1j_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_k(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_1k___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_k(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_1k_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_xP_j(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_4xP_j___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_xP_j(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_4xP_j_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_xW_j(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_4xW_j___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_xW_j(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_4xW_j_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_N(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_1N___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_N(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_1N_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_M(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_1M___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_M(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_1M_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_N0(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_2N0___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_N0(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_2N0_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_M0(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_2M0___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_M0(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_2M0_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_TotalPerFeed(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_12TotalPerFeed___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_TotalPerFeed(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_12TotalPerFeed_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_SWUperFeed(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_10SWUperFeed___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_SWUperFeed(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_10SWUperFeed_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_SWUperProduct(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_13SWUperProduct___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_SWUperProduct(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_13SWUperProduct_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_name(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_4name___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_name(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_4name_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_natural_name(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_12natural_name___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_natural_name(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_12natural_name_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_IsosIn(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_6IsosIn___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_IsosIn(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_6IsosIn_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_IsosOut(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_7IsosOut___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_IsosOut(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_7IsosOut_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_ParamsIn(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_8ParamsIn___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_ParamsIn(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_8ParamsIn_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_ParamsOut(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_9ParamsOut___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_ParamsOut(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_9ParamsOut_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_PassNum(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_7PassNum___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_PassNum(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_7PassNum_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_10Enrichment_params2track(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_10Enrichment_12params2track___get__(o);
}

static int __pyx_setprop_5BriPy_10Enrichment_params2track(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_10Enrichment_12params2track_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5BriPy_Enrichment[] = {
  {__Pyx_NAMESTR("initialize"), (PyCFunction)__pyx_pf_5BriPy_10Enrichment_2initialize, METH_O, __Pyx_DOCSTR(__pyx_doc_5BriPy_10Enrichment_2initialize)},
  {__Pyx_NAMESTR("setParams"), (PyCFunction)__pyx_pf_5BriPy_10Enrichment_3setParams, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5BriPy_10Enrichment_3setParams)},
  {__Pyx_NAMESTR("doCalc"), (PyCFunction)__pyx_pf_5BriPy_10Enrichment_4doCalc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5BriPy_10Enrichment_4doCalc)},
  {__Pyx_NAMESTR("PoverF"), (PyCFunction)__pyx_pf_5BriPy_10Enrichment_5PoverF, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5BriPy_10Enrichment_5PoverF)},
  {__Pyx_NAMESTR("WoverF"), (PyCFunction)__pyx_pf_5BriPy_10Enrichment_6WoverF, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5BriPy_10Enrichment_6WoverF)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5BriPy_Enrichment[] = {
  {(char *)"alpha_0", __pyx_getprop_5BriPy_10Enrichment_alpha_0, __pyx_setprop_5BriPy_10Enrichment_alpha_0, 0, 0},
  {(char *)"Mstar_0", __pyx_getprop_5BriPy_10Enrichment_Mstar_0, __pyx_setprop_5BriPy_10Enrichment_Mstar_0, 0, 0},
  {(char *)"Mstar", __pyx_getprop_5BriPy_10Enrichment_Mstar, __pyx_setprop_5BriPy_10Enrichment_Mstar, 0, 0},
  {(char *)"IsosTail", __pyx_getprop_5BriPy_10Enrichment_IsosTail, __pyx_setprop_5BriPy_10Enrichment_IsosTail, 0, 0},
  {(char *)"j", __pyx_getprop_5BriPy_10Enrichment_j, __pyx_setprop_5BriPy_10Enrichment_j, 0, 0},
  {(char *)"k", __pyx_getprop_5BriPy_10Enrichment_k, __pyx_setprop_5BriPy_10Enrichment_k, 0, 0},
  {(char *)"xP_j", __pyx_getprop_5BriPy_10Enrichment_xP_j, __pyx_setprop_5BriPy_10Enrichment_xP_j, 0, 0},
  {(char *)"xW_j", __pyx_getprop_5BriPy_10Enrichment_xW_j, __pyx_setprop_5BriPy_10Enrichment_xW_j, 0, 0},
  {(char *)"N", __pyx_getprop_5BriPy_10Enrichment_N, __pyx_setprop_5BriPy_10Enrichment_N, 0, 0},
  {(char *)"M", __pyx_getprop_5BriPy_10Enrichment_M, __pyx_setprop_5BriPy_10Enrichment_M, 0, 0},
  {(char *)"N0", __pyx_getprop_5BriPy_10Enrichment_N0, __pyx_setprop_5BriPy_10Enrichment_N0, 0, 0},
  {(char *)"M0", __pyx_getprop_5BriPy_10Enrichment_M0, __pyx_setprop_5BriPy_10Enrichment_M0, 0, 0},
  {(char *)"TotalPerFeed", __pyx_getprop_5BriPy_10Enrichment_TotalPerFeed, __pyx_setprop_5BriPy_10Enrichment_TotalPerFeed, 0, 0},
  {(char *)"SWUperFeed", __pyx_getprop_5BriPy_10Enrichment_SWUperFeed, __pyx_setprop_5BriPy_10Enrichment_SWUperFeed, 0, 0},
  {(char *)"SWUperProduct", __pyx_getprop_5BriPy_10Enrichment_SWUperProduct, __pyx_setprop_5BriPy_10Enrichment_SWUperProduct, 0, 0},
  {(char *)"name", __pyx_getprop_5BriPy_10Enrichment_name, __pyx_setprop_5BriPy_10Enrichment_name, 0, 0},
  {(char *)"natural_name", __pyx_getprop_5BriPy_10Enrichment_natural_name, __pyx_setprop_5BriPy_10Enrichment_natural_name, 0, 0},
  {(char *)"IsosIn", __pyx_getprop_5BriPy_10Enrichment_IsosIn, __pyx_setprop_5BriPy_10Enrichment_IsosIn, 0, 0},
  {(char *)"IsosOut", __pyx_getprop_5BriPy_10Enrichment_IsosOut, __pyx_setprop_5BriPy_10Enrichment_IsosOut, 0, 0},
  {(char *)"ParamsIn", __pyx_getprop_5BriPy_10Enrichment_ParamsIn, __pyx_setprop_5BriPy_10Enrichment_ParamsIn, 0, 0},
  {(char *)"ParamsOut", __pyx_getprop_5BriPy_10Enrichment_ParamsOut, __pyx_setprop_5BriPy_10Enrichment_ParamsOut, 0, 0},
  {(char *)"PassNum", __pyx_getprop_5BriPy_10Enrichment_PassNum, __pyx_setprop_5BriPy_10Enrichment_PassNum, 0, 0},
  {(char *)"params2track", __pyx_getprop_5BriPy_10Enrichment_params2track, __pyx_setprop_5BriPy_10Enrichment_params2track, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Enrichment = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Enrichment = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Enrichment = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Enrichment = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5BriPy_Enrichment = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("BriPy.Enrichment"), /*tp_name*/
  sizeof(struct __pyx_obj_5BriPy_Enrichment), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5BriPy_Enrichment, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Enrichment, /*tp_as_number*/
  &__pyx_tp_as_sequence_Enrichment, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Enrichment, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Enrichment, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("Enrichment Fuel Cycle Component Class.  Daughter of BriPy.FCComp class.\n\n    Args:\n        * enrich_params (EnrichmentParameters): This specifies how the enrichment \n          cascade should be set up.  It is a EnrichmentParameters\n          helper object.  If enrich_params is not specified, then the cascade \n          is initialized with UraniumEnrichmentDefaults.\n        * name (str): The name of the enrichment fuel cycle component instance.\n\n    Note that this automatically calls the public initialize() C function.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5BriPy_Enrichment, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5BriPy_Enrichment, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5BriPy_Enrichment, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5BriPy_Reprocess(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_5BriPy_FCComp(t, a, k);
  if (!o) return 0;
  if (__pyx_pf_5BriPy_9Reprocess_1__cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5BriPy_Reprocess(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_5BriPy_9Reprocess_2__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_5BriPy_FCComp(o);
}

static PyObject *__pyx_getprop_5BriPy_9Reprocess_sepeff(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reprocess_6sepeff___get__(o);
}

static int __pyx_setprop_5BriPy_9Reprocess_sepeff(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reprocess_6sepeff_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reprocess_name(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reprocess_4name___get__(o);
}

static int __pyx_setprop_5BriPy_9Reprocess_name(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reprocess_4name_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reprocess_natural_name(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reprocess_12natural_name___get__(o);
}

static int __pyx_setprop_5BriPy_9Reprocess_natural_name(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reprocess_12natural_name_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reprocess_IsosIn(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reprocess_6IsosIn___get__(o);
}

static int __pyx_setprop_5BriPy_9Reprocess_IsosIn(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reprocess_6IsosIn_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reprocess_IsosOut(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reprocess_7IsosOut___get__(o);
}

static int __pyx_setprop_5BriPy_9Reprocess_IsosOut(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reprocess_7IsosOut_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reprocess_ParamsIn(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reprocess_8ParamsIn___get__(o);
}

static int __pyx_setprop_5BriPy_9Reprocess_ParamsIn(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reprocess_8ParamsIn_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reprocess_ParamsOut(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reprocess_9ParamsOut___get__(o);
}

static int __pyx_setprop_5BriPy_9Reprocess_ParamsOut(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reprocess_9ParamsOut_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reprocess_PassNum(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reprocess_7PassNum___get__(o);
}

static int __pyx_setprop_5BriPy_9Reprocess_PassNum(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reprocess_7PassNum_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reprocess_params2track(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reprocess_12params2track___get__(o);
}

static int __pyx_setprop_5BriPy_9Reprocess_params2track(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reprocess_12params2track_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5BriPy_Reprocess[] = {
  {__Pyx_NAMESTR("_cpp_sepeff"), (PyCFunction)__pyx_pf_5BriPy_9Reprocess__cpp_sepeff, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("initialize"), (PyCFunction)__pyx_pf_5BriPy_9Reprocess_3initialize, METH_O, __Pyx_DOCSTR(__pyx_doc_5BriPy_9Reprocess_3initialize)},
  {__Pyx_NAMESTR("setParams"), (PyCFunction)__pyx_pf_5BriPy_9Reprocess_4setParams, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5BriPy_9Reprocess_4setParams)},
  {__Pyx_NAMESTR("doCalc"), (PyCFunction)__pyx_pf_5BriPy_9Reprocess_5doCalc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5BriPy_9Reprocess_5doCalc)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5BriPy_Reprocess[] = {
  {(char *)"sepeff", __pyx_getprop_5BriPy_9Reprocess_sepeff, __pyx_setprop_5BriPy_9Reprocess_sepeff, 0, 0},
  {(char *)"name", __pyx_getprop_5BriPy_9Reprocess_name, __pyx_setprop_5BriPy_9Reprocess_name, 0, 0},
  {(char *)"natural_name", __pyx_getprop_5BriPy_9Reprocess_natural_name, __pyx_setprop_5BriPy_9Reprocess_natural_name, 0, 0},
  {(char *)"IsosIn", __pyx_getprop_5BriPy_9Reprocess_IsosIn, __pyx_setprop_5BriPy_9Reprocess_IsosIn, 0, 0},
  {(char *)"IsosOut", __pyx_getprop_5BriPy_9Reprocess_IsosOut, __pyx_setprop_5BriPy_9Reprocess_IsosOut, 0, 0},
  {(char *)"ParamsIn", __pyx_getprop_5BriPy_9Reprocess_ParamsIn, __pyx_setprop_5BriPy_9Reprocess_ParamsIn, 0, 0},
  {(char *)"ParamsOut", __pyx_getprop_5BriPy_9Reprocess_ParamsOut, __pyx_setprop_5BriPy_9Reprocess_ParamsOut, 0, 0},
  {(char *)"PassNum", __pyx_getprop_5BriPy_9Reprocess_PassNum, __pyx_setprop_5BriPy_9Reprocess_PassNum, 0, 0},
  {(char *)"params2track", __pyx_getprop_5BriPy_9Reprocess_params2track, __pyx_setprop_5BriPy_9Reprocess_params2track, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Reprocess = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Reprocess = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Reprocess = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Reprocess = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5BriPy_Reprocess = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("BriPy.Reprocess"), /*tp_name*/
  sizeof(struct __pyx_obj_5BriPy_Reprocess), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5BriPy_Reprocess, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Reprocess, /*tp_as_number*/
  &__pyx_tp_as_sequence_Reprocess, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Reprocess, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Reprocess, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("Reprocess Fuel Cycle Component Class.  Daughter of BriPy.FCComp class.\n\n    Args:\n        * sepeff (dict): A dictionary containing the separation efficiencies (float) to initialize\n          the instance with.  The keys of this dictionary must be strings.  However, the strings may \n          represent either elements or isotopes or both::\n\n                #ssed = string dictionary of separation efficiencies.  \n                #Of form {zz: 0.99}, eg \n                ssed = {\"92\": 0.999, \"94\": 0.99} \n                #of form {LL: 0.99}, eg \n                ssed = {\"U\": 0.999, \"PU\": 0.99} \n                #or of form {mixed: 0.99}, eg \n                ssed = {\"U235\": 0.9, \"922350\": 0.999, \"94239\": 0.99}\n\n        * name (str): The name of the reprocessing fuel cycle component instance.\n\n    Note that this automatically calls the public initialize C function.\n\n    .. note::\n       The C++ version of the code also allows you to initialize from an int-keyed dictionary (map).\n       However, due to a from_python C++ signature ambiguity, you cannot do use this directly in Python.\n       Separation efficiencies must therefore be automatically initialized through string dictionaries.\n       If you need to initialize via an int dictionary in python, you can always init with an empty\n       string dictionary and then manually initialize with an int one.  For example::\n\n            R = Reprocess({}, name)\n            R.initialize( {92: 0.99, 942390: 0.9} )\n\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5BriPy_Reprocess, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5BriPy_Reprocess, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5BriPy_Reprocess, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5BriPy_Storage(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_5BriPy_FCComp(t, a, k);
  if (!o) return 0;
  if (__pyx_pf_5BriPy_7Storage___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5BriPy_Storage(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_5BriPy_7Storage_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_5BriPy_FCComp(o);
}

static PyObject *__pyx_getprop_5BriPy_7Storage_decay_time(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_7Storage_10decay_time___get__(o);
}

static int __pyx_setprop_5BriPy_7Storage_decay_time(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_7Storage_10decay_time_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_7Storage_name(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_7Storage_4name___get__(o);
}

static int __pyx_setprop_5BriPy_7Storage_name(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_7Storage_4name_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_7Storage_natural_name(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_7Storage_12natural_name___get__(o);
}

static int __pyx_setprop_5BriPy_7Storage_natural_name(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_7Storage_12natural_name_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_7Storage_IsosIn(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_7Storage_6IsosIn___get__(o);
}

static int __pyx_setprop_5BriPy_7Storage_IsosIn(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_7Storage_6IsosIn_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_7Storage_IsosOut(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_7Storage_7IsosOut___get__(o);
}

static int __pyx_setprop_5BriPy_7Storage_IsosOut(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_7Storage_7IsosOut_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_7Storage_ParamsIn(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_7Storage_8ParamsIn___get__(o);
}

static int __pyx_setprop_5BriPy_7Storage_ParamsIn(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_7Storage_8ParamsIn_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_7Storage_ParamsOut(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_7Storage_9ParamsOut___get__(o);
}

static int __pyx_setprop_5BriPy_7Storage_ParamsOut(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_7Storage_9ParamsOut_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_7Storage_PassNum(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_7Storage_7PassNum___get__(o);
}

static int __pyx_setprop_5BriPy_7Storage_PassNum(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_7Storage_7PassNum_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_7Storage_params2track(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_7Storage_12params2track___get__(o);
}

static int __pyx_setprop_5BriPy_7Storage_params2track(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_7Storage_12params2track_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5BriPy_Storage[] = {
  {__Pyx_NAMESTR("setParams"), (PyCFunction)__pyx_pf_5BriPy_7Storage_2setParams, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5BriPy_7Storage_2setParams)},
  {__Pyx_NAMESTR("doCalc"), (PyCFunction)__pyx_pf_5BriPy_7Storage_3doCalc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5BriPy_7Storage_3doCalc)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5BriPy_Storage[] = {
  {(char *)"decay_time", __pyx_getprop_5BriPy_7Storage_decay_time, __pyx_setprop_5BriPy_7Storage_decay_time, 0, 0},
  {(char *)"name", __pyx_getprop_5BriPy_7Storage_name, __pyx_setprop_5BriPy_7Storage_name, 0, 0},
  {(char *)"natural_name", __pyx_getprop_5BriPy_7Storage_natural_name, __pyx_setprop_5BriPy_7Storage_natural_name, 0, 0},
  {(char *)"IsosIn", __pyx_getprop_5BriPy_7Storage_IsosIn, __pyx_setprop_5BriPy_7Storage_IsosIn, 0, 0},
  {(char *)"IsosOut", __pyx_getprop_5BriPy_7Storage_IsosOut, __pyx_setprop_5BriPy_7Storage_IsosOut, 0, 0},
  {(char *)"ParamsIn", __pyx_getprop_5BriPy_7Storage_ParamsIn, __pyx_setprop_5BriPy_7Storage_ParamsIn, 0, 0},
  {(char *)"ParamsOut", __pyx_getprop_5BriPy_7Storage_ParamsOut, __pyx_setprop_5BriPy_7Storage_ParamsOut, 0, 0},
  {(char *)"PassNum", __pyx_getprop_5BriPy_7Storage_PassNum, __pyx_setprop_5BriPy_7Storage_PassNum, 0, 0},
  {(char *)"params2track", __pyx_getprop_5BriPy_7Storage_params2track, __pyx_setprop_5BriPy_7Storage_params2track, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Storage = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Storage = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Storage = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Storage = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5BriPy_Storage = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("BriPy.Storage"), /*tp_name*/
  sizeof(struct __pyx_obj_5BriPy_Storage), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5BriPy_Storage, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Storage, /*tp_as_number*/
  &__pyx_tp_as_sequence_Storage, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Storage, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Storage, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("Storage Fuel Cycle Component Class.  Daughter of BriPy.FCComp class.\n\n    Args:\n        * name (str): The name of the storage fuel cycle component instance.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5BriPy_Storage, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5BriPy_Storage, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5BriPy_Storage, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5BriPy_FluencePoint(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_5BriPy_12FluencePoint___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5BriPy_FluencePoint(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5BriPy_12FluencePoint_f(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_12FluencePoint_1f___get__(o);
}

static int __pyx_setprop_5BriPy_12FluencePoint_f(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_12FluencePoint_1f_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_12FluencePoint_F(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_12FluencePoint_1F___get__(o);
}

static int __pyx_setprop_5BriPy_12FluencePoint_F(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_12FluencePoint_1F_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_12FluencePoint_m(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_12FluencePoint_1m___get__(o);
}

static int __pyx_setprop_5BriPy_12FluencePoint_m(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_12FluencePoint_1m_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5BriPy_FluencePoint[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5BriPy_FluencePoint[] = {
  {(char *)"f", __pyx_getprop_5BriPy_12FluencePoint_f, __pyx_setprop_5BriPy_12FluencePoint_f, 0, 0},
  {(char *)"F", __pyx_getprop_5BriPy_12FluencePoint_F, __pyx_setprop_5BriPy_12FluencePoint_F, 0, 0},
  {(char *)"m", __pyx_getprop_5BriPy_12FluencePoint_m, __pyx_setprop_5BriPy_12FluencePoint_m, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_FluencePoint = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_FluencePoint = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_FluencePoint = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_FluencePoint = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5BriPy_FluencePoint = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("BriPy.FluencePoint"), /*tp_name*/
  sizeof(struct __pyx_obj_5BriPy_FluencePoint), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5BriPy_FluencePoint, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_FluencePoint, /*tp_as_number*/
  &__pyx_tp_as_sequence_FluencePoint, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_FluencePoint, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_FluencePoint, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("This class holds three simple data points that represent a fluence point.\n\n    Attributes:\n        * f (int): Index of Reactor1G.F immediately lower than the value of F (int).\n        * F (float): Fluence value itself (float). In units of [n/kb] or [neutrons/kilobarn].\n        * m (float): The slope dBU/dF between points f and f+1 (float). \n          Has the odd units of [MWd kb / kgIHM n].\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5BriPy_FluencePoint, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5BriPy_FluencePoint, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5BriPy_FluencePoint, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5BriPy_ReactorParameters(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_5BriPy_17ReactorParameters___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5BriPy_ReactorParameters(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_5BriPy_17ReactorParameters_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5BriPy_17ReactorParameters_batches(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_17ReactorParameters_7batches___get__(o);
}

static int __pyx_setprop_5BriPy_17ReactorParameters_batches(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_17ReactorParameters_7batches_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_17ReactorParameters_flux(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_17ReactorParameters_4flux___get__(o);
}

static int __pyx_setprop_5BriPy_17ReactorParameters_flux(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_17ReactorParameters_4flux_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_17ReactorParameters_FuelForm(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_17ReactorParameters_8FuelForm___get__(o);
}

static int __pyx_setprop_5BriPy_17ReactorParameters_FuelForm(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_17ReactorParameters_8FuelForm_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_17ReactorParameters_CoolantForm(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_17ReactorParameters_11CoolantForm___get__(o);
}

static int __pyx_setprop_5BriPy_17ReactorParameters_CoolantForm(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_17ReactorParameters_11CoolantForm_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_17ReactorParameters_FuelDensity(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_17ReactorParameters_11FuelDensity___get__(o);
}

static int __pyx_setprop_5BriPy_17ReactorParameters_FuelDensity(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_17ReactorParameters_11FuelDensity_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_17ReactorParameters_CoolantDensity(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_17ReactorParameters_14CoolantDensity___get__(o);
}

static int __pyx_setprop_5BriPy_17ReactorParameters_CoolantDensity(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_17ReactorParameters_14CoolantDensity_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_17ReactorParameters_pnl(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_17ReactorParameters_3pnl___get__(o);
}

static int __pyx_setprop_5BriPy_17ReactorParameters_pnl(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_17ReactorParameters_3pnl_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_17ReactorParameters_BUt(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_17ReactorParameters_3BUt___get__(o);
}

static int __pyx_setprop_5BriPy_17ReactorParameters_BUt(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_17ReactorParameters_3BUt_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_17ReactorParameters_useDisadvantage(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_17ReactorParameters_15useDisadvantage___get__(o);
}

static int __pyx_setprop_5BriPy_17ReactorParameters_useDisadvantage(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_17ReactorParameters_15useDisadvantage_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_17ReactorParameters_LatticeType(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_17ReactorParameters_11LatticeType___get__(o);
}

static int __pyx_setprop_5BriPy_17ReactorParameters_LatticeType(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_17ReactorParameters_11LatticeType_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_17ReactorParameters_HydrogenRescale(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_17ReactorParameters_15HydrogenRescale___get__(o);
}

static int __pyx_setprop_5BriPy_17ReactorParameters_HydrogenRescale(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_17ReactorParameters_15HydrogenRescale_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_17ReactorParameters_Radius(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_17ReactorParameters_6Radius___get__(o);
}

static int __pyx_setprop_5BriPy_17ReactorParameters_Radius(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_17ReactorParameters_6Radius_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_17ReactorParameters_Length(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_17ReactorParameters_6Length___get__(o);
}

static int __pyx_setprop_5BriPy_17ReactorParameters_Length(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_17ReactorParameters_6Length_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_17ReactorParameters_open_slots(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_17ReactorParameters_10open_slots___get__(o);
}

static int __pyx_setprop_5BriPy_17ReactorParameters_open_slots(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_17ReactorParameters_10open_slots_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_17ReactorParameters_total_slots(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_17ReactorParameters_11total_slots___get__(o);
}

static int __pyx_setprop_5BriPy_17ReactorParameters_total_slots(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_17ReactorParameters_11total_slots_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5BriPy_ReactorParameters[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5BriPy_ReactorParameters[] = {
  {(char *)"batches", __pyx_getprop_5BriPy_17ReactorParameters_batches, __pyx_setprop_5BriPy_17ReactorParameters_batches, 0, 0},
  {(char *)"flux", __pyx_getprop_5BriPy_17ReactorParameters_flux, __pyx_setprop_5BriPy_17ReactorParameters_flux, 0, 0},
  {(char *)"FuelForm", __pyx_getprop_5BriPy_17ReactorParameters_FuelForm, __pyx_setprop_5BriPy_17ReactorParameters_FuelForm, 0, 0},
  {(char *)"CoolantForm", __pyx_getprop_5BriPy_17ReactorParameters_CoolantForm, __pyx_setprop_5BriPy_17ReactorParameters_CoolantForm, 0, 0},
  {(char *)"FuelDensity", __pyx_getprop_5BriPy_17ReactorParameters_FuelDensity, __pyx_setprop_5BriPy_17ReactorParameters_FuelDensity, 0, 0},
  {(char *)"CoolantDensity", __pyx_getprop_5BriPy_17ReactorParameters_CoolantDensity, __pyx_setprop_5BriPy_17ReactorParameters_CoolantDensity, 0, 0},
  {(char *)"pnl", __pyx_getprop_5BriPy_17ReactorParameters_pnl, __pyx_setprop_5BriPy_17ReactorParameters_pnl, 0, 0},
  {(char *)"BUt", __pyx_getprop_5BriPy_17ReactorParameters_BUt, __pyx_setprop_5BriPy_17ReactorParameters_BUt, 0, 0},
  {(char *)"useDisadvantage", __pyx_getprop_5BriPy_17ReactorParameters_useDisadvantage, __pyx_setprop_5BriPy_17ReactorParameters_useDisadvantage, 0, 0},
  {(char *)"LatticeType", __pyx_getprop_5BriPy_17ReactorParameters_LatticeType, __pyx_setprop_5BriPy_17ReactorParameters_LatticeType, 0, 0},
  {(char *)"HydrogenRescale", __pyx_getprop_5BriPy_17ReactorParameters_HydrogenRescale, __pyx_setprop_5BriPy_17ReactorParameters_HydrogenRescale, 0, 0},
  {(char *)"Radius", __pyx_getprop_5BriPy_17ReactorParameters_Radius, __pyx_setprop_5BriPy_17ReactorParameters_Radius, 0, 0},
  {(char *)"Length", __pyx_getprop_5BriPy_17ReactorParameters_Length, __pyx_setprop_5BriPy_17ReactorParameters_Length, 0, 0},
  {(char *)"open_slots", __pyx_getprop_5BriPy_17ReactorParameters_open_slots, __pyx_setprop_5BriPy_17ReactorParameters_open_slots, 0, 0},
  {(char *)"total_slots", __pyx_getprop_5BriPy_17ReactorParameters_total_slots, __pyx_setprop_5BriPy_17ReactorParameters_total_slots, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_ReactorParameters = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_ReactorParameters = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ReactorParameters = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_ReactorParameters = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5BriPy_ReactorParameters = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("BriPy.ReactorParameters"), /*tp_name*/
  sizeof(struct __pyx_obj_5BriPy_ReactorParameters), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5BriPy_ReactorParameters, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_ReactorParameters, /*tp_as_number*/
  &__pyx_tp_as_sequence_ReactorParameters, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ReactorParameters, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_ReactorParameters, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("This data structure is a set of physical reactor parameters. It may be used to instantiate new reactor objects **OR**\n    to define default settings for a reactor type.  The data stored in this class is copied over to \n    a reactor instance in the :meth:`Reactor1G.initialize` method.  However, the attributes of this objects \n    take on more natural names than their :class:`Reactor1G` analogies.  This is because it is this \n    object that Bright users will more often be interacting with. \n\n    Attributes:\n        * batches (int): This is the total number of batches in the fuel management scheme. \n          This is typically indexed by b.\n        * flux (float): The nominal flux value that the library for this reactor \n          type was generated with.  Used to correctly weight batch-specific fluxes.\n        * FuelForm (dict): This is the chemical form of fuel as dictionary.  Keys are \n          strings that represent isotopes (mixed form) while values represent the \n          corresponding mass weights.  The heavy metal concentration by the key \"IHM\".  \n          This will automatically fill in the nuclides in IsosIn for the \"IHM\" weight.  \n          For example, LWRs typically use a UOX fuel form::\n\n            ReactorParameters.FuelForm = {\"IHM\": 1.0, \"O16\": 2.0}\n\n        * CoolantForm (dict): This is the chemical form of coolant as dictionary.  \n          This uses the same notation as FuelForm except that \"IHM\" is no longer \n          a valid key.  The term 'coolant' is used in preference over the term \n          'moderator' because not all reactors moderate neutrons.  For example, \n          LWRs often cool the reactor core with borated water::\n\n            ReactorParamters.CoolantForm = {}\n\n            ReactorParamters.CoolantForm[\"H1\"]  = 2.0\n            ReactorParamters.CoolantForm[\"O16\"] = 1.0\n            ReactorParamters.CoolantForm[\"B10\"] = 0.199 * 550 * 10.0**-6\n            ReactorParamters.CoolantForm[\"B11\"] = 0.801 * 550 * 10.0**-6\n\n        * FuelDensity (float): The fuel region density.  A float in units of [g/cm^3].\n        * CoolantDensity (float): The coolant region density.  A float in units of [g/cm^3].\n        * pnl (float): The reactor's non-leakage probability.  This is often \n          used as a calibration parameter.\n        * BUt (float): The reactor's target discharge burnup.  This is given \n          in units of [MWd/kgIHM].  Often the actual discharge burnup BUd does not \n          quite hit this value, but comes acceptably close.\n        * useDisadvantage (bool): Determines whether the thermal disadvantage \n          factor is employed or not.  LWRs typically set this as True while FRs \n          have a False value.\n        * LatticeType (str): A flag that represents what lattice type the fuel \n          assemblies are arranged in.  Currently accepted values are \"Planar\", \n          \"Spherical\", and \"Cylindrical\".\n        * HydrogenRescale (bool): This determines whether the reactor should \n          rescale the Hydrogen-1 destruction rate in the coolant as a\n          function of fluence.  The scaling factor is calculated via the \n          following equation\n\n            .. math:: f(F) = 1.36927 - 0.01119 \\cdot BU(F)\n\n          This is typically not done for fast reactors but is a useful correction \n          for LWRs.\n        * Radius (float): The radius of the fuel region.  In units of [cm].\n        * Length (float): The pitch or length of the unit fuel pin cell.  In units of [cm].\n        * open_slots (float): The number of slots in a fuel assembly that are open.  \n          Thus this is the number of slots that do not contain a fuel pin and are instead \n          filled in by coolant. \n        * total_slots (float): The total number of fuel pin slots in a fuel assembly.  \n          For a 17x17 bundle, S_T is 289.0. \n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5BriPy_ReactorParameters, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5BriPy_ReactorParameters, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5BriPy_ReactorParameters, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5BriPy_Reactor1G(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_5BriPy_FCComp(t, a, k);
  if (!o) return 0;
  if (__pyx_pf_5BriPy_9Reactor1G___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5BriPy_Reactor1G(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_5BriPy_9Reactor1G_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_5BriPy_FCComp(o);
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_B(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_1B___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_B(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_1B_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_phi(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_3phi___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_phi(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_3phi_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_FuelChemicalForm(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_16FuelChemicalForm___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_FuelChemicalForm(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_16FuelChemicalForm_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_CoolantChemicalForm(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_19CoolantChemicalForm___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_CoolantChemicalForm(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_19CoolantChemicalForm_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_rhoF(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_4rhoF___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_rhoF(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_4rhoF_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_rhoC(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_4rhoC___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_rhoC(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_4rhoC_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_P_NL(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_4P_NL___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_P_NL(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_4P_NL_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_TargetBU(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_8TargetBU___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_TargetBU(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_8TargetBU_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_useZeta(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_7useZeta___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_useZeta(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_7useZeta_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_Lattice(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_7Lattice___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_Lattice(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_7Lattice_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_H_XS_Rescale(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_12H_XS_Rescale___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_H_XS_Rescale(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_12H_XS_Rescale_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_r(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_1r___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_r(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_1r_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_l(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_1l___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_l(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_1l_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_S_O(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_3S_O___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_S_O(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_3S_O_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_S_T(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_3S_T___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_S_T(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_3S_T_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_VF(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_2VF___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_VF(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_2VF_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_VC(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_2VC___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_VC(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_2VC_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_libfile(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_7libfile___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_libfile(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_7libfile_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_F(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_1F___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_F(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_1F_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_BUi_F_(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_6BUi_F____get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_BUi_F_(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_6BUi_F__1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_name(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_4name___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_name(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_4name_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_natural_name(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_12natural_name___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_natural_name(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_12natural_name_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_IsosIn(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_6IsosIn___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_IsosIn(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_6IsosIn_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_IsosOut(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_7IsosOut___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_IsosOut(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_7IsosOut_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_ParamsIn(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_8ParamsIn___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_ParamsIn(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_8ParamsIn_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_ParamsOut(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_9ParamsOut___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_ParamsOut(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_9ParamsOut_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_PassNum(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_7PassNum___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_PassNum(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_7PassNum_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5BriPy_9Reactor1G_params2track(PyObject *o, void *x) {
  return __pyx_pf_5BriPy_9Reactor1G_12params2track___get__(o);
}

static int __pyx_setprop_5BriPy_9Reactor1G_params2track(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_5BriPy_9Reactor1G_12params2track_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5BriPy_Reactor1G[] = {
  {__Pyx_NAMESTR("loadLib"), (PyCFunction)__pyx_pf_5BriPy_9Reactor1G_2loadLib, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5BriPy_9Reactor1G_2loadLib)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5BriPy_Reactor1G[] = {
  {(char *)"B", __pyx_getprop_5BriPy_9Reactor1G_B, __pyx_setprop_5BriPy_9Reactor1G_B, 0, 0},
  {(char *)"phi", __pyx_getprop_5BriPy_9Reactor1G_phi, __pyx_setprop_5BriPy_9Reactor1G_phi, 0, 0},
  {(char *)"FuelChemicalForm", __pyx_getprop_5BriPy_9Reactor1G_FuelChemicalForm, __pyx_setprop_5BriPy_9Reactor1G_FuelChemicalForm, 0, 0},
  {(char *)"CoolantChemicalForm", __pyx_getprop_5BriPy_9Reactor1G_CoolantChemicalForm, __pyx_setprop_5BriPy_9Reactor1G_CoolantChemicalForm, 0, 0},
  {(char *)"rhoF", __pyx_getprop_5BriPy_9Reactor1G_rhoF, __pyx_setprop_5BriPy_9Reactor1G_rhoF, 0, 0},
  {(char *)"rhoC", __pyx_getprop_5BriPy_9Reactor1G_rhoC, __pyx_setprop_5BriPy_9Reactor1G_rhoC, 0, 0},
  {(char *)"P_NL", __pyx_getprop_5BriPy_9Reactor1G_P_NL, __pyx_setprop_5BriPy_9Reactor1G_P_NL, 0, 0},
  {(char *)"TargetBU", __pyx_getprop_5BriPy_9Reactor1G_TargetBU, __pyx_setprop_5BriPy_9Reactor1G_TargetBU, 0, 0},
  {(char *)"useZeta", __pyx_getprop_5BriPy_9Reactor1G_useZeta, __pyx_setprop_5BriPy_9Reactor1G_useZeta, 0, 0},
  {(char *)"Lattice", __pyx_getprop_5BriPy_9Reactor1G_Lattice, __pyx_setprop_5BriPy_9Reactor1G_Lattice, 0, 0},
  {(char *)"H_XS_Rescale", __pyx_getprop_5BriPy_9Reactor1G_H_XS_Rescale, __pyx_setprop_5BriPy_9Reactor1G_H_XS_Rescale, 0, 0},
  {(char *)"r", __pyx_getprop_5BriPy_9Reactor1G_r, __pyx_setprop_5BriPy_9Reactor1G_r, 0, 0},
  {(char *)"l", __pyx_getprop_5BriPy_9Reactor1G_l, __pyx_setprop_5BriPy_9Reactor1G_l, 0, 0},
  {(char *)"S_O", __pyx_getprop_5BriPy_9Reactor1G_S_O, __pyx_setprop_5BriPy_9Reactor1G_S_O, 0, 0},
  {(char *)"S_T", __pyx_getprop_5BriPy_9Reactor1G_S_T, __pyx_setprop_5BriPy_9Reactor1G_S_T, 0, 0},
  {(char *)"VF", __pyx_getprop_5BriPy_9Reactor1G_VF, __pyx_setprop_5BriPy_9Reactor1G_VF, 0, 0},
  {(char *)"VC", __pyx_getprop_5BriPy_9Reactor1G_VC, __pyx_setprop_5BriPy_9Reactor1G_VC, 0, 0},
  {(char *)"libfile", __pyx_getprop_5BriPy_9Reactor1G_libfile, __pyx_setprop_5BriPy_9Reactor1G_libfile, 0, 0},
  {(char *)"F", __pyx_getprop_5BriPy_9Reactor1G_F, __pyx_setprop_5BriPy_9Reactor1G_F, 0, 0},
  {(char *)"BUi_F_", __pyx_getprop_5BriPy_9Reactor1G_BUi_F_, __pyx_setprop_5BriPy_9Reactor1G_BUi_F_, 0, 0},
  {(char *)"name", __pyx_getprop_5BriPy_9Reactor1G_name, __pyx_setprop_5BriPy_9Reactor1G_name, 0, 0},
  {(char *)"natural_name", __pyx_getprop_5BriPy_9Reactor1G_natural_name, __pyx_setprop_5BriPy_9Reactor1G_natural_name, 0, 0},
  {(char *)"IsosIn", __pyx_getprop_5BriPy_9Reactor1G_IsosIn, __pyx_setprop_5BriPy_9Reactor1G_IsosIn, 0, 0},
  {(char *)"IsosOut", __pyx_getprop_5BriPy_9Reactor1G_IsosOut, __pyx_setprop_5BriPy_9Reactor1G_IsosOut, 0, 0},
  {(char *)"ParamsIn", __pyx_getprop_5BriPy_9Reactor1G_ParamsIn, __pyx_setprop_5BriPy_9Reactor1G_ParamsIn, 0, 0},
  {(char *)"ParamsOut", __pyx_getprop_5BriPy_9Reactor1G_ParamsOut, __pyx_setprop_5BriPy_9Reactor1G_ParamsOut, 0, 0},
  {(char *)"PassNum", __pyx_getprop_5BriPy_9Reactor1G_PassNum, __pyx_setprop_5BriPy_9Reactor1G_PassNum, 0, 0},
  {(char *)"params2track", __pyx_getprop_5BriPy_9Reactor1G_params2track, __pyx_setprop_5BriPy_9Reactor1G_params2track, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Reactor1G = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Reactor1G = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Reactor1G = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Reactor1G = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5BriPy_Reactor1G = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("BriPy.Reactor1G"), /*tp_name*/
  sizeof(struct __pyx_obj_5BriPy_Reactor1G), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5BriPy_Reactor1G, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Reactor1G, /*tp_as_number*/
  &__pyx_tp_as_sequence_Reactor1G, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Reactor1G, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Reactor1G, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("One-Group Reactor Fuel Cycle Component Class.  Daughter of BriPy.FCComp class.\n\n    Args:\n        * reactor_parameters (ReactorParameters): A special data structure that contains information\n          on how to setup and run the reactor.\n        * params2track (string set): A set of strings that represents what parameter data the reactor should \n          store and set.  Different reactor types may have different characteristic parameters that are of interest.\n        * name (str): The name of the reactor fuel cycle component instance.\n\n    Note that this automatically calls the public initialize() C function.\n\n    .. note:: \n\n        Some data members and functions have names that end in '_F_'.  This indicates that these are a \n        function of fluence, the time integral of the flux.  The '_Fd_' suffix implies that the data is \n        evaluated at the discharge fluence.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5BriPy_Reactor1G, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5BriPy_Reactor1G, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5BriPy_Reactor1G, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("PyBrightStart"), (PyCFunction)__pyx_pf_5BriPy_PyBrightStart, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("BriPy"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_u_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 1, 0, 0},
  {&__pyx_kp_u_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 1, 0, 0},
  {&__pyx_kp_u_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 1, 0, 0},
  {&__pyx_kp_u_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 1, 0, 0},
  {&__pyx_kp_u_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 1, 0, 0},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_kp_u_21, __pyx_k_21, sizeof(__pyx_k_21), 0, 1, 0, 0},
  {&__pyx_n_s_23, __pyx_k_23, sizeof(__pyx_k_23), 0, 0, 1, 1},
  {&__pyx_n_s_24, __pyx_k_24, sizeof(__pyx_k_24), 0, 0, 1, 1},
  {&__pyx_n_s_25, __pyx_k_25, sizeof(__pyx_k_25), 0, 0, 1, 1},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_kp_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 0},
  {&__pyx_kp_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 0},
  {&__pyx_n_s__B, __pyx_k__B, sizeof(__pyx_k__B), 0, 0, 1, 1},
  {&__pyx_n_s__BRIGHT_DATA, __pyx_k__BRIGHT_DATA, sizeof(__pyx_k__BRIGHT_DATA), 0, 0, 1, 1},
  {&__pyx_n_s__BUi_F_, __pyx_k__BUi_F_, sizeof(__pyx_k__BUi_F_), 0, 0, 1, 1},
  {&__pyx_n_s__BUt, __pyx_k__BUt, sizeof(__pyx_k__BUt), 0, 0, 1, 1},
  {&__pyx_n_s__BriPy, __pyx_k__BriPy, sizeof(__pyx_k__BriPy), 0, 0, 1, 1},
  {&__pyx_n_s__BrightStart, __pyx_k__BrightStart, sizeof(__pyx_k__BrightStart), 0, 0, 1, 1},
  {&__pyx_n_s__CoolantChemicalForm, __pyx_k__CoolantChemicalForm, sizeof(__pyx_k__CoolantChemicalForm), 0, 0, 1, 1},
  {&__pyx_n_s__CoolantDensity, __pyx_k__CoolantDensity, sizeof(__pyx_k__CoolantDensity), 0, 0, 1, 1},
  {&__pyx_n_s__CoolantForm, __pyx_k__CoolantForm, sizeof(__pyx_k__CoolantForm), 0, 0, 1, 1},
  {&__pyx_n_s__F, __pyx_k__F, sizeof(__pyx_k__F), 0, 0, 1, 1},
  {&__pyx_n_s__FuelChemicalForm, __pyx_k__FuelChemicalForm, sizeof(__pyx_k__FuelChemicalForm), 0, 0, 1, 1},
  {&__pyx_n_s__FuelDensity, __pyx_k__FuelDensity, sizeof(__pyx_k__FuelDensity), 0, 0, 1, 1},
  {&__pyx_n_s__FuelForm, __pyx_k__FuelForm, sizeof(__pyx_k__FuelForm), 0, 0, 1, 1},
  {&__pyx_n_s__H_XS_Rescale, __pyx_k__H_XS_Rescale, sizeof(__pyx_k__H_XS_Rescale), 0, 0, 1, 1},
  {&__pyx_n_s__HydrogenRescale, __pyx_k__HydrogenRescale, sizeof(__pyx_k__HydrogenRescale), 0, 0, 1, 1},
  {&__pyx_n_s__IsosIn, __pyx_k__IsosIn, sizeof(__pyx_k__IsosIn), 0, 0, 1, 1},
  {&__pyx_n_s__IsosOut, __pyx_k__IsosOut, sizeof(__pyx_k__IsosOut), 0, 0, 1, 1},
  {&__pyx_n_s__IsosTail, __pyx_k__IsosTail, sizeof(__pyx_k__IsosTail), 0, 0, 1, 1},
  {&__pyx_n_s__LLzz, __pyx_k__LLzz, sizeof(__pyx_k__LLzz), 0, 0, 1, 1},
  {&__pyx_n_s__Lattice, __pyx_k__Lattice, sizeof(__pyx_k__Lattice), 0, 0, 1, 1},
  {&__pyx_n_s__LatticeType, __pyx_k__LatticeType, sizeof(__pyx_k__LatticeType), 0, 0, 1, 1},
  {&__pyx_n_s__Length, __pyx_k__Length, sizeof(__pyx_k__Length), 0, 0, 1, 1},
  {&__pyx_n_s__M, __pyx_k__M, sizeof(__pyx_k__M), 0, 0, 1, 1},
  {&__pyx_n_s__M0, __pyx_k__M0, sizeof(__pyx_k__M0), 0, 0, 1, 1},
  {&__pyx_n_s__Mstar, __pyx_k__Mstar, sizeof(__pyx_k__Mstar), 0, 0, 1, 1},
  {&__pyx_n_s__Mstar_0, __pyx_k__Mstar_0, sizeof(__pyx_k__Mstar_0), 0, 0, 1, 1},
  {&__pyx_n_s__N, __pyx_k__N, sizeof(__pyx_k__N), 0, 0, 1, 1},
  {&__pyx_n_s__N0, __pyx_k__N0, sizeof(__pyx_k__N0), 0, 0, 1, 1},
  {&__pyx_n_s__P_NL, __pyx_k__P_NL, sizeof(__pyx_k__P_NL), 0, 0, 1, 1},
  {&__pyx_n_s__ParamsIn, __pyx_k__ParamsIn, sizeof(__pyx_k__ParamsIn), 0, 0, 1, 1},
  {&__pyx_n_s__ParamsOut, __pyx_k__ParamsOut, sizeof(__pyx_k__ParamsOut), 0, 0, 1, 1},
  {&__pyx_n_s__PassNum, __pyx_k__PassNum, sizeof(__pyx_k__PassNum), 0, 0, 1, 1},
  {&__pyx_n_s__PoverF, __pyx_k__PoverF, sizeof(__pyx_k__PoverF), 0, 0, 1, 1},
  {&__pyx_n_s__Radius, __pyx_k__Radius, sizeof(__pyx_k__Radius), 0, 0, 1, 1},
  {&__pyx_n_s__RuntimeError, __pyx_k__RuntimeError, sizeof(__pyx_k__RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s__SWUperFeed, __pyx_k__SWUperFeed, sizeof(__pyx_k__SWUperFeed), 0, 0, 1, 1},
  {&__pyx_n_s__SWUperProduct, __pyx_k__SWUperProduct, sizeof(__pyx_k__SWUperProduct), 0, 0, 1, 1},
  {&__pyx_n_s__S_O, __pyx_k__S_O, sizeof(__pyx_k__S_O), 0, 0, 1, 1},
  {&__pyx_n_s__S_T, __pyx_k__S_T, sizeof(__pyx_k__S_T), 0, 0, 1, 1},
  {&__pyx_n_s__TargetBU, __pyx_k__TargetBU, sizeof(__pyx_k__TargetBU), 0, 0, 1, 1},
  {&__pyx_n_s__TotalPerFeed, __pyx_k__TotalPerFeed, sizeof(__pyx_k__TotalPerFeed), 0, 0, 1, 1},
  {&__pyx_n_s__TypeError, __pyx_k__TypeError, sizeof(__pyx_k__TypeError), 0, 0, 1, 1},
  {&__pyx_n_s__VC, __pyx_k__VC, sizeof(__pyx_k__VC), 0, 0, 1, 1},
  {&__pyx_n_s__VF, __pyx_k__VF, sizeof(__pyx_k__VF), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s__WoverF, __pyx_k__WoverF, sizeof(__pyx_k__WoverF), 0, 0, 1, 1},
  {&__pyx_n_s____file__, __pyx_k____file__, sizeof(__pyx_k____file__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___cpp_sepeff, __pyx_k___cpp_sepeff, sizeof(__pyx_k___cpp_sepeff), 0, 0, 1, 1},
  {&__pyx_n_s__alpha_0, __pyx_k__alpha_0, sizeof(__pyx_k__alpha_0), 0, 0, 1, 1},
  {&__pyx_n_s__base, __pyx_k__base, sizeof(__pyx_k__base), 0, 0, 1, 1},
  {&__pyx_n_s__basestring, __pyx_k__basestring, sizeof(__pyx_k__basestring), 0, 0, 1, 1},
  {&__pyx_n_s__batches, __pyx_k__batches, sizeof(__pyx_k__batches), 0, 0, 1, 1},
  {&__pyx_n_s__bright_config, __pyx_k__bright_config, sizeof(__pyx_k__bright_config), 0, 0, 1, 1},
  {&__pyx_n_s__bright_data, __pyx_k__bright_data, sizeof(__pyx_k__bright_data), 0, 0, 1, 1},
  {&__pyx_n_s__buf, __pyx_k__buf, sizeof(__pyx_k__buf), 0, 0, 1, 1},
  {&__pyx_n_s__byteorder, __pyx_k__byteorder, sizeof(__pyx_k__byteorder), 0, 0, 1, 1},
  {&__pyx_n_s__c_str, __pyx_k__c_str, sizeof(__pyx_k__c_str), 0, 0, 1, 1},
  {&__pyx_n_s__clear, __pyx_k__clear, sizeof(__pyx_k__clear), 0, 0, 1, 1},
  {&__pyx_n_s__datasetname, __pyx_k__datasetname, sizeof(__pyx_k__datasetname), 0, 0, 1, 1},
  {&__pyx_n_s__decay_time, __pyx_k__decay_time, sizeof(__pyx_k__decay_time), 0, 0, 1, 1},
  {&__pyx_n_s__descr, __pyx_k__descr, sizeof(__pyx_k__descr), 0, 0, 1, 1},
  {&__pyx_n_s__doCalc, __pyx_k__doCalc, sizeof(__pyx_k__doCalc), 0, 0, 1, 1},
  {&__pyx_n_s__e_pointer, __pyx_k__e_pointer, sizeof(__pyx_k__e_pointer), 0, 0, 1, 1},
  {&__pyx_n_s__enrich_params, __pyx_k__enrich_params, sizeof(__pyx_k__enrich_params), 0, 0, 1, 1},
  {&__pyx_n_s__environ, __pyx_k__environ, sizeof(__pyx_k__environ), 0, 0, 1, 1},
  {&__pyx_n_s__ep, __pyx_k__ep, sizeof(__pyx_k__ep), 0, 0, 1, 1},
  {&__pyx_n_s__f, __pyx_k__f, sizeof(__pyx_k__f), 0, 0, 1, 1},
  {&__pyx_n_s__fccomp_pointer, __pyx_k__fccomp_pointer, sizeof(__pyx_k__fccomp_pointer), 0, 0, 1, 1},
  {&__pyx_n_s__fields, __pyx_k__fields, sizeof(__pyx_k__fields), 0, 0, 1, 1},
  {&__pyx_n_s__filename, __pyx_k__filename, sizeof(__pyx_k__filename), 0, 0, 1, 1},
  {&__pyx_n_s__flux, __pyx_k__flux, sizeof(__pyx_k__flux), 0, 0, 1, 1},
  {&__pyx_n_s__format, __pyx_k__format, sizeof(__pyx_k__format), 0, 0, 1, 1},
  {&__pyx_n_s__fp, __pyx_k__fp, sizeof(__pyx_k__fp), 0, 0, 1, 1},
  {&__pyx_n_s__initialize, __pyx_k__initialize, sizeof(__pyx_k__initialize), 0, 0, 1, 1},
  {&__pyx_n_s__input, __pyx_k__input, sizeof(__pyx_k__input), 0, 0, 1, 1},
  {&__pyx_n_s__isoname, __pyx_k__isoname, sizeof(__pyx_k__isoname), 0, 0, 1, 1},
  {&__pyx_n_s__items, __pyx_k__items, sizeof(__pyx_k__items), 0, 0, 1, 1},
  {&__pyx_n_s__itemsize, __pyx_k__itemsize, sizeof(__pyx_k__itemsize), 0, 0, 1, 1},
  {&__pyx_n_s__j, __pyx_k__j, sizeof(__pyx_k__j), 0, 0, 1, 1},
  {&__pyx_n_s__join, __pyx_k__join, sizeof(__pyx_k__join), 0, 0, 1, 1},
  {&__pyx_n_s__k, __pyx_k__k, sizeof(__pyx_k__k), 0, 0, 1, 1},
  {&__pyx_n_s__l, __pyx_k__l, sizeof(__pyx_k__l), 0, 0, 1, 1},
  {&__pyx_n_s__libfile, __pyx_k__libfile, sizeof(__pyx_k__libfile), 0, 0, 1, 1},
  {&__pyx_n_s__loadLib, __pyx_k__loadLib, sizeof(__pyx_k__loadLib), 0, 0, 1, 1},
  {&__pyx_n_s__m, __pyx_k__m, sizeof(__pyx_k__m), 0, 0, 1, 1},
  {&__pyx_n_s__mass_stream, __pyx_k__mass_stream, sizeof(__pyx_k__mass_stream), 0, 0, 1, 1},
  {&__pyx_n_s__mixed_2_zzaaam, __pyx_k__mixed_2_zzaaam, sizeof(__pyx_k__mixed_2_zzaaam), 0, 0, 1, 1},
  {&__pyx_n_s__ms_pointer, __pyx_k__ms_pointer, sizeof(__pyx_k__ms_pointer), 0, 0, 1, 1},
  {&__pyx_n_s__name, __pyx_k__name, sizeof(__pyx_k__name), 0, 0, 1, 1},
  {&__pyx_n_s__names, __pyx_k__names, sizeof(__pyx_k__names), 0, 0, 1, 1},
  {&__pyx_n_s__natural_name, __pyx_k__natural_name, sizeof(__pyx_k__natural_name), 0, 0, 1, 1},
  {&__pyx_n_s__ndim, __pyx_k__ndim, sizeof(__pyx_k__ndim), 0, 0, 1, 1},
  {&__pyx_n_s__np, __pyx_k__np, sizeof(__pyx_k__np), 0, 0, 1, 1},
  {&__pyx_n_s__numpy, __pyx_k__numpy, sizeof(__pyx_k__numpy), 0, 0, 1, 1},
  {&__pyx_n_s__obj, __pyx_k__obj, sizeof(__pyx_k__obj), 0, 0, 1, 1},
  {&__pyx_n_s__open_slots, __pyx_k__open_slots, sizeof(__pyx_k__open_slots), 0, 0, 1, 1},
  {&__pyx_n_s__os, __pyx_k__os, sizeof(__pyx_k__os), 0, 0, 1, 1},
  {&__pyx_n_s__params, __pyx_k__params, sizeof(__pyx_k__params), 0, 0, 1, 1},
  {&__pyx_n_s__params2track, __pyx_k__params2track, sizeof(__pyx_k__params2track), 0, 0, 1, 1},
  {&__pyx_n_s__path, __pyx_k__path, sizeof(__pyx_k__path), 0, 0, 1, 1},
  {&__pyx_n_s__phi, __pyx_k__phi, sizeof(__pyx_k__phi), 0, 0, 1, 1},
  {&__pyx_n_s__pnl, __pyx_k__pnl, sizeof(__pyx_k__pnl), 0, 0, 1, 1},
  {&__pyx_n_s__r, __pyx_k__r, sizeof(__pyx_k__r), 0, 0, 1, 1},
  {&__pyx_n_s__r1g_pointer, __pyx_k__r1g_pointer, sizeof(__pyx_k__r1g_pointer), 0, 0, 1, 1},
  {&__pyx_n_s__r_pointer, __pyx_k__r_pointer, sizeof(__pyx_k__r_pointer), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__reactor_parameters, __pyx_k__reactor_parameters, sizeof(__pyx_k__reactor_parameters), 0, 0, 1, 1},
  {&__pyx_n_s__readonly, __pyx_k__readonly, sizeof(__pyx_k__readonly), 0, 0, 1, 1},
  {&__pyx_n_s__rhoC, __pyx_k__rhoC, sizeof(__pyx_k__rhoC), 0, 0, 1, 1},
  {&__pyx_n_s__rhoF, __pyx_k__rhoF, sizeof(__pyx_k__rhoF), 0, 0, 1, 1},
  {&__pyx_n_s__rp_pointer, __pyx_k__rp_pointer, sizeof(__pyx_k__rp_pointer), 0, 0, 1, 1},
  {&__pyx_n_s__s_pointer, __pyx_k__s_pointer, sizeof(__pyx_k__s_pointer), 0, 0, 1, 1},
  {&__pyx_n_s__sepeff, __pyx_k__sepeff, sizeof(__pyx_k__sepeff), 0, 0, 1, 1},
  {&__pyx_n_s__setParams, __pyx_k__setParams, sizeof(__pyx_k__setParams), 0, 0, 1, 1},
  {&__pyx_n_s__shape, __pyx_k__shape, sizeof(__pyx_k__shape), 0, 0, 1, 1},
  {&__pyx_n_s__split, __pyx_k__split, sizeof(__pyx_k__split), 0, 0, 1, 1},
  {&__pyx_n_s__strides, __pyx_k__strides, sizeof(__pyx_k__strides), 0, 0, 1, 1},
  {&__pyx_n_s__suboffsets, __pyx_k__suboffsets, sizeof(__pyx_k__suboffsets), 0, 0, 1, 1},
  {&__pyx_n_s__total_slots, __pyx_k__total_slots, sizeof(__pyx_k__total_slots), 0, 0, 1, 1},
  {&__pyx_n_s__type_num, __pyx_k__type_num, sizeof(__pyx_k__type_num), 0, 0, 1, 1},
  {&__pyx_n_s__useDisadvantage, __pyx_k__useDisadvantage, sizeof(__pyx_k__useDisadvantage), 0, 0, 1, 1},
  {&__pyx_n_s__useZeta, __pyx_k__useZeta, sizeof(__pyx_k__useZeta), 0, 0, 1, 1},
  {&__pyx_n_s__writeHDF5, __pyx_k__writeHDF5, sizeof(__pyx_k__writeHDF5), 0, 0, 1, 1},
  {&__pyx_n_s__writeIsoPass, __pyx_k__writeIsoPass, sizeof(__pyx_k__writeIsoPass), 0, 0, 1, 1},
  {&__pyx_n_s__writeParamPass, __pyx_k__writeParamPass, sizeof(__pyx_k__writeParamPass), 0, 0, 1, 1},
  {&__pyx_n_s__writeText, __pyx_k__writeText, sizeof(__pyx_k__writeText), 0, 0, 1, 1},
  {&__pyx_n_s__writeout, __pyx_k__writeout, sizeof(__pyx_k__writeout), 0, 0, 1, 1},
  {&__pyx_n_s__xP_j, __pyx_k__xP_j, sizeof(__pyx_k__xP_j), 0, 0, 1, 1},
  {&__pyx_n_s__xW_j, __pyx_k__xW_j, sizeof(__pyx_k__xW_j), 0, 0, 1, 1},
  {&__pyx_n_s__x_F, __pyx_k__x_F, sizeof(__pyx_k__x_F), 0, 0, 1, 1},
  {&__pyx_n_s__x_P, __pyx_k__x_P, sizeof(__pyx_k__x_P), 0, 0, 1, 1},
  {&__pyx_n_s__x_W, __pyx_k__x_W, sizeof(__pyx_k__x_W), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_basestring = __Pyx_GetName(__pyx_b, __pyx_n_s__basestring); if (!__pyx_builtin_basestring) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetName(__pyx_b, __pyx_n_s__TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetName(__pyx_b, __pyx_n_s__RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":911
 *                     sepeff[isoname.mixed_2_zzaaam(key)] = value
 *             else:
 *                 raise TypeError("Separation keys must be strings or integers.")             # <<<<<<<<<<<<<<
 * 
 *         return sepeff
 */
  __pyx_k_tuple_3 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_3));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_2));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 0, ((PyObject *)__pyx_kp_s_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_3));

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1223
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0])
 *             else:
 *                 raise TypeError("'input' must be a MassStream, dict, or None.")             # <<<<<<<<<<<<<<
 *         else:
 *             if input is None:
 */
  __pyx_k_tuple_6 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_6));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_5));
  PyTuple_SET_ITEM(__pyx_k_tuple_6, 0, ((PyObject *)__pyx_kp_s_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_6));

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":1233
 *                 output.ms_pointer[0] = self.s_pointer.doCalc(<cpp_mass_stream.MassStream> in_ms.ms_pointer[0], <double> decay_time)
 *             else:
 *                 raise TypeError("'input' must be a MassStream, dict, or None.")             # <<<<<<<<<<<<<<
 * 
 *         return output
 */
  __pyx_k_tuple_7 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_7));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_5));
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 0, ((PyObject *)__pyx_kp_s_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_7));

  /* "numpy.pxd":206
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_k_tuple_12 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_12));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_11));
  PyTuple_SET_ITEM(__pyx_k_tuple_12, 0, ((PyObject *)__pyx_kp_u_11));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_11));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_12));

  /* "numpy.pxd":210
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_k_tuple_14 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_14));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_13));
  PyTuple_SET_ITEM(__pyx_k_tuple_14, 0, ((PyObject *)__pyx_kp_u_13));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_13));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_14));

  /* "numpy.pxd":248
 *                 if ((descr.byteorder == '>' and little_endian) or
 *                     (descr.byteorder == '<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_k_tuple_16 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_16)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_16));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_15));
  PyTuple_SET_ITEM(__pyx_k_tuple_16, 0, ((PyObject *)__pyx_kp_u_15));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_15));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_16));

  /* "numpy.pxd":787
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == '>' and little_endian) or
 */
  __pyx_k_tuple_19 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_19)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_19));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_18));
  PyTuple_SET_ITEM(__pyx_k_tuple_19, 0, ((PyObject *)__pyx_kp_u_18));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_18));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_19));

  /* "numpy.pxd":791
 *         if ((child.byteorder == '>' and little_endian) or
 *             (child.byteorder == '<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_k_tuple_20 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_20)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_20));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_15));
  PyTuple_SET_ITEM(__pyx_k_tuple_20, 0, ((PyObject *)__pyx_kp_u_15));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_15));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_20));

  /* "numpy.pxd":811
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_k_tuple_22 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_22)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_22));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_21));
  PyTuple_SET_ITEM(__pyx_k_tuple_22, 0, ((PyObject *)__pyx_kp_u_21));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_21));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_22));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  #if PY_VERSION_HEX < 0x02040000
  if (unlikely(__Pyx_Py23SetsImport() < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initBriPy(void); /*proto*/
PyMODINIT_FUNC initBriPy(void)
#else
PyMODINIT_FUNC PyInit_BriPy(void); /*proto*/
PyMODINIT_FUNC PyInit_BriPy(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  #if CYTHON_REFNANNY
  void* __pyx_refnanny = NULL;
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  __pyx_refnanny = __Pyx_RefNanny->SetupContext("PyMODINIT_FUNC PyInit_BriPy(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("BriPy"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_BriPy) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_5BriPy_BrightConfig) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "BrightConfig", (PyObject *)&__pyx_type_5BriPy_BrightConfig) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5BriPy_BrightConfig = &__pyx_type_5BriPy_BrightConfig;
  if (PyType_Ready(&__pyx_type_5BriPy_FCComp) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "FCComp", (PyObject *)&__pyx_type_5BriPy_FCComp) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5BriPy_FCComp = &__pyx_type_5BriPy_FCComp;
  if (PyType_Ready(&__pyx_type_5BriPy_EnrichmentParameters) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "EnrichmentParameters", (PyObject *)&__pyx_type_5BriPy_EnrichmentParameters) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5BriPy_EnrichmentParameters = &__pyx_type_5BriPy_EnrichmentParameters;
  __pyx_type_5BriPy_Enrichment.tp_base = __pyx_ptype_5BriPy_FCComp;
  if (PyType_Ready(&__pyx_type_5BriPy_Enrichment) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Enrichment", (PyObject *)&__pyx_type_5BriPy_Enrichment) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5BriPy_Enrichment = &__pyx_type_5BriPy_Enrichment;
  __pyx_type_5BriPy_Reprocess.tp_base = __pyx_ptype_5BriPy_FCComp;
  if (PyType_Ready(&__pyx_type_5BriPy_Reprocess) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Reprocess", (PyObject *)&__pyx_type_5BriPy_Reprocess) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5BriPy_Reprocess = &__pyx_type_5BriPy_Reprocess;
  __pyx_type_5BriPy_Storage.tp_base = __pyx_ptype_5BriPy_FCComp;
  if (PyType_Ready(&__pyx_type_5BriPy_Storage) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Storage", (PyObject *)&__pyx_type_5BriPy_Storage) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5BriPy_Storage = &__pyx_type_5BriPy_Storage;
  if (PyType_Ready(&__pyx_type_5BriPy_FluencePoint) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "FluencePoint", (PyObject *)&__pyx_type_5BriPy_FluencePoint) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5BriPy_FluencePoint = &__pyx_type_5BriPy_FluencePoint;
  if (PyType_Ready(&__pyx_type_5BriPy_ReactorParameters) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "ReactorParameters", (PyObject *)&__pyx_type_5BriPy_ReactorParameters) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5BriPy_ReactorParameters = &__pyx_type_5BriPy_ReactorParameters;
  __pyx_type_5BriPy_Reactor1G.tp_base = __pyx_ptype_5BriPy_FCComp;
  if (PyType_Ready(&__pyx_type_5BriPy_Reactor1G) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Reactor1G", (PyObject *)&__pyx_type_5BriPy_Reactor1G) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5BriPy_Reactor1G = &__pyx_type_5BriPy_Reactor1G;
  /*--- Type import code ---*/
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_11mass_stream_MassStream = __Pyx_ImportType("mass_stream", "MassStream", sizeof(struct __pyx_obj_11mass_stream_MassStream), 1); if (unlikely(!__pyx_ptype_11mass_stream_MassStream)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("stlconverters"); if (!__pyx_t_1) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "dict_to_map_int_dbl", (void (**)(void))&__pyx_f_13stlconverters_dict_to_map_int_dbl, "std::map<int,double> (PyObject *)") < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "map_to_dict_int_dbl", (void (**)(void))&__pyx_f_13stlconverters_map_to_dict_int_dbl, "PyObject *(std::map<int,double>)") < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "dict_to_map_str_int", (void (**)(void))&__pyx_f_13stlconverters_dict_to_map_str_int, "std::map<std::string,int> (PyObject *)") < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "map_to_dict_str_int", (void (**)(void))&__pyx_f_13stlconverters_map_to_dict_str_int, "PyObject *(std::map<std::string,int>)") < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "dict_to_map_int_str", (void (**)(void))&__pyx_f_13stlconverters_dict_to_map_int_str, "std::map<int,std::string> (PyObject *)") < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "map_to_dict_int_str", (void (**)(void))&__pyx_f_13stlconverters_map_to_dict_int_str, "PyObject *(std::map<int,std::string>)") < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "dict_to_map_str_dbl", (void (**)(void))&__pyx_f_13stlconverters_dict_to_map_str_dbl, "std::map<std::string,double> (PyObject *)") < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "map_to_dict_str_dbl", (void (**)(void))&__pyx_f_13stlconverters_map_to_dict_str_dbl, "PyObject *(std::map<std::string,double>)") < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "py_to_cpp_set_int", (void (**)(void))&__pyx_f_13stlconverters_py_to_cpp_set_int, "std::set<int> (PyObject *)") < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "cpp_to_py_set_int", (void (**)(void))&__pyx_f_13stlconverters_cpp_to_py_set_int, "PyObject *(std::set<int>)") < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "py_to_cpp_set_str", (void (**)(void))&__pyx_f_13stlconverters_py_to_cpp_set_str, "std::set<std::string> (PyObject *)") < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "cpp_to_py_set_str", (void (**)(void))&__pyx_f_13stlconverters_cpp_to_py_set_str, "PyObject *(std::set<std::string>)") < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "array_to_vector_1d_dbl", (void (**)(void))&__pyx_f_13stlconverters_array_to_vector_1d_dbl, "std::vector<double> (PyArrayObject *)") < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "vector_to_array_1d_dbl", (void (**)(void))&__pyx_f_13stlconverters_vector_to_array_1d_dbl, "PyArrayObject *(std::vector<double>)") < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "dict_to_map_int_vector_to_array_1d_dbl", (void (**)(void))&__pyx_f_13stlconverters_dict_to_map_int_vector_to_array_1d_dbl, "std::map<int,std::vector<double> > (PyObject *)") < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "map_to_dict_int_array_to_vector_1d_dbl", (void (**)(void))&__pyx_f_13stlconverters_map_to_dict_int_array_to_vector_1d_dbl, "PyObject *(std::map<int,std::vector<double> >)") < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*--- Execution code ---*/

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":11
 * 
 * cimport numpy as np
 * import numpy as np             # <<<<<<<<<<<<<<
 * 
 * # local imports
 */
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__numpy), 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__np, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":16
 * cimport std
 * 
 * import isoname             # <<<<<<<<<<<<<<
 * 
 * cimport cpp_mass_stream
 */
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__isoname), 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__isoname, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":27
 * 
 * cimport mass_stream
 * import mass_stream             # <<<<<<<<<<<<<<
 * 
 * import os
 */
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__mass_stream), 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mass_stream, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":29
 * import mass_stream
 * 
 * import os             # <<<<<<<<<<<<<<
 * 
 * import bright_data
 */
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__os), 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__os, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":31
 * import os
 * 
 * import bright_data             # <<<<<<<<<<<<<<
 * 
 * ######################################
 */
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__bright_data), 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__bright_data, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":45
 * 
 * # Expose the C-code start up routine
 * def BrightStart():             # <<<<<<<<<<<<<<
 *     cpp_bright.BrightStart()
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5BriPy_1BrightStart, NULL, __pyx_n_s__BriPy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__BrightStart, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":50
 * 
 * # Run the appropriate start-up routines
 * PyBrightStart()             # <<<<<<<<<<<<<<
 * BrightStart()
 * 
 */
  __pyx_t_2 = __pyx_f_5BriPy_PyBrightStart(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":51
 * # Run the appropriate start-up routines
 * PyBrightStart()
 * BrightStart()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__BrightStart); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":116
 * 
 * # Make a singleton of the Bright config object
 * bright_config = BrightConfig()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5BriPy_BrightConfig)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__bright_config, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":120
 * 
 * # Load isos2track from file functions
 * def load_isos2track_hdf5(char * filename, char * datasetname="", bint clear=False):             # <<<<<<<<<<<<<<
 *     """This convience function tries to load the isos2track set from a dataset
 *     in an HDF5 file.  The dataset *must* be of integer type.  String-based
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_5BriPy_2load_isos2track_hdf5, NULL, __pyx_n_s__BriPy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_23, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":152
 * 
 * 
 * def load_isos2track_text(char * filename, bint clear=False):             # <<<<<<<<<<<<<<
 *     """This convience function tries to load the isos2track set from a text
 *     file.  The nuclide names may use any naming convention.  Mixing different
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_5BriPy_3load_isos2track_text, NULL, __pyx_n_s__BriPy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_24, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":502
 * 
 * 
 * def UraniumEnrichmentDefaults():             # <<<<<<<<<<<<<<
 *     cdef cpp_bright.EnrichmentParameters cpp_ued = cpp_bright.fillUraniumEnrichmentDefaults()
 *     cdef EnrichmentParameters ued = EnrichmentParameters()
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_5BriPy_4UraniumEnrichmentDefaults, NULL, __pyx_n_s__BriPy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_25, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/scopatz/bright/BriPy/src/BriPy/bright_wrapper.pyx":915
 *         return sepeff
 * 
 *     def __cinit__(self, dict sepeff={}, char * name=""):             # <<<<<<<<<<<<<<
 *         sepeff = self._cpp_sepeff(sepeff)
 *         self.r_pointer = new cpp_bright.Reprocess(conv.dict_to_map_int_dbl(sepeff), std.string(name))
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_k_4 = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/BriPy/bright.pyx":1
 * #include "../MassStream/mass_stream.pyx"             # <<<<<<<<<<<<<<
 * include "bright_wrapper.pyx"
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_3)) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

  /* "numpy.pxd":963
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    __Pyx_AddTraceback("init BriPy");
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init BriPy");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}


static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
        #if PY_VERSION_HEX < 0x02050000
                 "need more than %d value%s to unpack", (int)index,
        #else
                 "need more than %zd value%s to unpack", index,
        #endif
                 (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
        #if PY_VERSION_HEX < 0x02050000
            "too many values to unpack (expected %d)", (int)expected);
        #else
            "too many values to unpack (expected %zd)", expected);
        #endif
}

static PyObject *__Pyx_UnpackItem(PyObject *iter, Py_ssize_t index) {
    PyObject *item;
    if (!(item = PyIter_Next(iter))) {
        if (!PyErr_Occurred()) {
            __Pyx_RaiseNeedMoreValuesError(index);
        }
    }
    return item;
}

static int __Pyx_EndUnpack(PyObject *iter, Py_ssize_t expected) {
    PyObject *item;
    if ((item = PyIter_Next(iter))) {
        Py_DECREF(item);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    else if (!PyErr_Occurred())
        return 0;
    else
        return -1;
}

static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
    if (Py_TYPE(obj)->tp_as_number && Py_TYPE(obj)->tp_as_number->nb_float) {
        return PyFloat_AsDouble(obj);
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}

typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  int new_count, enc_count;
  int is_complex;
  char enc_type;
  char packmode;
} __Pyx_BufFmt_Context;

static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}

static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}

static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  char msg[] = {ch, 0};
  PyErr_Format(PyExc_ValueError, "Unexpected format string character: '%s'", msg);
}

static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'b': return "'char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 0: return "end";
    default: return "unparseable format string";
  }
}

static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}

static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}

typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_s_long_long;
#endif

static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_s_long_long) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}

static size_t __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'h': case 'i': case 'l': case 'q': return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q': return 'U';
    case 'f': case 'd': case 'g': return (is_complex ? 'C' : 'R');
    case 'O': return 'O';
    case 'P': return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}

static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}

static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset;
  if (ctx->enc_type == 0) return 0;
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;

    if (ctx->packmode == '@' || ctx->packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->packmode == '@') {
      int align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      int align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
    }

    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        /* special case -- treat as struct rather than complex number */
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }

      __Pyx_BufFmt_RaiseExpected(ctx);
      return -1;
    }

    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %"PY_FORMAT_SIZE_T"d "
                   "but %"PY_FORMAT_SIZE_T"d expected", ctx->fmt_offset, offset);
      return -1;
    }

    ctx->fmt_offset += size;

    --ctx->enc_count; /* Consume from buffer string */

    /* Done checking, move to next field, pushing or popping struct stack if needed */
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break; /* breaks both loops as ctx->enc_count == 0 */
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue; /* empty struct */
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}

static int __Pyx_BufFmt_FirstPack(__Pyx_BufFmt_Context* ctx) {
  if (ctx->enc_type != 0 || ctx->packmode != '@') {
    PyErr_SetString(PyExc_ValueError, "Buffer packing mode currently only allowed at beginning of format string (this is a defect)");
    return -1;
  }
  return 0;
}

static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case 10:
      case 13:
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        if (__Pyx_BufFmt_FirstPack(ctx) == -1) return NULL;
        ctx->packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        if (__Pyx_BufFmt_FirstPack(ctx) == -1) return NULL;
        ctx->packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        if (__Pyx_BufFmt_FirstPack(ctx) == -1) return NULL;
        ctx->packmode = *ts++;
        break;
      case 'T': /* substruct */
        {
          int i;
          const char* ts_after_sub;
          int struct_count = ctx->new_count;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
        }
        break;
      case '}': /* end of substruct; either repeat or move on */
        ++ts;
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }        /* fall through */
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex) {
          /* Continue pooling same type */
          ctx->enc_count += ctx->new_count;
        } else {
          /* New type */
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_count = ctx->new_count;
          ctx->enc_type = *ts;
          ctx->is_complex = got_Z;
        }
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      default:
        {
          ctx->new_count = __Pyx_BufFmt_ParseNumber(&ts);
          if (ctx->new_count == -1) { /* First char was not a digit */
            char msg[2] = { *ts, 0 };
            PyErr_Format(PyExc_ValueError,
                         "Does not understand character buffer dtype format string ('%s')", msg);
            return NULL;
          }
        }

    }
  }
}

static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}

static CYTHON_INLINE int __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj, __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack) {
  if (obj == Py_None) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%"PY_FORMAT_SIZE_T"d byte%s) does not match size of '%s' (%"PY_FORMAT_SIZE_T"d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name,
      dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}

static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
  #if PY_VERSION_HEX >= 0x02060000
  if (Py_TYPE(obj)->tp_flags & Py_TPFLAGS_HAVE_NEWBUFFER)
      return PyObject_GetBuffer(obj, view, flags);
  #endif
  if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pf_5numpy_7ndarray___getbuffer__(obj, view, flags);
  else {
  PyErr_Format(PyExc_TypeError, "'%100s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
  return -1;
    }
}

static void __Pyx_ReleaseBuffer(Py_buffer *view) {
  PyObject* obj = view->obj;
  if (obj) {
if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pf_5numpy_7ndarray_1__releasebuffer__(obj, view);
    Py_DECREF(obj);
    view->obj = NULL;
  }
}

#endif

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    long size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];

    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(class_name);
    #else
    py_name = PyUnicode_FromString(class_name);
    #endif
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
    if (!strict && ((PyTypeObject *)result)->tp_basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        PyErr_Warn(NULL, warning);
        #else
        PyErr_WarnEx(NULL, warning, 0);
        #endif
    }
    else if (((PyTypeObject *)result)->tp_basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;

    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(name);
    #else
    py_name = PyUnicode_FromString(name);
    #endif
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;

    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%s does not export expected C function %s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %s.%s has wrong signature (expected %s, got %s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %s.%s has wrong signature (expected %s, got %s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
