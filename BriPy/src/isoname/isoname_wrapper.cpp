/* Generated by Cython 0.14.1rc3 on Mon Feb  7 12:50:50 2011 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE_API__isoname
#include <utility>
#include <map>
#include <set>
#include <string>
#include "../isoname.h"
#include "stdexcept"

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "isoname_wrapper.pyx",
};

/* Type declarations */

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
  end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
  }
  #define __Pyx_RefNannySetupContext(name)           void *__pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XDECREF(r) do { if((r) != NULL) {__Pyx_DECREF(r);} } while(0)
#else
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);} } while(0)
#define __Pyx_XGOTREF(r) do { if((r) != NULL) {__Pyx_GOTREF(r);} } while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

static PyObject* __Pyx_PyObject_PopIndex(PyObject* L, Py_ssize_t ix);

static CYTHON_INLINE void __Pyx_RaiseNoneIndexingError(void);

#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    if (unlikely(d == Py_None)) {
        __Pyx_RaiseNoneIndexingError();
        return NULL;
    }
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred())
            PyErr_SetObject(PyExc_KeyError, key);
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

#define __Pyx_SetItemInt(o, i, v, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_SetItemInt_Fast(o, i, v) : \
                                                    __Pyx_SetItemInt_Generic(o, to_py_func(i), v))

static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}

static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v) {
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        Py_INCREF(v);
        Py_DECREF(PyList_GET_ITEM(o, i));
        PyList_SET_ITEM(o, i, v);
        return 1;
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_ass_item && (likely(i >= 0)))
        return PySequence_SetItem(o, i, v);
    else {
        PyObject *j = PyInt_FromSsize_t(i);
        return __Pyx_SetItemInt_Generic(o, j, v);
    }
}

#if PY_VERSION_HEX < 0x02050000
#ifndef PyAnySet_CheckExact

#define PyAnySet_CheckExact(ob) \
    ((ob)->ob_type == &PySet_Type || \
     (ob)->ob_type == &PyFrozenSet_Type)

#define PySet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PySet_Type, (iterable), NULL)

#define Pyx_PyFrozenSet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PyFrozenSet_Type, (iterable), NULL)

#define PySet_Size(anyset) \
    PyObject_Size((anyset))

#define PySet_Contains(anyset, key) \
    PySequence_Contains((anyset), (key))

#define PySet_Pop(set) \
    PyObject_CallMethod(set, (char *)"pop", NULL)

static CYTHON_INLINE int PySet_Clear(PyObject *set) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"clear", NULL);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Discard(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"discard", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Add(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"add", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

#endif /* PyAnySet_CheckExact (<= Py2.4) */

#if PY_VERSION_HEX < 0x02040000
#ifndef Py_SETOBJECT_H
#define Py_SETOBJECT_H

static PyTypeObject *__Pyx_PySet_Type = NULL;
static PyTypeObject *__Pyx_PyFrozenSet_Type = NULL;

#define PySet_Type (*__Pyx_PySet_Type)
#define PyFrozenSet_Type (*__Pyx_PyFrozenSet_Type)

#define PyAnySet_Check(ob) \
    (PyAnySet_CheckExact(ob) || \
     PyType_IsSubtype((ob)->ob_type, &PySet_Type) || \
     PyType_IsSubtype((ob)->ob_type, &PyFrozenSet_Type))

#define PyFrozenSet_CheckExact(ob) ((ob)->ob_type == &PyFrozenSet_Type)

static int __Pyx_Py23SetsImport(void) {
    PyObject *sets=0, *Set=0, *ImmutableSet=0;

    sets = PyImport_ImportModule((char *)"sets");
    if (!sets) goto bad;
    Set = PyObject_GetAttrString(sets, (char *)"Set");
    if (!Set) goto bad;
    ImmutableSet = PyObject_GetAttrString(sets, (char *)"ImmutableSet");
    if (!ImmutableSet) goto bad;
    Py_DECREF(sets);

    __Pyx_PySet_Type       = (PyTypeObject*) Set;
    __Pyx_PyFrozenSet_Type = (PyTypeObject*) ImmutableSet;

    return 0;

 bad:
    Py_XDECREF(sets);
    Py_XDECREF(Set);
    Py_XDECREF(ImmutableSet);
    return -1;
}

#else
static int __Pyx_Py23SetsImport(void) { return 0; }
#endif /* !Py_SETOBJECT_H */
#endif /* < Py2.4  */
#endif /* < Py2.5  */

#ifndef __Pyx_CppExn2PyErr
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::invalid_argument& exn) {
    // Catch a handful of different errors here and turn them into the
    // equivalent Python errors.
    // Change invalid_argument to ValueError
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::out_of_range& exn) {
    // Change out_of_range to IndexError
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
/* Module declarations from libcpp.utility */

/* Module declarations from libcpp.map */

/* Module declarations from libcpp.pair */

/* Module declarations from libcpp.set */

/* Module declarations from std */

/* Module declarations from cpp_isoname */

/* Module declarations from isoname */

static std::map<std::string,int>::iterator __pyx_v_7isoname_LLzz_iter;
static std::map<int,std::string>::iterator __pyx_v_7isoname_zzLL_iter;
static std::set<std::string>::iterator __pyx_v_7isoname_LAN_iter;
static std::set<std::string>::iterator __pyx_v_7isoname_ACT_iter;
static std::set<std::string>::iterator __pyx_v_7isoname_TRU_iter;
static std::set<std::string>::iterator __pyx_v_7isoname_MA_iter;
static std::set<std::string>::iterator __pyx_v_7isoname_FP_iter;
static std::set<int>::iterator __pyx_v_7isoname_lan_iter;
static std::set<int>::iterator __pyx_v_7isoname_act_iter;
static std::set<int>::iterator __pyx_v_7isoname_tru_iter;
static std::set<int>::iterator __pyx_v_7isoname_ma_iter;
static std::set<int>::iterator __pyx_v_7isoname_fp_iter;
#define __Pyx_MODULE_NAME "isoname"
static int __pyx_module_is_main_isoname = 0;

/* Implementation of isoname */
static PyObject *__pyx_builtin_basestring;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static char __pyx_k_1[] = "Nuclide not a string ot integer.";
static char __pyx_k_7[] = "RearRemoveDuplicates";
static char __pyx_k_8[] = "Python wrapper for isoname library.";
static char __pyx_k_9[] = "LLAAAM_2_zzaaam_List";
static char __pyx_k_10[] = "zzaaam_2_LLAAAM_List";
static char __pyx_k_11[] = "isovec_keys_2_zzaaam";
static char __pyx_k_12[] = "isovec_keys_2_LLAAAM";
static char __pyx_k__FP[] = "FP";
static char __pyx_k__MA[] = "MA";
static char __pyx_k__fp[] = "fp";
static char __pyx_k__ma[] = "ma";
static char __pyx_k__ACT[] = "ACT";
static char __pyx_k__LAN[] = "LAN";
static char __pyx_k__TRU[] = "TRU";
static char __pyx_k__act[] = "act";
static char __pyx_k__add[] = "add";
static char __pyx_k__end[] = "end";
static char __pyx_k__lan[] = "lan";
static char __pyx_k__tru[] = "tru";
static char __pyx_k__LLzz[] = "LLzz";
static char __pyx_k__keys[] = "keys";
static char __pyx_k__zzLL[] = "zzLL";
static char __pyx_k__begin[] = "begin";
static char __pyx_k__c_str[] = "c_str";
static char __pyx_k__count[] = "count";
static char __pyx_k__first[] = "first";
static char __pyx_k__range[] = "range";
static char __pyx_k__second[] = "second";
static char __pyx_k__isoname[] = "isoname";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__TypeError[] = "TypeError";
static char __pyx_k__basestring[] = "basestring";
static char __pyx_k__nuc_weight[] = "nuc_weight";
static char __pyx_k__CurrentForm[] = "CurrentForm";
static char __pyx_k__mixed_2_MCNP[] = "mixed_2_MCNP";
static char __pyx_k__LLAAAM_2_MCNP[] = "LLAAAM_2_MCNP";
static char __pyx_k__MCNP_2_LLAAAM[] = "MCNP_2_LLAAAM";
static char __pyx_k__MCNP_2_zzaaam[] = "MCNP_2_zzaaam";
static char __pyx_k__zzaaam_2_MCNP[] = "zzaaam_2_MCNP";
static char __pyx_k__mixed_2_LLAAAM[] = "mixed_2_LLAAAM";
static char __pyx_k__mixed_2_zzaaam[] = "mixed_2_zzaaam";
static char __pyx_k__LLAAAM_2_zzaaam[] = "LLAAAM_2_zzaaam";
static char __pyx_k__zzaaam_2_LLAAAM[] = "zzaaam_2_LLAAAM";
static char __pyx_k__mixed_2_MCNP_List[] = "mixed_2_MCNP_List";
static char __pyx_k__nuc_weight_zzaaam[] = "nuc_weight_zzaaam";
static char __pyx_k__LLAAAM_2_MCNP_List[] = "LLAAAM_2_MCNP_List";
static char __pyx_k__MCNP_2_LLAAAM_List[] = "MCNP_2_LLAAAM_List";
static char __pyx_k__MCNP_2_zzaaam_List[] = "MCNP_2_zzaaam_List";
static char __pyx_k__isovec_keys_2_MCNP[] = "isovec_keys_2_MCNP";
static char __pyx_k__zzaaam_2_MCNP_List[] = "zzaaam_2_MCNP_List";
static char __pyx_k__mixed_2_LLAAAM_List[] = "mixed_2_LLAAAM_List";
static char __pyx_k__mixed_2_zzaaam_List[] = "mixed_2_zzaaam_List";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_n_s_10;
static PyObject *__pyx_n_s_11;
static PyObject *__pyx_n_s_12;
static PyObject *__pyx_n_s_7;
static PyObject *__pyx_n_s_9;
static PyObject *__pyx_n_s__ACT;
static PyObject *__pyx_n_s__CurrentForm;
static PyObject *__pyx_n_s__FP;
static PyObject *__pyx_n_s__LAN;
static PyObject *__pyx_n_s__LLAAAM_2_MCNP;
static PyObject *__pyx_n_s__LLAAAM_2_MCNP_List;
static PyObject *__pyx_n_s__LLAAAM_2_zzaaam;
static PyObject *__pyx_n_s__LLzz;
static PyObject *__pyx_n_s__MA;
static PyObject *__pyx_n_s__MCNP_2_LLAAAM;
static PyObject *__pyx_n_s__MCNP_2_LLAAAM_List;
static PyObject *__pyx_n_s__MCNP_2_zzaaam;
static PyObject *__pyx_n_s__MCNP_2_zzaaam_List;
static PyObject *__pyx_n_s__TRU;
static PyObject *__pyx_n_s__TypeError;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__act;
static PyObject *__pyx_n_s__add;
static PyObject *__pyx_n_s__basestring;
static PyObject *__pyx_n_s__begin;
static PyObject *__pyx_n_s__c_str;
static PyObject *__pyx_n_s__count;
static PyObject *__pyx_n_s__end;
static PyObject *__pyx_n_s__first;
static PyObject *__pyx_n_s__fp;
static PyObject *__pyx_n_s__isoname;
static PyObject *__pyx_n_s__isovec_keys_2_MCNP;
static PyObject *__pyx_n_s__keys;
static PyObject *__pyx_n_s__lan;
static PyObject *__pyx_n_s__ma;
static PyObject *__pyx_n_s__mixed_2_LLAAAM;
static PyObject *__pyx_n_s__mixed_2_LLAAAM_List;
static PyObject *__pyx_n_s__mixed_2_MCNP;
static PyObject *__pyx_n_s__mixed_2_MCNP_List;
static PyObject *__pyx_n_s__mixed_2_zzaaam;
static PyObject *__pyx_n_s__mixed_2_zzaaam_List;
static PyObject *__pyx_n_s__nuc_weight;
static PyObject *__pyx_n_s__nuc_weight_zzaaam;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__second;
static PyObject *__pyx_n_s__tru;
static PyObject *__pyx_n_s__zzLL;
static PyObject *__pyx_n_s__zzaaam_2_LLAAAM;
static PyObject *__pyx_n_s__zzaaam_2_MCNP;
static PyObject *__pyx_n_s__zzaaam_2_MCNP_List;
static PyObject *__pyx_int_1;
static PyObject *__pyx_k_tuple_2;
static PyObject *__pyx_k_tuple_3;
static PyObject *__pyx_k_tuple_4;
static PyObject *__pyx_k_tuple_5;
static PyObject *__pyx_k_tuple_6;

/* "src/isoname/isoname_wrapper.pyx":103
 * #
 * 
 * def CurrentForm(nuc):             # <<<<<<<<<<<<<<
 *     """Find the current form of a nuclide.
 * 
 */

static PyObject *__pyx_pf_7isoname_CurrentForm(PyObject *__pyx_self, PyObject *__pyx_v_nuc); /*proto*/
static char __pyx_doc_7isoname_CurrentForm[] = "Find the current form of a nuclide.\n\n    Args:\n        * nuc (int or str): Input nuclide.\n\n    Returns:\n        * form_flag (str): The form identifier string from [\"zzaaam\", \"LLAAAM\", \"MCNP\"].\n    ";
static PyMethodDef __pyx_mdef_7isoname_CurrentForm = {__Pyx_NAMESTR("CurrentForm"), (PyCFunction)__pyx_pf_7isoname_CurrentForm, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_CurrentForm)};
static PyObject *__pyx_pf_7isoname_CurrentForm(PyObject *__pyx_self, PyObject *__pyx_v_nuc) {
  std::string __pyx_v_cpp_CurrentForm;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  char *__pyx_t_2;
  std::string __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("CurrentForm");
  __pyx_self = __pyx_self;

  /* "src/isoname/isoname_wrapper.pyx":114
 *     cdef std.string cpp_CurrentForm
 * 
 *     if isinstance(nuc, basestring):             # <<<<<<<<<<<<<<
 *         cpp_CurrentForm = cpp_isoname.CurrentForm(std.string(nuc))
 *     elif isinstance(nuc, int):
 */
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_nuc, __pyx_builtin_basestring); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "src/isoname/isoname_wrapper.pyx":115
 * 
 *     if isinstance(nuc, basestring):
 *         cpp_CurrentForm = cpp_isoname.CurrentForm(std.string(nuc))             # <<<<<<<<<<<<<<
 *     elif isinstance(nuc, int):
 *         cpp_CurrentForm = cpp_isoname.CurrentForm(<int> nuc)
 */
    __pyx_t_2 = PyBytes_AsString(__pyx_v_nuc); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    try {__pyx_t_3 = isoname::CurrentForm(std::string(__pyx_t_2));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    __pyx_v_cpp_CurrentForm = __pyx_t_3;
    goto __pyx_L5;
  }

  /* "src/isoname/isoname_wrapper.pyx":116
 *     if isinstance(nuc, basestring):
 *         cpp_CurrentForm = cpp_isoname.CurrentForm(std.string(nuc))
 *     elif isinstance(nuc, int):             # <<<<<<<<<<<<<<
 *         cpp_CurrentForm = cpp_isoname.CurrentForm(<int> nuc)
 *     else:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_nuc); 
  if (__pyx_t_1) {

    /* "src/isoname/isoname_wrapper.pyx":117
 *         cpp_CurrentForm = cpp_isoname.CurrentForm(std.string(nuc))
 *     elif isinstance(nuc, int):
 *         cpp_CurrentForm = cpp_isoname.CurrentForm(<int> nuc)             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Nuclide not a string ot integer.")
 */
    __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_v_nuc); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    try {__pyx_t_3 = isoname::CurrentForm(__pyx_t_4);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    __pyx_v_cpp_CurrentForm = __pyx_t_3;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "src/isoname/isoname_wrapper.pyx":119
 *         cpp_CurrentForm = cpp_isoname.CurrentForm(<int> nuc)
 *     else:
 *         raise TypeError("Nuclide not a string ot integer.")             # <<<<<<<<<<<<<<
 * 
 *     return cpp_CurrentForm.c_str()
 */
    __pyx_t_5 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  /* "src/isoname/isoname_wrapper.pyx":121
 *         raise TypeError("Nuclide not a string ot integer.")
 * 
 *     return cpp_CurrentForm.c_str()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyBytes_FromString(__pyx_v_cpp_CurrentForm.c_str()); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __pyx_r = ((PyObject *)__pyx_t_5);
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("isoname.CurrentForm");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":128
 * #
 * 
 * def LLAAAM_2_zzaaam(char * nuc):             # <<<<<<<<<<<<<<
 *     """Converts a nuclide from LLAAAM form to its zzaaam form.
 * 
 */

static PyObject *__pyx_pf_7isoname_1LLAAAM_2_zzaaam(PyObject *__pyx_self, PyObject *__pyx_arg_nuc); /*proto*/
static char __pyx_doc_7isoname_1LLAAAM_2_zzaaam[] = "Converts a nuclide from LLAAAM form to its zzaaam form. \n\n    Args:\n        * nuc (str): Input nuclide in LLAAAM form.\n\n    Returns:\n        * newnuc (int): Output nuclide in zzaaam form.\n    ";
static PyMethodDef __pyx_mdef_7isoname_1LLAAAM_2_zzaaam = {__Pyx_NAMESTR("LLAAAM_2_zzaaam"), (PyCFunction)__pyx_pf_7isoname_1LLAAAM_2_zzaaam, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_1LLAAAM_2_zzaaam)};
static PyObject *__pyx_pf_7isoname_1LLAAAM_2_zzaaam(PyObject *__pyx_self, PyObject *__pyx_arg_nuc) {
  char *__pyx_v_nuc;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("LLAAAM_2_zzaaam");
  __pyx_self = __pyx_self;
  assert(__pyx_arg_nuc); {
    __pyx_v_nuc = PyBytes_AsString(__pyx_arg_nuc); if (unlikely((!__pyx_v_nuc) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("isoname.LLAAAM_2_zzaaam");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "src/isoname/isoname_wrapper.pyx":137
 *         * newnuc (int): Output nuclide in zzaaam form.
 *     """
 *     return cpp_isoname.LLAAAM_2_zzaaam(std.string(nuc))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_1 = isoname::LLAAAM_2_zzaaam(std::string(__pyx_v_nuc));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("isoname.LLAAAM_2_zzaaam");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":140
 * 
 * 
 * def LLAAAM_2_MCNP(char * nuc):             # <<<<<<<<<<<<<<
 *     """Converts a nuclide from LLAAAM form to its MCNP form.
 * 
 */

static PyObject *__pyx_pf_7isoname_2LLAAAM_2_MCNP(PyObject *__pyx_self, PyObject *__pyx_arg_nuc); /*proto*/
static char __pyx_doc_7isoname_2LLAAAM_2_MCNP[] = "Converts a nuclide from LLAAAM form to its MCNP form. \n\n    Args:\n        * nuc (str): Input nuclide in LLAAAM form.\n\n    Returns:\n        * newnuc (int): Output nuclide in MCNP form.\n    ";
static PyMethodDef __pyx_mdef_7isoname_2LLAAAM_2_MCNP = {__Pyx_NAMESTR("LLAAAM_2_MCNP"), (PyCFunction)__pyx_pf_7isoname_2LLAAAM_2_MCNP, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_2LLAAAM_2_MCNP)};
static PyObject *__pyx_pf_7isoname_2LLAAAM_2_MCNP(PyObject *__pyx_self, PyObject *__pyx_arg_nuc) {
  char *__pyx_v_nuc;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("LLAAAM_2_MCNP");
  __pyx_self = __pyx_self;
  assert(__pyx_arg_nuc); {
    __pyx_v_nuc = PyBytes_AsString(__pyx_arg_nuc); if (unlikely((!__pyx_v_nuc) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("isoname.LLAAAM_2_MCNP");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "src/isoname/isoname_wrapper.pyx":149
 *         * newnuc (int): Output nuclide in MCNP form.
 *     """
 *     return cpp_isoname.LLAAAM_2_MCNP(std.string(nuc))             # <<<<<<<<<<<<<<
 * 
 * #
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_1 = isoname::LLAAAM_2_MCNP(std::string(__pyx_v_nuc));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("isoname.LLAAAM_2_MCNP");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":155
 * #
 * 
 * def zzaaam_2_LLAAAM(int nuc):             # <<<<<<<<<<<<<<
 *     """Converts a nuclide from zzaaam form to its LLAAAM form.
 * 
 */

static PyObject *__pyx_pf_7isoname_3zzaaam_2_LLAAAM(PyObject *__pyx_self, PyObject *__pyx_arg_nuc); /*proto*/
static char __pyx_doc_7isoname_3zzaaam_2_LLAAAM[] = "Converts a nuclide from zzaaam form to its LLAAAM form. \n\n    Args:\n        * nuc (str): Input nuclide in zzaaam form.\n\n    Returns:\n        * newnuc (int): Output nuclide in LLAAAM form.\n    ";
static PyMethodDef __pyx_mdef_7isoname_3zzaaam_2_LLAAAM = {__Pyx_NAMESTR("zzaaam_2_LLAAAM"), (PyCFunction)__pyx_pf_7isoname_3zzaaam_2_LLAAAM, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_3zzaaam_2_LLAAAM)};
static PyObject *__pyx_pf_7isoname_3zzaaam_2_LLAAAM(PyObject *__pyx_self, PyObject *__pyx_arg_nuc) {
  int __pyx_v_nuc;
  std::string __pyx_v_cpp_LLAAAM;
  PyObject *__pyx_r = NULL;
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("zzaaam_2_LLAAAM");
  __pyx_self = __pyx_self;
  assert(__pyx_arg_nuc); {
    __pyx_v_nuc = __Pyx_PyInt_AsInt(__pyx_arg_nuc); if (unlikely((__pyx_v_nuc == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("isoname.zzaaam_2_LLAAAM");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "src/isoname/isoname_wrapper.pyx":164
 *         * newnuc (int): Output nuclide in LLAAAM form.
 *     """
 *     cdef std.string cpp_LLAAAM = cpp_isoname.zzaaam_2_LLAAAM(nuc)             # <<<<<<<<<<<<<<
 *     return cpp_LLAAAM.c_str()
 * 
 */
  try {__pyx_t_1 = isoname::zzaaam_2_LLAAAM(__pyx_v_nuc);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_cpp_LLAAAM = __pyx_t_1;

  /* "src/isoname/isoname_wrapper.pyx":165
 *     """
 *     cdef std.string cpp_LLAAAM = cpp_isoname.zzaaam_2_LLAAAM(nuc)
 *     return cpp_LLAAAM.c_str()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_cpp_LLAAAM.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("isoname.zzaaam_2_LLAAAM");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":168
 * 
 * 
 * def zzaaam_2_MCNP(int nuc):             # <<<<<<<<<<<<<<
 *     """Converts a nuclide from zzaaam form to its MCNP form.
 * 
 */

static PyObject *__pyx_pf_7isoname_4zzaaam_2_MCNP(PyObject *__pyx_self, PyObject *__pyx_arg_nuc); /*proto*/
static char __pyx_doc_7isoname_4zzaaam_2_MCNP[] = "Converts a nuclide from zzaaam form to its MCNP form. \n\n    Args:\n        * nuc (str): Input nuclide in zzaaam form.\n\n    Returns:\n        * newnuc (int): Output nuclide in MCNP form.\n    ";
static PyMethodDef __pyx_mdef_7isoname_4zzaaam_2_MCNP = {__Pyx_NAMESTR("zzaaam_2_MCNP"), (PyCFunction)__pyx_pf_7isoname_4zzaaam_2_MCNP, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_4zzaaam_2_MCNP)};
static PyObject *__pyx_pf_7isoname_4zzaaam_2_MCNP(PyObject *__pyx_self, PyObject *__pyx_arg_nuc) {
  int __pyx_v_nuc;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("zzaaam_2_MCNP");
  __pyx_self = __pyx_self;
  assert(__pyx_arg_nuc); {
    __pyx_v_nuc = __Pyx_PyInt_AsInt(__pyx_arg_nuc); if (unlikely((__pyx_v_nuc == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("isoname.zzaaam_2_MCNP");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "src/isoname/isoname_wrapper.pyx":177
 *         * newnuc (int): Output nuclide in MCNP form.
 *     """
 *     return cpp_isoname.zzaaam_2_MCNP(nuc)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_1 = isoname::zzaaam_2_MCNP(__pyx_v_nuc);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("isoname.zzaaam_2_MCNP");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":184
 * #
 * 
 * def MCNP_2_zzaaam(int nuc):             # <<<<<<<<<<<<<<
 *     """Converts a nuclide from MCNP form to its zzaaam form.
 * 
 */

static PyObject *__pyx_pf_7isoname_5MCNP_2_zzaaam(PyObject *__pyx_self, PyObject *__pyx_arg_nuc); /*proto*/
static char __pyx_doc_7isoname_5MCNP_2_zzaaam[] = "Converts a nuclide from MCNP form to its zzaaam form. \n\n    Args:\n        * nuc (str): Input nuclide in MCNP form.\n\n    Returns:\n        * newnuc (int): Output nuclide in zzaaam form.\n    ";
static PyMethodDef __pyx_mdef_7isoname_5MCNP_2_zzaaam = {__Pyx_NAMESTR("MCNP_2_zzaaam"), (PyCFunction)__pyx_pf_7isoname_5MCNP_2_zzaaam, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_5MCNP_2_zzaaam)};
static PyObject *__pyx_pf_7isoname_5MCNP_2_zzaaam(PyObject *__pyx_self, PyObject *__pyx_arg_nuc) {
  int __pyx_v_nuc;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("MCNP_2_zzaaam");
  __pyx_self = __pyx_self;
  assert(__pyx_arg_nuc); {
    __pyx_v_nuc = __Pyx_PyInt_AsInt(__pyx_arg_nuc); if (unlikely((__pyx_v_nuc == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("isoname.MCNP_2_zzaaam");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "src/isoname/isoname_wrapper.pyx":193
 *         * newnuc (int): Output nuclide in zzaaam form.
 *     """
 *     return cpp_isoname.MCNP_2_zzaaam(nuc)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_1 = isoname::MCNP_2_zzaaam(__pyx_v_nuc);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("isoname.MCNP_2_zzaaam");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":196
 * 
 * 
 * def MCNP_2_LLAAAM(int nuc):             # <<<<<<<<<<<<<<
 *     """Converts a nuclide from MCNP form to its LLAAAM form.
 * 
 */

static PyObject *__pyx_pf_7isoname_6MCNP_2_LLAAAM(PyObject *__pyx_self, PyObject *__pyx_arg_nuc); /*proto*/
static char __pyx_doc_7isoname_6MCNP_2_LLAAAM[] = "Converts a nuclide from MCNP form to its LLAAAM form. \n\n    Args:\n        * nuc (str): Input nuclide in MCNP form.\n\n    Returns:\n        * newnuc (int): Output nuclide in LLAAAM form.\n    ";
static PyMethodDef __pyx_mdef_7isoname_6MCNP_2_LLAAAM = {__Pyx_NAMESTR("MCNP_2_LLAAAM"), (PyCFunction)__pyx_pf_7isoname_6MCNP_2_LLAAAM, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_6MCNP_2_LLAAAM)};
static PyObject *__pyx_pf_7isoname_6MCNP_2_LLAAAM(PyObject *__pyx_self, PyObject *__pyx_arg_nuc) {
  int __pyx_v_nuc;
  std::string __pyx_v_cpp_LLAAAM;
  PyObject *__pyx_r = NULL;
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("MCNP_2_LLAAAM");
  __pyx_self = __pyx_self;
  assert(__pyx_arg_nuc); {
    __pyx_v_nuc = __Pyx_PyInt_AsInt(__pyx_arg_nuc); if (unlikely((__pyx_v_nuc == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("isoname.MCNP_2_LLAAAM");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "src/isoname/isoname_wrapper.pyx":205
 *         * newnuc (int): Output nuclide in LLAAAM form.
 *     """
 *     cdef std.string cpp_LLAAAM = cpp_isoname.MCNP_2_LLAAAM(nuc)             # <<<<<<<<<<<<<<
 *     return cpp_LLAAAM.c_str()
 * 
 */
  try {__pyx_t_1 = isoname::MCNP_2_LLAAAM(__pyx_v_nuc);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_cpp_LLAAAM = __pyx_t_1;

  /* "src/isoname/isoname_wrapper.pyx":206
 *     """
 *     cdef std.string cpp_LLAAAM = cpp_isoname.MCNP_2_LLAAAM(nuc)
 *     return cpp_LLAAAM.c_str()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_cpp_LLAAAM.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("isoname.MCNP_2_LLAAAM");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":213
 * #
 * 
 * def mixed_2_zzaaam(nuc):             # <<<<<<<<<<<<<<
 *     """Converts an arbitrary nuclide and its zzaaam form.
 * 
 */

static PyObject *__pyx_pf_7isoname_7mixed_2_zzaaam(PyObject *__pyx_self, PyObject *__pyx_v_nuc); /*proto*/
static char __pyx_doc_7isoname_7mixed_2_zzaaam[] = "Converts an arbitrary nuclide and its zzaaam form. \n\n    Args:\n        * nuc (int or str): Input nuclide.\n\n    Returns:\n        * newnuc (int): Output nuclide in zzaaam form.\n    ";
static PyMethodDef __pyx_mdef_7isoname_7mixed_2_zzaaam = {__Pyx_NAMESTR("mixed_2_zzaaam"), (PyCFunction)__pyx_pf_7isoname_7mixed_2_zzaaam, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_7mixed_2_zzaaam)};
static PyObject *__pyx_pf_7isoname_7mixed_2_zzaaam(PyObject *__pyx_self, PyObject *__pyx_v_nuc) {
  int __pyx_v_newnuc;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  char *__pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("mixed_2_zzaaam");
  __pyx_self = __pyx_self;

  /* "src/isoname/isoname_wrapper.pyx":223
 *     """
 * 
 *     if isinstance(nuc, basestring):             # <<<<<<<<<<<<<<
 *         newnuc = cpp_isoname.mixed_2_zzaaam(std.string(nuc))
 *     elif isinstance(nuc, int):
 */
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_nuc, __pyx_builtin_basestring); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "src/isoname/isoname_wrapper.pyx":224
 * 
 *     if isinstance(nuc, basestring):
 *         newnuc = cpp_isoname.mixed_2_zzaaam(std.string(nuc))             # <<<<<<<<<<<<<<
 *     elif isinstance(nuc, int):
 *         newnuc = cpp_isoname.mixed_2_zzaaam(<int> nuc)
 */
    __pyx_t_2 = PyBytes_AsString(__pyx_v_nuc); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    try {__pyx_t_3 = isoname::mixed_2_zzaaam(std::string(__pyx_t_2));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    __pyx_v_newnuc = __pyx_t_3;
    goto __pyx_L5;
  }

  /* "src/isoname/isoname_wrapper.pyx":225
 *     if isinstance(nuc, basestring):
 *         newnuc = cpp_isoname.mixed_2_zzaaam(std.string(nuc))
 *     elif isinstance(nuc, int):             # <<<<<<<<<<<<<<
 *         newnuc = cpp_isoname.mixed_2_zzaaam(<int> nuc)
 *     else:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_nuc); 
  if (__pyx_t_1) {

    /* "src/isoname/isoname_wrapper.pyx":226
 *         newnuc = cpp_isoname.mixed_2_zzaaam(std.string(nuc))
 *     elif isinstance(nuc, int):
 *         newnuc = cpp_isoname.mixed_2_zzaaam(<int> nuc)             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Nuclide not a string ot integer.")
 */
    __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_v_nuc); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    try {__pyx_t_4 = isoname::mixed_2_zzaaam(__pyx_t_3);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    __pyx_v_newnuc = __pyx_t_4;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "src/isoname/isoname_wrapper.pyx":228
 *         newnuc = cpp_isoname.mixed_2_zzaaam(<int> nuc)
 *     else:
 *         raise TypeError("Nuclide not a string ot integer.")             # <<<<<<<<<<<<<<
 * 
 *     return newnuc
 */
    __pyx_t_5 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_3), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  /* "src/isoname/isoname_wrapper.pyx":230
 *         raise TypeError("Nuclide not a string ot integer.")
 * 
 *     return newnuc             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyInt_FromLong(__pyx_v_newnuc); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("isoname.mixed_2_zzaaam");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":233
 * 
 * 
 * def mixed_2_LLAAAM(nuc):             # <<<<<<<<<<<<<<
 *     """Converts an arbitrary nuclide and its LLAAAM form.
 * 
 */

static PyObject *__pyx_pf_7isoname_8mixed_2_LLAAAM(PyObject *__pyx_self, PyObject *__pyx_v_nuc); /*proto*/
static char __pyx_doc_7isoname_8mixed_2_LLAAAM[] = "Converts an arbitrary nuclide and its LLAAAM form. \n\n    Args:\n        * nuc (int or str): Input nuclide.\n\n    Returns:\n        * newnuc (int): Output nuclide in LLAAAM form.\n    ";
static PyMethodDef __pyx_mdef_7isoname_8mixed_2_LLAAAM = {__Pyx_NAMESTR("mixed_2_LLAAAM"), (PyCFunction)__pyx_pf_7isoname_8mixed_2_LLAAAM, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_8mixed_2_LLAAAM)};
static PyObject *__pyx_pf_7isoname_8mixed_2_LLAAAM(PyObject *__pyx_self, PyObject *__pyx_v_nuc) {
  std::string __pyx_v_newnuc;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  char *__pyx_t_2;
  std::string __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("mixed_2_LLAAAM");
  __pyx_self = __pyx_self;

  /* "src/isoname/isoname_wrapper.pyx":244
 *     cdef std.string newnuc
 * 
 *     if isinstance(nuc, basestring):             # <<<<<<<<<<<<<<
 *         newnuc = cpp_isoname.mixed_2_LLAAAM(std.string(nuc))
 *     elif isinstance(nuc, int):
 */
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_nuc, __pyx_builtin_basestring); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "src/isoname/isoname_wrapper.pyx":245
 * 
 *     if isinstance(nuc, basestring):
 *         newnuc = cpp_isoname.mixed_2_LLAAAM(std.string(nuc))             # <<<<<<<<<<<<<<
 *     elif isinstance(nuc, int):
 *         newnuc = cpp_isoname.mixed_2_LLAAAM(<int> nuc)
 */
    __pyx_t_2 = PyBytes_AsString(__pyx_v_nuc); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    try {__pyx_t_3 = isoname::mixed_2_LLAAAM(std::string(__pyx_t_2));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    __pyx_v_newnuc = __pyx_t_3;
    goto __pyx_L5;
  }

  /* "src/isoname/isoname_wrapper.pyx":246
 *     if isinstance(nuc, basestring):
 *         newnuc = cpp_isoname.mixed_2_LLAAAM(std.string(nuc))
 *     elif isinstance(nuc, int):             # <<<<<<<<<<<<<<
 *         newnuc = cpp_isoname.mixed_2_LLAAAM(<int> nuc)
 *     else:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_nuc); 
  if (__pyx_t_1) {

    /* "src/isoname/isoname_wrapper.pyx":247
 *         newnuc = cpp_isoname.mixed_2_LLAAAM(std.string(nuc))
 *     elif isinstance(nuc, int):
 *         newnuc = cpp_isoname.mixed_2_LLAAAM(<int> nuc)             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Nuclide not a string ot integer.")
 */
    __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_v_nuc); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    try {__pyx_t_3 = isoname::mixed_2_LLAAAM(__pyx_t_4);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    __pyx_v_newnuc = __pyx_t_3;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "src/isoname/isoname_wrapper.pyx":249
 *         newnuc = cpp_isoname.mixed_2_LLAAAM(<int> nuc)
 *     else:
 *         raise TypeError("Nuclide not a string ot integer.")             # <<<<<<<<<<<<<<
 * 
 *     return newnuc.c_str()
 */
    __pyx_t_5 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  /* "src/isoname/isoname_wrapper.pyx":251
 *         raise TypeError("Nuclide not a string ot integer.")
 * 
 *     return newnuc.c_str()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyBytes_FromString(__pyx_v_newnuc.c_str()); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __pyx_r = ((PyObject *)__pyx_t_5);
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("isoname.mixed_2_LLAAAM");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":254
 * 
 * 
 * def mixed_2_MCNP(nuc):             # <<<<<<<<<<<<<<
 *     """Converts an arbitrary nuclide and its MCNP form.
 * 
 */

static PyObject *__pyx_pf_7isoname_9mixed_2_MCNP(PyObject *__pyx_self, PyObject *__pyx_v_nuc); /*proto*/
static char __pyx_doc_7isoname_9mixed_2_MCNP[] = "Converts an arbitrary nuclide and its MCNP form. \n\n    Args:\n        * nuc (int or str): Input nuclide.\n\n    Returns:\n        * newnuc (int): Output nuclide in MCNP form.\n    ";
static PyMethodDef __pyx_mdef_7isoname_9mixed_2_MCNP = {__Pyx_NAMESTR("mixed_2_MCNP"), (PyCFunction)__pyx_pf_7isoname_9mixed_2_MCNP, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_9mixed_2_MCNP)};
static PyObject *__pyx_pf_7isoname_9mixed_2_MCNP(PyObject *__pyx_self, PyObject *__pyx_v_nuc) {
  int __pyx_v_newnuc;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  char *__pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("mixed_2_MCNP");
  __pyx_self = __pyx_self;

  /* "src/isoname/isoname_wrapper.pyx":264
 *     """
 * 
 *     if isinstance(nuc, basestring):             # <<<<<<<<<<<<<<
 *         newnuc = cpp_isoname.mixed_2_MCNP(std.string(nuc))
 *     elif isinstance(nuc, int):
 */
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_nuc, __pyx_builtin_basestring); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "src/isoname/isoname_wrapper.pyx":265
 * 
 *     if isinstance(nuc, basestring):
 *         newnuc = cpp_isoname.mixed_2_MCNP(std.string(nuc))             # <<<<<<<<<<<<<<
 *     elif isinstance(nuc, int):
 *         newnuc = cpp_isoname.mixed_2_MCNP(<int> nuc)
 */
    __pyx_t_2 = PyBytes_AsString(__pyx_v_nuc); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    try {__pyx_t_3 = isoname::mixed_2_MCNP(std::string(__pyx_t_2));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    __pyx_v_newnuc = __pyx_t_3;
    goto __pyx_L5;
  }

  /* "src/isoname/isoname_wrapper.pyx":266
 *     if isinstance(nuc, basestring):
 *         newnuc = cpp_isoname.mixed_2_MCNP(std.string(nuc))
 *     elif isinstance(nuc, int):             # <<<<<<<<<<<<<<
 *         newnuc = cpp_isoname.mixed_2_MCNP(<int> nuc)
 *     else:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_nuc); 
  if (__pyx_t_1) {

    /* "src/isoname/isoname_wrapper.pyx":267
 *         newnuc = cpp_isoname.mixed_2_MCNP(std.string(nuc))
 *     elif isinstance(nuc, int):
 *         newnuc = cpp_isoname.mixed_2_MCNP(<int> nuc)             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Nuclide not a string ot integer.")
 */
    __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_v_nuc); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    try {__pyx_t_4 = isoname::mixed_2_MCNP(__pyx_t_3);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    __pyx_v_newnuc = __pyx_t_4;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "src/isoname/isoname_wrapper.pyx":269
 *         newnuc = cpp_isoname.mixed_2_MCNP(<int> nuc)
 *     else:
 *         raise TypeError("Nuclide not a string ot integer.")             # <<<<<<<<<<<<<<
 * 
 *     return newnuc
 */
    __pyx_t_5 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_5), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  /* "src/isoname/isoname_wrapper.pyx":271
 *         raise TypeError("Nuclide not a string ot integer.")
 * 
 *     return newnuc             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyInt_FromLong(__pyx_v_newnuc); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("isoname.mixed_2_MCNP");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":278
 * #
 * 
 * def nuc_weight_zzaaam(int nuc):             # <<<<<<<<<<<<<<
 *     """Calculates the weight of a nuclide in [amu].
 * 
 */

static PyObject *__pyx_pf_7isoname_10nuc_weight_zzaaam(PyObject *__pyx_self, PyObject *__pyx_arg_nuc); /*proto*/
static char __pyx_doc_7isoname_10nuc_weight_zzaaam[] = "Calculates the weight of a nuclide in [amu].\n\n    Args:\n        * nuc (int): Input nuclide.\n\n    Returns:\n        * weight (float): Atomic weight of this nuclide [amu].\n    ";
static PyMethodDef __pyx_mdef_7isoname_10nuc_weight_zzaaam = {__Pyx_NAMESTR("nuc_weight_zzaaam"), (PyCFunction)__pyx_pf_7isoname_10nuc_weight_zzaaam, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_10nuc_weight_zzaaam)};
static PyObject *__pyx_pf_7isoname_10nuc_weight_zzaaam(PyObject *__pyx_self, PyObject *__pyx_arg_nuc) {
  int __pyx_v_nuc;
  PyObject *__pyx_r = NULL;
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("nuc_weight_zzaaam");
  __pyx_self = __pyx_self;
  assert(__pyx_arg_nuc); {
    __pyx_v_nuc = __Pyx_PyInt_AsInt(__pyx_arg_nuc); if (unlikely((__pyx_v_nuc == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("isoname.nuc_weight_zzaaam");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "src/isoname/isoname_wrapper.pyx":287
 *         * weight (float): Atomic weight of this nuclide [amu].
 *     """
 *     return cpp_isoname.nuc_weight_zzaaam(nuc)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_1 = isoname::nuc_weight_zzaaam(__pyx_v_nuc);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("isoname.nuc_weight_zzaaam");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":290
 * 
 * 
 * def nuc_weight(nuc):             # <<<<<<<<<<<<<<
 *     """Calculates the weight of a nuclide in [amu].
 * 
 */

static PyObject *__pyx_pf_7isoname_11nuc_weight(PyObject *__pyx_self, PyObject *__pyx_v_nuc); /*proto*/
static char __pyx_doc_7isoname_11nuc_weight[] = "Calculates the weight of a nuclide in [amu].\n\n    Args:\n        * nuc (int or str): Input nuclide.\n\n    Returns:\n        * weight (float): Atomic weight of this nuclide [amu].\n    ";
static PyMethodDef __pyx_mdef_7isoname_11nuc_weight = {__Pyx_NAMESTR("nuc_weight"), (PyCFunction)__pyx_pf_7isoname_11nuc_weight, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_11nuc_weight)};
static PyObject *__pyx_pf_7isoname_11nuc_weight(PyObject *__pyx_self, PyObject *__pyx_v_nuc) {
  double __pyx_v_weight;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  char *__pyx_t_2;
  double __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("nuc_weight");
  __pyx_self = __pyx_self;

  /* "src/isoname/isoname_wrapper.pyx":299
 *         * weight (float): Atomic weight of this nuclide [amu].
 *     """
 *     if isinstance(nuc, basestring):             # <<<<<<<<<<<<<<
 *         weight = cpp_isoname.nuc_weight(std.string(nuc))
 *     elif isinstance(nuc, int):
 */
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_nuc, __pyx_builtin_basestring); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "src/isoname/isoname_wrapper.pyx":300
 *     """
 *     if isinstance(nuc, basestring):
 *         weight = cpp_isoname.nuc_weight(std.string(nuc))             # <<<<<<<<<<<<<<
 *     elif isinstance(nuc, int):
 *         weight = cpp_isoname.nuc_weight(<int> nuc)
 */
    __pyx_t_2 = PyBytes_AsString(__pyx_v_nuc); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    try {__pyx_t_3 = isoname::nuc_weight(std::string(__pyx_t_2));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    __pyx_v_weight = __pyx_t_3;
    goto __pyx_L5;
  }

  /* "src/isoname/isoname_wrapper.pyx":301
 *     if isinstance(nuc, basestring):
 *         weight = cpp_isoname.nuc_weight(std.string(nuc))
 *     elif isinstance(nuc, int):             # <<<<<<<<<<<<<<
 *         weight = cpp_isoname.nuc_weight(<int> nuc)
 *     else:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_nuc); 
  if (__pyx_t_1) {

    /* "src/isoname/isoname_wrapper.pyx":302
 *         weight = cpp_isoname.nuc_weight(std.string(nuc))
 *     elif isinstance(nuc, int):
 *         weight = cpp_isoname.nuc_weight(<int> nuc)             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Nuclide not a string ot integer.")
 */
    __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_v_nuc); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    try {__pyx_t_3 = isoname::nuc_weight(__pyx_t_4);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    __pyx_v_weight = __pyx_t_3;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "src/isoname/isoname_wrapper.pyx":304
 *         weight = cpp_isoname.nuc_weight(<int> nuc)
 *     else:
 *         raise TypeError("Nuclide not a string ot integer.")             # <<<<<<<<<<<<<<
 * 
 *     return weight
 */
    __pyx_t_5 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  /* "src/isoname/isoname_wrapper.pyx":306
 *         raise TypeError("Nuclide not a string ot integer.")
 * 
 *     return weight             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_weight); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("isoname.nuc_weight");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":313
 * #
 * 
 * def LLAAAM_2_zzaaam_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of LLAAAM form to a list of zzaaam form.
 * 
 */

static PyObject *__pyx_pf_7isoname_12LLAAAM_2_zzaaam_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist); /*proto*/
static char __pyx_doc_7isoname_12LLAAAM_2_zzaaam_List[] = "Converts a list of LLAAAM form to a list of zzaaam form.\n\n    Args:\n        * `nuclist` (str list): List of LLAAAM nuclides.\n\n    Returns:\n        * `newnuclist` (int list): List of zzaaam nuclides.\n    ";
static PyMethodDef __pyx_mdef_7isoname_12LLAAAM_2_zzaaam_List = {__Pyx_NAMESTR("LLAAAM_2_zzaaam_List"), (PyCFunction)__pyx_pf_7isoname_12LLAAAM_2_zzaaam_List, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_12LLAAAM_2_zzaaam_List)};
static PyObject *__pyx_pf_7isoname_12LLAAAM_2_zzaaam_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist) {
  PyObject *__pyx_v_nuc;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("LLAAAM_2_zzaaam_List");
  __pyx_self = __pyx_self;
  __pyx_v_nuc = Py_None; __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nuclist), (&PyList_Type), 1, "nuclist", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/isoname/isoname_wrapper.pyx":322
 *         * `newnuclist` (int list): List of zzaaam nuclides.
 *     """
 *     return [LLAAAM_2_zzaaam(nuc) for nuc in nuclist]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (unlikely(__pyx_v_nuclist == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = 0; __pyx_t_3 = ((PyObject *)__pyx_v_nuclist); __Pyx_INCREF(__pyx_t_3);
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    __Pyx_DECREF(__pyx_v_nuc);
    __pyx_v_nuc = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__LLAAAM_2_zzaaam); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_v_nuc);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_nuc);
    __Pyx_GIVEREF(__pyx_v_nuc);
    __pyx_t_6 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (unlikely(PyList_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("isoname.LLAAAM_2_zzaaam_List");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_nuc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":325
 * 
 * 
 * def LLAAAM_2_MCNP_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of LLAAAM form to a list of MCNP form.
 * 
 */

static PyObject *__pyx_pf_7isoname_13LLAAAM_2_MCNP_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist); /*proto*/
static char __pyx_doc_7isoname_13LLAAAM_2_MCNP_List[] = "Converts a list of LLAAAM form to a list of MCNP form.\n\n    Args:\n        * `nuclist` (str list): List of LLAAAM nuclides.\n\n    Returns:\n        * `newnuclist` (int list): List of MCNP nuclides.\n    ";
static PyMethodDef __pyx_mdef_7isoname_13LLAAAM_2_MCNP_List = {__Pyx_NAMESTR("LLAAAM_2_MCNP_List"), (PyCFunction)__pyx_pf_7isoname_13LLAAAM_2_MCNP_List, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_13LLAAAM_2_MCNP_List)};
static PyObject *__pyx_pf_7isoname_13LLAAAM_2_MCNP_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist) {
  PyObject *__pyx_v_nuc;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("LLAAAM_2_MCNP_List");
  __pyx_self = __pyx_self;
  __pyx_v_nuc = Py_None; __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nuclist), (&PyList_Type), 1, "nuclist", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/isoname/isoname_wrapper.pyx":334
 *         * `newnuclist` (int list): List of MCNP nuclides.
 *     """
 *     return [LLAAAM_2_MCNP(nuc) for nuc in nuclist]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (unlikely(__pyx_v_nuclist == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = 0; __pyx_t_3 = ((PyObject *)__pyx_v_nuclist); __Pyx_INCREF(__pyx_t_3);
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    __Pyx_DECREF(__pyx_v_nuc);
    __pyx_v_nuc = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__LLAAAM_2_MCNP); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_v_nuc);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_nuc);
    __Pyx_GIVEREF(__pyx_v_nuc);
    __pyx_t_6 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (unlikely(PyList_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("isoname.LLAAAM_2_MCNP_List");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_nuc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":337
 * 
 * 
 * def zzaaam_2_LLAAAM_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of zzaaam form to a list of LLAAAM form.
 * 
 */

static PyObject *__pyx_pf_7isoname_14zzaaam_2_LLAAAM_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist); /*proto*/
static char __pyx_doc_7isoname_14zzaaam_2_LLAAAM_List[] = "Converts a list of zzaaam form to a list of LLAAAM form.\n\n    Args:\n        * `nuclist` (int list): List of zzaaam nuclides.\n\n    Returns:\n        * `newnuclist` (str list): List of LLAAAM nuclides.\n    ";
static PyMethodDef __pyx_mdef_7isoname_14zzaaam_2_LLAAAM_List = {__Pyx_NAMESTR("zzaaam_2_LLAAAM_List"), (PyCFunction)__pyx_pf_7isoname_14zzaaam_2_LLAAAM_List, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_14zzaaam_2_LLAAAM_List)};
static PyObject *__pyx_pf_7isoname_14zzaaam_2_LLAAAM_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist) {
  PyObject *__pyx_v_nuc;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("zzaaam_2_LLAAAM_List");
  __pyx_self = __pyx_self;
  __pyx_v_nuc = Py_None; __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nuclist), (&PyList_Type), 1, "nuclist", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/isoname/isoname_wrapper.pyx":346
 *         * `newnuclist` (str list): List of LLAAAM nuclides.
 *     """
 *     return [zzaaam_2_LLAAAM(nuc) for nuc in nuclist]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (unlikely(__pyx_v_nuclist == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = 0; __pyx_t_3 = ((PyObject *)__pyx_v_nuclist); __Pyx_INCREF(__pyx_t_3);
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    __Pyx_DECREF(__pyx_v_nuc);
    __pyx_v_nuc = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__zzaaam_2_LLAAAM); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_v_nuc);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_nuc);
    __Pyx_GIVEREF(__pyx_v_nuc);
    __pyx_t_6 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (unlikely(PyList_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("isoname.zzaaam_2_LLAAAM_List");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_nuc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":349
 * 
 * 
 * def zzaaam_2_MCNP_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of zzaaam form to a list of MCNP form.
 * 
 */

static PyObject *__pyx_pf_7isoname_15zzaaam_2_MCNP_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist); /*proto*/
static char __pyx_doc_7isoname_15zzaaam_2_MCNP_List[] = "Converts a list of zzaaam form to a list of MCNP form.\n\n    Args:\n        * `nuclist` (int list): List of zzaaam nuclides.\n\n    Returns:\n        * `newnuclist` (int list): List of MCNP nuclides.\n    ";
static PyMethodDef __pyx_mdef_7isoname_15zzaaam_2_MCNP_List = {__Pyx_NAMESTR("zzaaam_2_MCNP_List"), (PyCFunction)__pyx_pf_7isoname_15zzaaam_2_MCNP_List, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_15zzaaam_2_MCNP_List)};
static PyObject *__pyx_pf_7isoname_15zzaaam_2_MCNP_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist) {
  PyObject *__pyx_v_nuc;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("zzaaam_2_MCNP_List");
  __pyx_self = __pyx_self;
  __pyx_v_nuc = Py_None; __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nuclist), (&PyList_Type), 1, "nuclist", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/isoname/isoname_wrapper.pyx":358
 *         * `newnuclist` (int list): List of MCNP nuclides.
 *     """
 *     return [zzaaam_2_MCNP(nuc) for nuc in nuclist]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (unlikely(__pyx_v_nuclist == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = 0; __pyx_t_3 = ((PyObject *)__pyx_v_nuclist); __Pyx_INCREF(__pyx_t_3);
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    __Pyx_DECREF(__pyx_v_nuc);
    __pyx_v_nuc = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__zzaaam_2_MCNP); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_v_nuc);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_nuc);
    __Pyx_GIVEREF(__pyx_v_nuc);
    __pyx_t_6 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (unlikely(PyList_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("isoname.zzaaam_2_MCNP_List");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_nuc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":361
 * 
 * 
 * def MCNP_2_LLAAAM_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of MCNP form to a list of LLAAAM form.
 * 
 */

static PyObject *__pyx_pf_7isoname_16MCNP_2_LLAAAM_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist); /*proto*/
static char __pyx_doc_7isoname_16MCNP_2_LLAAAM_List[] = "Converts a list of MCNP form to a list of LLAAAM form.\n\n    Args:\n        * `nuclist` (int list): List of MCNP nuclides.\n\n    Returns:\n        * `newnuclist` (str list): List of LLAAAM nuclides.\n    ";
static PyMethodDef __pyx_mdef_7isoname_16MCNP_2_LLAAAM_List = {__Pyx_NAMESTR("MCNP_2_LLAAAM_List"), (PyCFunction)__pyx_pf_7isoname_16MCNP_2_LLAAAM_List, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_16MCNP_2_LLAAAM_List)};
static PyObject *__pyx_pf_7isoname_16MCNP_2_LLAAAM_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist) {
  PyObject *__pyx_v_nuc;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("MCNP_2_LLAAAM_List");
  __pyx_self = __pyx_self;
  __pyx_v_nuc = Py_None; __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nuclist), (&PyList_Type), 1, "nuclist", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/isoname/isoname_wrapper.pyx":370
 *         * `newnuclist` (str list): List of LLAAAM nuclides.
 *     """
 *     return [MCNP_2_LLAAAM(nuc) for nuc in nuclist]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (unlikely(__pyx_v_nuclist == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = 0; __pyx_t_3 = ((PyObject *)__pyx_v_nuclist); __Pyx_INCREF(__pyx_t_3);
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    __Pyx_DECREF(__pyx_v_nuc);
    __pyx_v_nuc = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__MCNP_2_LLAAAM); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_v_nuc);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_nuc);
    __Pyx_GIVEREF(__pyx_v_nuc);
    __pyx_t_6 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (unlikely(PyList_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("isoname.MCNP_2_LLAAAM_List");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_nuc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":373
 * 
 * 
 * def MCNP_2_zzaaam_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of MCNP form to a list of zzaaam form.
 * 
 */

static PyObject *__pyx_pf_7isoname_17MCNP_2_zzaaam_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist); /*proto*/
static char __pyx_doc_7isoname_17MCNP_2_zzaaam_List[] = "Converts a list of MCNP form to a list of zzaaam form.\n\n    Args:\n        * `nuclist` (int list): List of MCNP nuclides.\n\n    Returns:\n        * `newnuclist` (int list): List of zzaaam nuclides.\n    ";
static PyMethodDef __pyx_mdef_7isoname_17MCNP_2_zzaaam_List = {__Pyx_NAMESTR("MCNP_2_zzaaam_List"), (PyCFunction)__pyx_pf_7isoname_17MCNP_2_zzaaam_List, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_17MCNP_2_zzaaam_List)};
static PyObject *__pyx_pf_7isoname_17MCNP_2_zzaaam_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist) {
  PyObject *__pyx_v_nuc;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("MCNP_2_zzaaam_List");
  __pyx_self = __pyx_self;
  __pyx_v_nuc = Py_None; __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nuclist), (&PyList_Type), 1, "nuclist", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/isoname/isoname_wrapper.pyx":382
 *         * `newnuclist` (int list): List of zzaaam nuclides.
 *     """
 *     return [MCNP_2_zzaaam(nuc) for nuc in nuclist]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (unlikely(__pyx_v_nuclist == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = 0; __pyx_t_3 = ((PyObject *)__pyx_v_nuclist); __Pyx_INCREF(__pyx_t_3);
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    __Pyx_DECREF(__pyx_v_nuc);
    __pyx_v_nuc = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__MCNP_2_zzaaam); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_v_nuc);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_nuc);
    __Pyx_GIVEREF(__pyx_v_nuc);
    __pyx_t_6 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (unlikely(PyList_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("isoname.MCNP_2_zzaaam_List");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_nuc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":389
 * #
 * 
 * def RearRemoveDuplicates(list l):             # <<<<<<<<<<<<<<
 *     """Removes duplicate entries from list l, starting from the back.
 *     Used internally in the [form]_2_[form]_List() functions.
 */

static PyObject *__pyx_pf_7isoname_18RearRemoveDuplicates(PyObject *__pyx_self, PyObject *__pyx_v_l); /*proto*/
static char __pyx_doc_7isoname_18RearRemoveDuplicates[] = "Removes duplicate entries from list l, starting from the back. \n    Used internally in the [form]_2_[form]_List() functions.\n\n    Args:\n       * `l` (list): input list.\n\n    Returns:\n       * `l` (list): input with duplicates removed.\n    ";
static PyMethodDef __pyx_mdef_7isoname_18RearRemoveDuplicates = {__Pyx_NAMESTR("RearRemoveDuplicates"), (PyCFunction)__pyx_pf_7isoname_18RearRemoveDuplicates, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_18RearRemoveDuplicates)};
static PyObject *__pyx_pf_7isoname_18RearRemoveDuplicates(PyObject *__pyx_self, PyObject *__pyx_v_l) {
  Py_ssize_t __pyx_v_n;
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("RearRemoveDuplicates");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_l), (&PyList_Type), 1, "l", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/isoname/isoname_wrapper.pyx":400
 *     """
 * 
 *     for n in range(len(l)-1, -1, -1):             # <<<<<<<<<<<<<<
 *         if 1 < l.count(l[n]):
 *             l.pop(n)
 */
  if (unlikely(__pyx_v_l == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyList_GET_SIZE(((PyObject *)__pyx_v_l)); 
  for (__pyx_t_2 = (__pyx_t_1 - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
    __pyx_v_n = __pyx_t_2;

    /* "src/isoname/isoname_wrapper.pyx":401
 * 
 *     for n in range(len(l)-1, -1, -1):
 *         if 1 < l.count(l[n]):             # <<<<<<<<<<<<<<
 *             l.pop(n)
 *     return l
 */
    __pyx_t_3 = PyObject_GetAttr(((PyObject *)__pyx_v_l), __pyx_n_s__count); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_GetItemInt_List(((PyObject *)__pyx_v_l), __pyx_v_n, sizeof(Py_ssize_t), PyInt_FromSsize_t); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_int_1, __pyx_t_4, Py_LT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "src/isoname/isoname_wrapper.pyx":402
 *     for n in range(len(l)-1, -1, -1):
 *         if 1 < l.count(l[n]):
 *             l.pop(n)             # <<<<<<<<<<<<<<
 *     return l
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_PopIndex(((PyObject *)__pyx_v_l), __pyx_v_n); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L7;
    }
    __pyx_L7:;
  }

  /* "src/isoname/isoname_wrapper.pyx":403
 *         if 1 < l.count(l[n]):
 *             l.pop(n)
 *     return l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_l));
  __pyx_r = ((PyObject *)__pyx_v_l);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("isoname.RearRemoveDuplicates");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":406
 * 
 * 
 * def mixed_2_zzaaam_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of mixed form to a list of zzaaam form.
 * 
 */

static PyObject *__pyx_pf_7isoname_19mixed_2_zzaaam_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist); /*proto*/
static char __pyx_doc_7isoname_19mixed_2_zzaaam_List[] = "Converts a list of mixed form to a list of zzaaam form.\n\n    Args:\n        * `nuclist` (str or int list): List of nuclides of mixed form.\n\n    Returns:\n        * `newnuclist` (int list): List of zzaaam nuclides.\n    ";
static PyMethodDef __pyx_mdef_7isoname_19mixed_2_zzaaam_List = {__Pyx_NAMESTR("mixed_2_zzaaam_List"), (PyCFunction)__pyx_pf_7isoname_19mixed_2_zzaaam_List, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_19mixed_2_zzaaam_List)};
static PyObject *__pyx_pf_7isoname_19mixed_2_zzaaam_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist) {
  PyObject *__pyx_v_nuc;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("mixed_2_zzaaam_List");
  __pyx_self = __pyx_self;
  __pyx_v_nuc = Py_None; __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nuclist), (&PyList_Type), 1, "nuclist", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/isoname/isoname_wrapper.pyx":415
 *         * `newnuclist` (int list): List of zzaaam nuclides.
 *     """
 *     return RearRemoveDuplicates( [mixed_2_zzaaam(nuc) for nuc in nuclist] )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (unlikely(__pyx_v_nuclist == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = 0; __pyx_t_4 = ((PyObject *)__pyx_v_nuclist); __Pyx_INCREF(__pyx_t_4);
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_4)) break;
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++;
    __Pyx_DECREF(__pyx_v_nuc);
    __pyx_v_nuc = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__mixed_2_zzaaam); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    __Pyx_INCREF(__pyx_v_nuc);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_nuc);
    __Pyx_GIVEREF(__pyx_v_nuc);
    __pyx_t_7 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    if (unlikely(PyList_Append(__pyx_t_2, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("isoname.mixed_2_zzaaam_List");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_nuc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":418
 * 
 * 
 * def mixed_2_LLAAAM_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of mixed form to a list of LLAAAM form.
 * 
 */

static PyObject *__pyx_pf_7isoname_20mixed_2_LLAAAM_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist); /*proto*/
static char __pyx_doc_7isoname_20mixed_2_LLAAAM_List[] = "Converts a list of mixed form to a list of LLAAAM form.\n\n    Args:\n        * `nuclist` (str or int list): List of nuclides of mixed form.\n\n    Returns:\n        * `newnuclist` (str list): List of LLAAAM nuclides.\n    ";
static PyMethodDef __pyx_mdef_7isoname_20mixed_2_LLAAAM_List = {__Pyx_NAMESTR("mixed_2_LLAAAM_List"), (PyCFunction)__pyx_pf_7isoname_20mixed_2_LLAAAM_List, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_20mixed_2_LLAAAM_List)};
static PyObject *__pyx_pf_7isoname_20mixed_2_LLAAAM_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist) {
  PyObject *__pyx_v_nuc;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("mixed_2_LLAAAM_List");
  __pyx_self = __pyx_self;
  __pyx_v_nuc = Py_None; __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nuclist), (&PyList_Type), 1, "nuclist", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/isoname/isoname_wrapper.pyx":427
 *         * `newnuclist` (str list): List of LLAAAM nuclides.
 *     """
 *     return RearRemoveDuplicates( [mixed_2_LLAAAM(nuc) for nuc in nuclist] )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (unlikely(__pyx_v_nuclist == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = 0; __pyx_t_4 = ((PyObject *)__pyx_v_nuclist); __Pyx_INCREF(__pyx_t_4);
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_4)) break;
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++;
    __Pyx_DECREF(__pyx_v_nuc);
    __pyx_v_nuc = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__mixed_2_LLAAAM); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    __Pyx_INCREF(__pyx_v_nuc);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_nuc);
    __Pyx_GIVEREF(__pyx_v_nuc);
    __pyx_t_7 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    if (unlikely(PyList_Append(__pyx_t_2, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("isoname.mixed_2_LLAAAM_List");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_nuc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":430
 * 
 * 
 * def mixed_2_MCNP_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of mixed form to a list of MCNP form.
 * 
 */

static PyObject *__pyx_pf_7isoname_21mixed_2_MCNP_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist); /*proto*/
static char __pyx_doc_7isoname_21mixed_2_MCNP_List[] = "Converts a list of mixed form to a list of MCNP form.\n\n    Args:\n        * `nuclist` (str or int list): List of nuclides of mixed form.\n\n    Returns:\n        * `newnuclist` (int list): List of MCNP nuclides.\n    ";
static PyMethodDef __pyx_mdef_7isoname_21mixed_2_MCNP_List = {__Pyx_NAMESTR("mixed_2_MCNP_List"), (PyCFunction)__pyx_pf_7isoname_21mixed_2_MCNP_List, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_21mixed_2_MCNP_List)};
static PyObject *__pyx_pf_7isoname_21mixed_2_MCNP_List(PyObject *__pyx_self, PyObject *__pyx_v_nuclist) {
  PyObject *__pyx_v_nuc;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("mixed_2_MCNP_List");
  __pyx_self = __pyx_self;
  __pyx_v_nuc = Py_None; __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nuclist), (&PyList_Type), 1, "nuclist", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/isoname/isoname_wrapper.pyx":439
 *         * `newnuclist` (int list): List of MCNP nuclides.
 *     """
 *     return RearRemoveDuplicates( [mixed_2_MCNP(nuc) for nuc in nuclist] )             # <<<<<<<<<<<<<<
 * 
 * #
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (unlikely(__pyx_v_nuclist == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = 0; __pyx_t_4 = ((PyObject *)__pyx_v_nuclist); __Pyx_INCREF(__pyx_t_4);
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_4)) break;
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++;
    __Pyx_DECREF(__pyx_v_nuc);
    __pyx_v_nuc = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__mixed_2_MCNP); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    __Pyx_INCREF(__pyx_v_nuc);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_nuc);
    __Pyx_GIVEREF(__pyx_v_nuc);
    __pyx_t_7 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    if (unlikely(PyList_Append(__pyx_t_2, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("isoname.mixed_2_MCNP_List");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_nuc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":445
 * #
 * 
 * def isovec_keys_2_zzaaam(dict isovec):             # <<<<<<<<<<<<<<
 *     """Converts all keys of an isotopic vector dictionary to zzaaam form.
 * 
 */

static PyObject *__pyx_pf_7isoname_22isovec_keys_2_zzaaam(PyObject *__pyx_self, PyObject *__pyx_v_isovec); /*proto*/
static char __pyx_doc_7isoname_22isovec_keys_2_zzaaam[] = "Converts all keys of an isotopic vector dictionary to zzaaam form.\n\n    Args:\n        * `isovec` (dict): isotopic vector with keys of unknown/mixed form.\n\n    Returns:\n        * `newvec` (dict): isotopic vector with keys of zzaaam (int) form.\n    ";
static PyMethodDef __pyx_mdef_7isoname_22isovec_keys_2_zzaaam = {__Pyx_NAMESTR("isovec_keys_2_zzaaam"), (PyCFunction)__pyx_pf_7isoname_22isovec_keys_2_zzaaam, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_22isovec_keys_2_zzaaam)};
static PyObject *__pyx_pf_7isoname_22isovec_keys_2_zzaaam(PyObject *__pyx_self, PyObject *__pyx_v_isovec) {
  PyObject *__pyx_v_newvec;
  PyObject *__pyx_v_iso;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("isovec_keys_2_zzaaam");
  __pyx_self = __pyx_self;
  __pyx_v_newvec = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_iso = Py_None; __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isovec), (&PyDict_Type), 1, "isovec", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/isoname/isoname_wrapper.pyx":454
 *         * `newvec` (dict): isotopic vector with keys of zzaaam (int) form.
 *     """
 *     newvec = {}             # <<<<<<<<<<<<<<
 * 
 *     for iso in isovec.keys():
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_v_newvec));
  __pyx_v_newvec = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":456
 *     newvec = {}
 * 
 *     for iso in isovec.keys():             # <<<<<<<<<<<<<<
 *         newvec[mixed_2_zzaaam(iso)] = isovec[iso]
 * 
 */
  if (unlikely(__pyx_v_isovec == Py_None)) {
    PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'keys'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyDict_Keys(__pyx_v_isovec); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = 0; __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
  } else {
    __pyx_t_2 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_3))) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_3))) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++;
    } else {
      __pyx_t_1 = PyIter_Next(__pyx_t_3);
      if (!__pyx_t_1) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF(__pyx_v_iso);
    __pyx_v_iso = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "src/isoname/isoname_wrapper.pyx":457
 * 
 *     for iso in isovec.keys():
 *         newvec[mixed_2_zzaaam(iso)] = isovec[iso]             # <<<<<<<<<<<<<<
 * 
 *     return newvec
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(((PyObject *)__pyx_v_isovec), __pyx_v_iso); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__mixed_2_zzaaam); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_v_iso);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_iso);
    __Pyx_GIVEREF(__pyx_v_iso);
    __pyx_t_6 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (PyDict_SetItem(((PyObject *)__pyx_v_newvec), __pyx_t_6, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/isoname/isoname_wrapper.pyx":459
 *         newvec[mixed_2_zzaaam(iso)] = isovec[iso]
 * 
 *     return newvec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_newvec));
  __pyx_r = ((PyObject *)__pyx_v_newvec);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("isoname.isovec_keys_2_zzaaam");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_newvec);
  __Pyx_DECREF(__pyx_v_iso);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":462
 * 
 * 
 * def isovec_keys_2_LLAAAM(dict isovec):             # <<<<<<<<<<<<<<
 *     """Converts all keys of an isotopic vector dictionary to LLAAAM form.
 * 
 */

static PyObject *__pyx_pf_7isoname_23isovec_keys_2_LLAAAM(PyObject *__pyx_self, PyObject *__pyx_v_isovec); /*proto*/
static char __pyx_doc_7isoname_23isovec_keys_2_LLAAAM[] = "Converts all keys of an isotopic vector dictionary to LLAAAM form.\n\n    Args:\n        * `isovec` (dict): isotopic vector with keys of unknown/mixed form.\n\n    Returns:\n        * `newvec` (dict): isotopic vector with keys of LLAAAM (str) form.\n    ";
static PyMethodDef __pyx_mdef_7isoname_23isovec_keys_2_LLAAAM = {__Pyx_NAMESTR("isovec_keys_2_LLAAAM"), (PyCFunction)__pyx_pf_7isoname_23isovec_keys_2_LLAAAM, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_23isovec_keys_2_LLAAAM)};
static PyObject *__pyx_pf_7isoname_23isovec_keys_2_LLAAAM(PyObject *__pyx_self, PyObject *__pyx_v_isovec) {
  PyObject *__pyx_v_newvec;
  PyObject *__pyx_v_iso;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("isovec_keys_2_LLAAAM");
  __pyx_self = __pyx_self;
  __pyx_v_newvec = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_iso = Py_None; __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isovec), (&PyDict_Type), 1, "isovec", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/isoname/isoname_wrapper.pyx":471
 *         * `newvec` (dict): isotopic vector with keys of LLAAAM (str) form.
 *     """
 *     newvec = {}             # <<<<<<<<<<<<<<
 * 
 *     for iso in isovec.keys():
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_v_newvec));
  __pyx_v_newvec = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":473
 *     newvec = {}
 * 
 *     for iso in isovec.keys():             # <<<<<<<<<<<<<<
 *         newvec[mixed_2_LLAAAM(iso)] = isovec[iso]
 * 
 */
  if (unlikely(__pyx_v_isovec == Py_None)) {
    PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'keys'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyDict_Keys(__pyx_v_isovec); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = 0; __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
  } else {
    __pyx_t_2 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_3))) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_3))) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++;
    } else {
      __pyx_t_1 = PyIter_Next(__pyx_t_3);
      if (!__pyx_t_1) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF(__pyx_v_iso);
    __pyx_v_iso = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "src/isoname/isoname_wrapper.pyx":474
 * 
 *     for iso in isovec.keys():
 *         newvec[mixed_2_LLAAAM(iso)] = isovec[iso]             # <<<<<<<<<<<<<<
 * 
 *     return newvec
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(((PyObject *)__pyx_v_isovec), __pyx_v_iso); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__mixed_2_LLAAAM); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_v_iso);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_iso);
    __Pyx_GIVEREF(__pyx_v_iso);
    __pyx_t_6 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (PyDict_SetItem(((PyObject *)__pyx_v_newvec), __pyx_t_6, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/isoname/isoname_wrapper.pyx":476
 *         newvec[mixed_2_LLAAAM(iso)] = isovec[iso]
 * 
 *     return newvec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_newvec));
  __pyx_r = ((PyObject *)__pyx_v_newvec);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("isoname.isovec_keys_2_LLAAAM");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_newvec);
  __Pyx_DECREF(__pyx_v_iso);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/isoname/isoname_wrapper.pyx":479
 * 
 * 
 * def isovec_keys_2_MCNP(dict isovec):             # <<<<<<<<<<<<<<
 *     """Converts all keys of an isotopic vector dictionary to MCNP form.
 * 
 */

static PyObject *__pyx_pf_7isoname_24isovec_keys_2_MCNP(PyObject *__pyx_self, PyObject *__pyx_v_isovec); /*proto*/
static char __pyx_doc_7isoname_24isovec_keys_2_MCNP[] = "Converts all keys of an isotopic vector dictionary to MCNP form.\n\n    Args:\n        * `isovec` (dict): isotopic vector with keys of unknown/mixed form.\n\n    Returns:\n        * `newvec` (dict): isotopic vector with keys of MCNP (int) form.\n    ";
static PyMethodDef __pyx_mdef_7isoname_24isovec_keys_2_MCNP = {__Pyx_NAMESTR("isovec_keys_2_MCNP"), (PyCFunction)__pyx_pf_7isoname_24isovec_keys_2_MCNP, METH_O, __Pyx_DOCSTR(__pyx_doc_7isoname_24isovec_keys_2_MCNP)};
static PyObject *__pyx_pf_7isoname_24isovec_keys_2_MCNP(PyObject *__pyx_self, PyObject *__pyx_v_isovec) {
  PyObject *__pyx_v_newvec;
  PyObject *__pyx_v_iso;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("isovec_keys_2_MCNP");
  __pyx_self = __pyx_self;
  __pyx_v_newvec = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_iso = Py_None; __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isovec), (&PyDict_Type), 1, "isovec", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/isoname/isoname_wrapper.pyx":488
 *         * `newvec` (dict): isotopic vector with keys of MCNP (int) form.
 *     """
 *     newvec = {}             # <<<<<<<<<<<<<<
 * 
 *     for iso in isovec.keys():
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_v_newvec));
  __pyx_v_newvec = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":490
 *     newvec = {}
 * 
 *     for iso in isovec.keys():             # <<<<<<<<<<<<<<
 *         newvec[mixed_2_MCNP(iso)] = isovec[iso]
 * 
 */
  if (unlikely(__pyx_v_isovec == Py_None)) {
    PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'keys'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyDict_Keys(__pyx_v_isovec); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = 0; __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
  } else {
    __pyx_t_2 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_3))) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_3))) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++;
    } else {
      __pyx_t_1 = PyIter_Next(__pyx_t_3);
      if (!__pyx_t_1) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF(__pyx_v_iso);
    __pyx_v_iso = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "src/isoname/isoname_wrapper.pyx":491
 * 
 *     for iso in isovec.keys():
 *         newvec[mixed_2_MCNP(iso)] = isovec[iso]             # <<<<<<<<<<<<<<
 * 
 *     return newvec
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(((PyObject *)__pyx_v_isovec), __pyx_v_iso); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__mixed_2_MCNP); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_v_iso);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_iso);
    __Pyx_GIVEREF(__pyx_v_iso);
    __pyx_t_6 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (PyDict_SetItem(((PyObject *)__pyx_v_newvec), __pyx_t_6, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/isoname/isoname_wrapper.pyx":493
 *         newvec[mixed_2_MCNP(iso)] = isovec[iso]
 * 
 *     return newvec             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_newvec));
  __pyx_r = ((PyObject *)__pyx_v_newvec);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("isoname.isovec_keys_2_MCNP");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_newvec);
  __Pyx_DECREF(__pyx_v_iso);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("isoname"),
    __Pyx_DOCSTR(__pyx_k_8), /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_n_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 1},
  {&__pyx_n_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 1},
  {&__pyx_n_s_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 0, 1, 1},
  {&__pyx_n_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 1},
  {&__pyx_n_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 1},
  {&__pyx_n_s__ACT, __pyx_k__ACT, sizeof(__pyx_k__ACT), 0, 0, 1, 1},
  {&__pyx_n_s__CurrentForm, __pyx_k__CurrentForm, sizeof(__pyx_k__CurrentForm), 0, 0, 1, 1},
  {&__pyx_n_s__FP, __pyx_k__FP, sizeof(__pyx_k__FP), 0, 0, 1, 1},
  {&__pyx_n_s__LAN, __pyx_k__LAN, sizeof(__pyx_k__LAN), 0, 0, 1, 1},
  {&__pyx_n_s__LLAAAM_2_MCNP, __pyx_k__LLAAAM_2_MCNP, sizeof(__pyx_k__LLAAAM_2_MCNP), 0, 0, 1, 1},
  {&__pyx_n_s__LLAAAM_2_MCNP_List, __pyx_k__LLAAAM_2_MCNP_List, sizeof(__pyx_k__LLAAAM_2_MCNP_List), 0, 0, 1, 1},
  {&__pyx_n_s__LLAAAM_2_zzaaam, __pyx_k__LLAAAM_2_zzaaam, sizeof(__pyx_k__LLAAAM_2_zzaaam), 0, 0, 1, 1},
  {&__pyx_n_s__LLzz, __pyx_k__LLzz, sizeof(__pyx_k__LLzz), 0, 0, 1, 1},
  {&__pyx_n_s__MA, __pyx_k__MA, sizeof(__pyx_k__MA), 0, 0, 1, 1},
  {&__pyx_n_s__MCNP_2_LLAAAM, __pyx_k__MCNP_2_LLAAAM, sizeof(__pyx_k__MCNP_2_LLAAAM), 0, 0, 1, 1},
  {&__pyx_n_s__MCNP_2_LLAAAM_List, __pyx_k__MCNP_2_LLAAAM_List, sizeof(__pyx_k__MCNP_2_LLAAAM_List), 0, 0, 1, 1},
  {&__pyx_n_s__MCNP_2_zzaaam, __pyx_k__MCNP_2_zzaaam, sizeof(__pyx_k__MCNP_2_zzaaam), 0, 0, 1, 1},
  {&__pyx_n_s__MCNP_2_zzaaam_List, __pyx_k__MCNP_2_zzaaam_List, sizeof(__pyx_k__MCNP_2_zzaaam_List), 0, 0, 1, 1},
  {&__pyx_n_s__TRU, __pyx_k__TRU, sizeof(__pyx_k__TRU), 0, 0, 1, 1},
  {&__pyx_n_s__TypeError, __pyx_k__TypeError, sizeof(__pyx_k__TypeError), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__act, __pyx_k__act, sizeof(__pyx_k__act), 0, 0, 1, 1},
  {&__pyx_n_s__add, __pyx_k__add, sizeof(__pyx_k__add), 0, 0, 1, 1},
  {&__pyx_n_s__basestring, __pyx_k__basestring, sizeof(__pyx_k__basestring), 0, 0, 1, 1},
  {&__pyx_n_s__begin, __pyx_k__begin, sizeof(__pyx_k__begin), 0, 0, 1, 1},
  {&__pyx_n_s__c_str, __pyx_k__c_str, sizeof(__pyx_k__c_str), 0, 0, 1, 1},
  {&__pyx_n_s__count, __pyx_k__count, sizeof(__pyx_k__count), 0, 0, 1, 1},
  {&__pyx_n_s__end, __pyx_k__end, sizeof(__pyx_k__end), 0, 0, 1, 1},
  {&__pyx_n_s__first, __pyx_k__first, sizeof(__pyx_k__first), 0, 0, 1, 1},
  {&__pyx_n_s__fp, __pyx_k__fp, sizeof(__pyx_k__fp), 0, 0, 1, 1},
  {&__pyx_n_s__isoname, __pyx_k__isoname, sizeof(__pyx_k__isoname), 0, 0, 1, 1},
  {&__pyx_n_s__isovec_keys_2_MCNP, __pyx_k__isovec_keys_2_MCNP, sizeof(__pyx_k__isovec_keys_2_MCNP), 0, 0, 1, 1},
  {&__pyx_n_s__keys, __pyx_k__keys, sizeof(__pyx_k__keys), 0, 0, 1, 1},
  {&__pyx_n_s__lan, __pyx_k__lan, sizeof(__pyx_k__lan), 0, 0, 1, 1},
  {&__pyx_n_s__ma, __pyx_k__ma, sizeof(__pyx_k__ma), 0, 0, 1, 1},
  {&__pyx_n_s__mixed_2_LLAAAM, __pyx_k__mixed_2_LLAAAM, sizeof(__pyx_k__mixed_2_LLAAAM), 0, 0, 1, 1},
  {&__pyx_n_s__mixed_2_LLAAAM_List, __pyx_k__mixed_2_LLAAAM_List, sizeof(__pyx_k__mixed_2_LLAAAM_List), 0, 0, 1, 1},
  {&__pyx_n_s__mixed_2_MCNP, __pyx_k__mixed_2_MCNP, sizeof(__pyx_k__mixed_2_MCNP), 0, 0, 1, 1},
  {&__pyx_n_s__mixed_2_MCNP_List, __pyx_k__mixed_2_MCNP_List, sizeof(__pyx_k__mixed_2_MCNP_List), 0, 0, 1, 1},
  {&__pyx_n_s__mixed_2_zzaaam, __pyx_k__mixed_2_zzaaam, sizeof(__pyx_k__mixed_2_zzaaam), 0, 0, 1, 1},
  {&__pyx_n_s__mixed_2_zzaaam_List, __pyx_k__mixed_2_zzaaam_List, sizeof(__pyx_k__mixed_2_zzaaam_List), 0, 0, 1, 1},
  {&__pyx_n_s__nuc_weight, __pyx_k__nuc_weight, sizeof(__pyx_k__nuc_weight), 0, 0, 1, 1},
  {&__pyx_n_s__nuc_weight_zzaaam, __pyx_k__nuc_weight_zzaaam, sizeof(__pyx_k__nuc_weight_zzaaam), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__second, __pyx_k__second, sizeof(__pyx_k__second), 0, 0, 1, 1},
  {&__pyx_n_s__tru, __pyx_k__tru, sizeof(__pyx_k__tru), 0, 0, 1, 1},
  {&__pyx_n_s__zzLL, __pyx_k__zzLL, sizeof(__pyx_k__zzLL), 0, 0, 1, 1},
  {&__pyx_n_s__zzaaam_2_LLAAAM, __pyx_k__zzaaam_2_LLAAAM, sizeof(__pyx_k__zzaaam_2_LLAAAM), 0, 0, 1, 1},
  {&__pyx_n_s__zzaaam_2_MCNP, __pyx_k__zzaaam_2_MCNP, sizeof(__pyx_k__zzaaam_2_MCNP), 0, 0, 1, 1},
  {&__pyx_n_s__zzaaam_2_MCNP_List, __pyx_k__zzaaam_2_MCNP_List, sizeof(__pyx_k__zzaaam_2_MCNP_List), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_basestring = __Pyx_GetName(__pyx_b, __pyx_n_s__basestring); if (!__pyx_builtin_basestring) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetName(__pyx_b, __pyx_n_s__TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "src/isoname/isoname_wrapper.pyx":119
 *         cpp_CurrentForm = cpp_isoname.CurrentForm(<int> nuc)
 *     else:
 *         raise TypeError("Nuclide not a string ot integer.")             # <<<<<<<<<<<<<<
 * 
 *     return cpp_CurrentForm.c_str()
 */
  __pyx_k_tuple_2 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_2));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_2, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_2));

  /* "src/isoname/isoname_wrapper.pyx":228
 *         newnuc = cpp_isoname.mixed_2_zzaaam(<int> nuc)
 *     else:
 *         raise TypeError("Nuclide not a string ot integer.")             # <<<<<<<<<<<<<<
 * 
 *     return newnuc
 */
  __pyx_k_tuple_3 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_3));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_3));

  /* "src/isoname/isoname_wrapper.pyx":249
 *         newnuc = cpp_isoname.mixed_2_LLAAAM(<int> nuc)
 *     else:
 *         raise TypeError("Nuclide not a string ot integer.")             # <<<<<<<<<<<<<<
 * 
 *     return newnuc.c_str()
 */
  __pyx_k_tuple_4 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_4));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_4, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_4));

  /* "src/isoname/isoname_wrapper.pyx":269
 *         newnuc = cpp_isoname.mixed_2_MCNP(<int> nuc)
 *     else:
 *         raise TypeError("Nuclide not a string ot integer.")             # <<<<<<<<<<<<<<
 * 
 *     return newnuc
 */
  __pyx_k_tuple_5 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_5));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_5, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_5));

  /* "src/isoname/isoname_wrapper.pyx":304
 *         weight = cpp_isoname.nuc_weight(<int> nuc)
 *     else:
 *         raise TypeError("Nuclide not a string ot integer.")             # <<<<<<<<<<<<<<
 * 
 *     return weight
 */
  __pyx_k_tuple_6 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_6));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_6, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_6));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  #if PY_VERSION_HEX < 0x02040000
  if (unlikely(__Pyx_Py23SetsImport() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initisoname(void); /*proto*/
PyMODINIT_FUNC initisoname(void)
#else
PyMODINIT_FUNC PyInit_isoname(void); /*proto*/
PyMODINIT_FUNC PyInit_isoname(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  #if CYTHON_REFNANNY
  void* __pyx_refnanny = NULL;
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  __pyx_refnanny = __Pyx_RefNanny->SetupContext("PyMODINIT_FUNC PyInit_isoname(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("isoname"), __pyx_methods, __Pyx_DOCSTR(__pyx_k_8), 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_isoname) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "src/isoname/isoname_wrapper.pyx":16
 * #
 * 
 * LLzz = {}             # <<<<<<<<<<<<<<
 * cdef map[std.string, int].iterator LLzz_iter = cpp_isoname.LLzz.begin()
 * while LLzz_iter != cpp_isoname.LLzz.end():
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__LLzz, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":17
 * 
 * LLzz = {}
 * cdef map[std.string, int].iterator LLzz_iter = cpp_isoname.LLzz.begin()             # <<<<<<<<<<<<<<
 * while LLzz_iter != cpp_isoname.LLzz.end():
 *     LLzz[deref(LLzz_iter).first.c_str()] = deref(LLzz_iter).second
 */
  __pyx_v_7isoname_LLzz_iter = isoname::LLzz.begin();

  /* "src/isoname/isoname_wrapper.pyx":18
 * LLzz = {}
 * cdef map[std.string, int].iterator LLzz_iter = cpp_isoname.LLzz.begin()
 * while LLzz_iter != cpp_isoname.LLzz.end():             # <<<<<<<<<<<<<<
 *     LLzz[deref(LLzz_iter).first.c_str()] = deref(LLzz_iter).second
 *     inc(LLzz_iter)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_7isoname_LLzz_iter != isoname::LLzz.end());
    if (!__pyx_t_2) break;

    /* "src/isoname/isoname_wrapper.pyx":19
 * cdef map[std.string, int].iterator LLzz_iter = cpp_isoname.LLzz.begin()
 * while LLzz_iter != cpp_isoname.LLzz.end():
 *     LLzz[deref(LLzz_iter).first.c_str()] = deref(LLzz_iter).second             # <<<<<<<<<<<<<<
 *     inc(LLzz_iter)
 * 
 */
    __pyx_t_1 = PyInt_FromLong((*__pyx_v_7isoname_LLzz_iter).second); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__LLzz); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyBytes_FromString((*__pyx_v_7isoname_LLzz_iter).first.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    if (PyObject_SetItem(__pyx_t_3, ((PyObject *)__pyx_t_4), __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/isoname/isoname_wrapper.pyx":20
 * while LLzz_iter != cpp_isoname.LLzz.end():
 *     LLzz[deref(LLzz_iter).first.c_str()] = deref(LLzz_iter).second
 *     inc(LLzz_iter)             # <<<<<<<<<<<<<<
 * 
 * zzLL = {}
 */
    (++__pyx_v_7isoname_LLzz_iter);
  }

  /* "src/isoname/isoname_wrapper.pyx":22
 *     inc(LLzz_iter)
 * 
 * zzLL = {}             # <<<<<<<<<<<<<<
 * cdef map[int, std.string].iterator zzLL_iter = cpp_isoname.zzLL.begin()
 * while zzLL_iter != cpp_isoname.zzLL.end():
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__zzLL, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":23
 * 
 * zzLL = {}
 * cdef map[int, std.string].iterator zzLL_iter = cpp_isoname.zzLL.begin()             # <<<<<<<<<<<<<<
 * while zzLL_iter != cpp_isoname.zzLL.end():
 *     zzLL[deref(zzLL_iter).first] = deref(zzLL_iter).second.c_str()
 */
  __pyx_v_7isoname_zzLL_iter = isoname::zzLL.begin();

  /* "src/isoname/isoname_wrapper.pyx":24
 * zzLL = {}
 * cdef map[int, std.string].iterator zzLL_iter = cpp_isoname.zzLL.begin()
 * while zzLL_iter != cpp_isoname.zzLL.end():             # <<<<<<<<<<<<<<
 *     zzLL[deref(zzLL_iter).first] = deref(zzLL_iter).second.c_str()
 *     inc(zzLL_iter)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_7isoname_zzLL_iter != isoname::zzLL.end());
    if (!__pyx_t_2) break;

    /* "src/isoname/isoname_wrapper.pyx":25
 * cdef map[int, std.string].iterator zzLL_iter = cpp_isoname.zzLL.begin()
 * while zzLL_iter != cpp_isoname.zzLL.end():
 *     zzLL[deref(zzLL_iter).first] = deref(zzLL_iter).second.c_str()             # <<<<<<<<<<<<<<
 *     inc(zzLL_iter)
 * 
 */
    __pyx_t_1 = PyBytes_FromString((*__pyx_v_7isoname_zzLL_iter).second.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__zzLL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = (*__pyx_v_7isoname_zzLL_iter).first;
    if (__Pyx_SetItemInt(__pyx_t_4, __pyx_t_5, ((PyObject *)__pyx_t_1), sizeof(int), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

    /* "src/isoname/isoname_wrapper.pyx":26
 * while zzLL_iter != cpp_isoname.zzLL.end():
 *     zzLL[deref(zzLL_iter).first] = deref(zzLL_iter).second.c_str()
 *     inc(zzLL_iter)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (++__pyx_v_7isoname_zzLL_iter);
  }

  /* "src/isoname/isoname_wrapper.pyx":33
 * #
 * 
 * LAN = set()             # <<<<<<<<<<<<<<
 * cdef cpp_set[std.string].iterator LAN_iter = cpp_isoname.LAN.begin()
 * while LAN_iter != cpp_isoname.LAN.end():
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__LAN, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":34
 * 
 * LAN = set()
 * cdef cpp_set[std.string].iterator LAN_iter = cpp_isoname.LAN.begin()             # <<<<<<<<<<<<<<
 * while LAN_iter != cpp_isoname.LAN.end():
 *     LAN.add(deref(LAN_iter).c_str())
 */
  __pyx_v_7isoname_LAN_iter = isoname::LAN.begin();

  /* "src/isoname/isoname_wrapper.pyx":35
 * LAN = set()
 * cdef cpp_set[std.string].iterator LAN_iter = cpp_isoname.LAN.begin()
 * while LAN_iter != cpp_isoname.LAN.end():             # <<<<<<<<<<<<<<
 *     LAN.add(deref(LAN_iter).c_str())
 *     inc(LAN_iter)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_7isoname_LAN_iter != isoname::LAN.end());
    if (!__pyx_t_2) break;

    /* "src/isoname/isoname_wrapper.pyx":36
 * cdef cpp_set[std.string].iterator LAN_iter = cpp_isoname.LAN.begin()
 * while LAN_iter != cpp_isoname.LAN.end():
 *     LAN.add(deref(LAN_iter).c_str())             # <<<<<<<<<<<<<<
 *     inc(LAN_iter)
 * 
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__LAN); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__add); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyBytes_FromString((*__pyx_v_7isoname_LAN_iter).c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/isoname/isoname_wrapper.pyx":37
 * while LAN_iter != cpp_isoname.LAN.end():
 *     LAN.add(deref(LAN_iter).c_str())
 *     inc(LAN_iter)             # <<<<<<<<<<<<<<
 * 
 * ACT = set()
 */
    (++__pyx_v_7isoname_LAN_iter);
  }

  /* "src/isoname/isoname_wrapper.pyx":39
 *     inc(LAN_iter)
 * 
 * ACT = set()             # <<<<<<<<<<<<<<
 * cdef cpp_set[std.string].iterator ACT_iter = cpp_isoname.ACT.begin()
 * while ACT_iter != cpp_isoname.ACT.end():
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ACT, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":40
 * 
 * ACT = set()
 * cdef cpp_set[std.string].iterator ACT_iter = cpp_isoname.ACT.begin()             # <<<<<<<<<<<<<<
 * while ACT_iter != cpp_isoname.ACT.end():
 *     ACT.add(deref(ACT_iter).c_str())
 */
  __pyx_v_7isoname_ACT_iter = isoname::ACT.begin();

  /* "src/isoname/isoname_wrapper.pyx":41
 * ACT = set()
 * cdef cpp_set[std.string].iterator ACT_iter = cpp_isoname.ACT.begin()
 * while ACT_iter != cpp_isoname.ACT.end():             # <<<<<<<<<<<<<<
 *     ACT.add(deref(ACT_iter).c_str())
 *     inc(ACT_iter)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_7isoname_ACT_iter != isoname::ACT.end());
    if (!__pyx_t_2) break;

    /* "src/isoname/isoname_wrapper.pyx":42
 * cdef cpp_set[std.string].iterator ACT_iter = cpp_isoname.ACT.begin()
 * while ACT_iter != cpp_isoname.ACT.end():
 *     ACT.add(deref(ACT_iter).c_str())             # <<<<<<<<<<<<<<
 *     inc(ACT_iter)
 * 
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__ACT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__add); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyBytes_FromString((*__pyx_v_7isoname_ACT_iter).c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/isoname/isoname_wrapper.pyx":43
 * while ACT_iter != cpp_isoname.ACT.end():
 *     ACT.add(deref(ACT_iter).c_str())
 *     inc(ACT_iter)             # <<<<<<<<<<<<<<
 * 
 * TRU = set()
 */
    (++__pyx_v_7isoname_ACT_iter);
  }

  /* "src/isoname/isoname_wrapper.pyx":45
 *     inc(ACT_iter)
 * 
 * TRU = set()             # <<<<<<<<<<<<<<
 * cdef cpp_set[std.string].iterator TRU_iter = cpp_isoname.TRU.begin()
 * while TRU_iter != cpp_isoname.TRU.end():
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__TRU, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":46
 * 
 * TRU = set()
 * cdef cpp_set[std.string].iterator TRU_iter = cpp_isoname.TRU.begin()             # <<<<<<<<<<<<<<
 * while TRU_iter != cpp_isoname.TRU.end():
 *     TRU.add(deref(TRU_iter).c_str())
 */
  __pyx_v_7isoname_TRU_iter = isoname::TRU.begin();

  /* "src/isoname/isoname_wrapper.pyx":47
 * TRU = set()
 * cdef cpp_set[std.string].iterator TRU_iter = cpp_isoname.TRU.begin()
 * while TRU_iter != cpp_isoname.TRU.end():             # <<<<<<<<<<<<<<
 *     TRU.add(deref(TRU_iter).c_str())
 *     inc(TRU_iter)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_7isoname_TRU_iter != isoname::TRU.end());
    if (!__pyx_t_2) break;

    /* "src/isoname/isoname_wrapper.pyx":48
 * cdef cpp_set[std.string].iterator TRU_iter = cpp_isoname.TRU.begin()
 * while TRU_iter != cpp_isoname.TRU.end():
 *     TRU.add(deref(TRU_iter).c_str())             # <<<<<<<<<<<<<<
 *     inc(TRU_iter)
 * 
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__TRU); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__add); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyBytes_FromString((*__pyx_v_7isoname_TRU_iter).c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/isoname/isoname_wrapper.pyx":49
 * while TRU_iter != cpp_isoname.TRU.end():
 *     TRU.add(deref(TRU_iter).c_str())
 *     inc(TRU_iter)             # <<<<<<<<<<<<<<
 * 
 * MA = set()
 */
    (++__pyx_v_7isoname_TRU_iter);
  }

  /* "src/isoname/isoname_wrapper.pyx":51
 *     inc(TRU_iter)
 * 
 * MA = set()             # <<<<<<<<<<<<<<
 * cdef cpp_set[std.string].iterator MA_iter = cpp_isoname.MA.begin()
 * while MA_iter != cpp_isoname.MA.end():
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MA, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":52
 * 
 * MA = set()
 * cdef cpp_set[std.string].iterator MA_iter = cpp_isoname.MA.begin()             # <<<<<<<<<<<<<<
 * while MA_iter != cpp_isoname.MA.end():
 *     MA.add(deref(MA_iter).c_str())
 */
  __pyx_v_7isoname_MA_iter = isoname::MA.begin();

  /* "src/isoname/isoname_wrapper.pyx":53
 * MA = set()
 * cdef cpp_set[std.string].iterator MA_iter = cpp_isoname.MA.begin()
 * while MA_iter != cpp_isoname.MA.end():             # <<<<<<<<<<<<<<
 *     MA.add(deref(MA_iter).c_str())
 *     inc(MA_iter)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_7isoname_MA_iter != isoname::MA.end());
    if (!__pyx_t_2) break;

    /* "src/isoname/isoname_wrapper.pyx":54
 * cdef cpp_set[std.string].iterator MA_iter = cpp_isoname.MA.begin()
 * while MA_iter != cpp_isoname.MA.end():
 *     MA.add(deref(MA_iter).c_str())             # <<<<<<<<<<<<<<
 *     inc(MA_iter)
 * 
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__MA); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__add); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyBytes_FromString((*__pyx_v_7isoname_MA_iter).c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/isoname/isoname_wrapper.pyx":55
 * while MA_iter != cpp_isoname.MA.end():
 *     MA.add(deref(MA_iter).c_str())
 *     inc(MA_iter)             # <<<<<<<<<<<<<<
 * 
 * FP = set()
 */
    (++__pyx_v_7isoname_MA_iter);
  }

  /* "src/isoname/isoname_wrapper.pyx":57
 *     inc(MA_iter)
 * 
 * FP = set()             # <<<<<<<<<<<<<<
 * cdef cpp_set[std.string].iterator FP_iter = cpp_isoname.FP.begin()
 * while FP_iter != cpp_isoname.FP.end():
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__FP, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":58
 * 
 * FP = set()
 * cdef cpp_set[std.string].iterator FP_iter = cpp_isoname.FP.begin()             # <<<<<<<<<<<<<<
 * while FP_iter != cpp_isoname.FP.end():
 *     FP.add(deref(FP_iter).c_str())
 */
  __pyx_v_7isoname_FP_iter = isoname::FP.begin();

  /* "src/isoname/isoname_wrapper.pyx":59
 * FP = set()
 * cdef cpp_set[std.string].iterator FP_iter = cpp_isoname.FP.begin()
 * while FP_iter != cpp_isoname.FP.end():             # <<<<<<<<<<<<<<
 *     FP.add(deref(FP_iter).c_str())
 *     inc(FP_iter)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_7isoname_FP_iter != isoname::FP.end());
    if (!__pyx_t_2) break;

    /* "src/isoname/isoname_wrapper.pyx":60
 * cdef cpp_set[std.string].iterator FP_iter = cpp_isoname.FP.begin()
 * while FP_iter != cpp_isoname.FP.end():
 *     FP.add(deref(FP_iter).c_str())             # <<<<<<<<<<<<<<
 *     inc(FP_iter)
 * 
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__FP); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__add); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyBytes_FromString((*__pyx_v_7isoname_FP_iter).c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/isoname/isoname_wrapper.pyx":61
 * while FP_iter != cpp_isoname.FP.end():
 *     FP.add(deref(FP_iter).c_str())
 *     inc(FP_iter)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (++__pyx_v_7isoname_FP_iter);
  }

  /* "src/isoname/isoname_wrapper.pyx":68
 * #
 * 
 * lan = set()             # <<<<<<<<<<<<<<
 * cdef cpp_set[int].iterator lan_iter = cpp_isoname.lan.begin()
 * while lan_iter != cpp_isoname.lan.end():
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__lan, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":69
 * 
 * lan = set()
 * cdef cpp_set[int].iterator lan_iter = cpp_isoname.lan.begin()             # <<<<<<<<<<<<<<
 * while lan_iter != cpp_isoname.lan.end():
 *     lan.add(deref(lan_iter))
 */
  __pyx_v_7isoname_lan_iter = isoname::lan.begin();

  /* "src/isoname/isoname_wrapper.pyx":70
 * lan = set()
 * cdef cpp_set[int].iterator lan_iter = cpp_isoname.lan.begin()
 * while lan_iter != cpp_isoname.lan.end():             # <<<<<<<<<<<<<<
 *     lan.add(deref(lan_iter))
 *     inc(lan_iter)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_7isoname_lan_iter != isoname::lan.end());
    if (!__pyx_t_2) break;

    /* "src/isoname/isoname_wrapper.pyx":71
 * cdef cpp_set[int].iterator lan_iter = cpp_isoname.lan.begin()
 * while lan_iter != cpp_isoname.lan.end():
 *     lan.add(deref(lan_iter))             # <<<<<<<<<<<<<<
 *     inc(lan_iter)
 * 
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__lan); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__add); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyInt_FromLong((*__pyx_v_7isoname_lan_iter)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/isoname/isoname_wrapper.pyx":72
 * while lan_iter != cpp_isoname.lan.end():
 *     lan.add(deref(lan_iter))
 *     inc(lan_iter)             # <<<<<<<<<<<<<<
 * 
 * act = set()
 */
    (++__pyx_v_7isoname_lan_iter);
  }

  /* "src/isoname/isoname_wrapper.pyx":74
 *     inc(lan_iter)
 * 
 * act = set()             # <<<<<<<<<<<<<<
 * cdef cpp_set[int].iterator act_iter = cpp_isoname.act.begin()
 * while act_iter != cpp_isoname.act.end():
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__act, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":75
 * 
 * act = set()
 * cdef cpp_set[int].iterator act_iter = cpp_isoname.act.begin()             # <<<<<<<<<<<<<<
 * while act_iter != cpp_isoname.act.end():
 *     act.add(deref(act_iter))
 */
  __pyx_v_7isoname_act_iter = isoname::act.begin();

  /* "src/isoname/isoname_wrapper.pyx":76
 * act = set()
 * cdef cpp_set[int].iterator act_iter = cpp_isoname.act.begin()
 * while act_iter != cpp_isoname.act.end():             # <<<<<<<<<<<<<<
 *     act.add(deref(act_iter))
 *     inc(act_iter)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_7isoname_act_iter != isoname::act.end());
    if (!__pyx_t_2) break;

    /* "src/isoname/isoname_wrapper.pyx":77
 * cdef cpp_set[int].iterator act_iter = cpp_isoname.act.begin()
 * while act_iter != cpp_isoname.act.end():
 *     act.add(deref(act_iter))             # <<<<<<<<<<<<<<
 *     inc(act_iter)
 * 
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__act); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__add); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyInt_FromLong((*__pyx_v_7isoname_act_iter)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/isoname/isoname_wrapper.pyx":78
 * while act_iter != cpp_isoname.act.end():
 *     act.add(deref(act_iter))
 *     inc(act_iter)             # <<<<<<<<<<<<<<
 * 
 * tru = set()
 */
    (++__pyx_v_7isoname_act_iter);
  }

  /* "src/isoname/isoname_wrapper.pyx":80
 *     inc(act_iter)
 * 
 * tru = set()             # <<<<<<<<<<<<<<
 * cdef cpp_set[int].iterator tru_iter = cpp_isoname.tru.begin()
 * while tru_iter != cpp_isoname.tru.end():
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__tru, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":81
 * 
 * tru = set()
 * cdef cpp_set[int].iterator tru_iter = cpp_isoname.tru.begin()             # <<<<<<<<<<<<<<
 * while tru_iter != cpp_isoname.tru.end():
 *     tru.add(deref(tru_iter))
 */
  __pyx_v_7isoname_tru_iter = isoname::tru.begin();

  /* "src/isoname/isoname_wrapper.pyx":82
 * tru = set()
 * cdef cpp_set[int].iterator tru_iter = cpp_isoname.tru.begin()
 * while tru_iter != cpp_isoname.tru.end():             # <<<<<<<<<<<<<<
 *     tru.add(deref(tru_iter))
 *     inc(tru_iter)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_7isoname_tru_iter != isoname::tru.end());
    if (!__pyx_t_2) break;

    /* "src/isoname/isoname_wrapper.pyx":83
 * cdef cpp_set[int].iterator tru_iter = cpp_isoname.tru.begin()
 * while tru_iter != cpp_isoname.tru.end():
 *     tru.add(deref(tru_iter))             # <<<<<<<<<<<<<<
 *     inc(tru_iter)
 * 
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__tru); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__add); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyInt_FromLong((*__pyx_v_7isoname_tru_iter)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/isoname/isoname_wrapper.pyx":84
 * while tru_iter != cpp_isoname.tru.end():
 *     tru.add(deref(tru_iter))
 *     inc(tru_iter)             # <<<<<<<<<<<<<<
 * 
 * ma = set()
 */
    (++__pyx_v_7isoname_tru_iter);
  }

  /* "src/isoname/isoname_wrapper.pyx":86
 *     inc(tru_iter)
 * 
 * ma = set()             # <<<<<<<<<<<<<<
 * cdef cpp_set[int].iterator ma_iter = cpp_isoname.ma.begin()
 * while ma_iter != cpp_isoname.ma.end():
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ma, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":87
 * 
 * ma = set()
 * cdef cpp_set[int].iterator ma_iter = cpp_isoname.ma.begin()             # <<<<<<<<<<<<<<
 * while ma_iter != cpp_isoname.ma.end():
 *     ma.add(deref(ma_iter))
 */
  __pyx_v_7isoname_ma_iter = isoname::ma.begin();

  /* "src/isoname/isoname_wrapper.pyx":88
 * ma = set()
 * cdef cpp_set[int].iterator ma_iter = cpp_isoname.ma.begin()
 * while ma_iter != cpp_isoname.ma.end():             # <<<<<<<<<<<<<<
 *     ma.add(deref(ma_iter))
 *     inc(ma_iter)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_7isoname_ma_iter != isoname::ma.end());
    if (!__pyx_t_2) break;

    /* "src/isoname/isoname_wrapper.pyx":89
 * cdef cpp_set[int].iterator ma_iter = cpp_isoname.ma.begin()
 * while ma_iter != cpp_isoname.ma.end():
 *     ma.add(deref(ma_iter))             # <<<<<<<<<<<<<<
 *     inc(ma_iter)
 * 
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__ma); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__add); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyInt_FromLong((*__pyx_v_7isoname_ma_iter)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/isoname/isoname_wrapper.pyx":90
 * while ma_iter != cpp_isoname.ma.end():
 *     ma.add(deref(ma_iter))
 *     inc(ma_iter)             # <<<<<<<<<<<<<<
 * 
 * fp = set()
 */
    (++__pyx_v_7isoname_ma_iter);
  }

  /* "src/isoname/isoname_wrapper.pyx":92
 *     inc(ma_iter)
 * 
 * fp = set()             # <<<<<<<<<<<<<<
 * cdef cpp_set[int].iterator fp_iter = cpp_isoname.fp.begin()
 * while fp_iter != cpp_isoname.fp.end():
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__fp, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":93
 * 
 * fp = set()
 * cdef cpp_set[int].iterator fp_iter = cpp_isoname.fp.begin()             # <<<<<<<<<<<<<<
 * while fp_iter != cpp_isoname.fp.end():
 *     fp.add(deref(fp_iter))
 */
  __pyx_v_7isoname_fp_iter = isoname::fp.begin();

  /* "src/isoname/isoname_wrapper.pyx":94
 * fp = set()
 * cdef cpp_set[int].iterator fp_iter = cpp_isoname.fp.begin()
 * while fp_iter != cpp_isoname.fp.end():             # <<<<<<<<<<<<<<
 *     fp.add(deref(fp_iter))
 *     inc(fp_iter)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_7isoname_fp_iter != isoname::fp.end());
    if (!__pyx_t_2) break;

    /* "src/isoname/isoname_wrapper.pyx":95
 * cdef cpp_set[int].iterator fp_iter = cpp_isoname.fp.begin()
 * while fp_iter != cpp_isoname.fp.end():
 *     fp.add(deref(fp_iter))             # <<<<<<<<<<<<<<
 *     inc(fp_iter)
 * 
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__fp); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__add); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyInt_FromLong((*__pyx_v_7isoname_fp_iter)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/isoname/isoname_wrapper.pyx":96
 * while fp_iter != cpp_isoname.fp.end():
 *     fp.add(deref(fp_iter))
 *     inc(fp_iter)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (++__pyx_v_7isoname_fp_iter);
  }

  /* "src/isoname/isoname_wrapper.pyx":103
 * #
 * 
 * def CurrentForm(nuc):             # <<<<<<<<<<<<<<
 *     """Find the current form of a nuclide.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_CurrentForm, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__CurrentForm, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":128
 * #
 * 
 * def LLAAAM_2_zzaaam(char * nuc):             # <<<<<<<<<<<<<<
 *     """Converts a nuclide from LLAAAM form to its zzaaam form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_1LLAAAM_2_zzaaam, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__LLAAAM_2_zzaaam, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":140
 * 
 * 
 * def LLAAAM_2_MCNP(char * nuc):             # <<<<<<<<<<<<<<
 *     """Converts a nuclide from LLAAAM form to its MCNP form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_2LLAAAM_2_MCNP, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__LLAAAM_2_MCNP, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":155
 * #
 * 
 * def zzaaam_2_LLAAAM(int nuc):             # <<<<<<<<<<<<<<
 *     """Converts a nuclide from zzaaam form to its LLAAAM form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_3zzaaam_2_LLAAAM, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__zzaaam_2_LLAAAM, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":168
 * 
 * 
 * def zzaaam_2_MCNP(int nuc):             # <<<<<<<<<<<<<<
 *     """Converts a nuclide from zzaaam form to its MCNP form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_4zzaaam_2_MCNP, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__zzaaam_2_MCNP, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":184
 * #
 * 
 * def MCNP_2_zzaaam(int nuc):             # <<<<<<<<<<<<<<
 *     """Converts a nuclide from MCNP form to its zzaaam form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_5MCNP_2_zzaaam, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MCNP_2_zzaaam, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":196
 * 
 * 
 * def MCNP_2_LLAAAM(int nuc):             # <<<<<<<<<<<<<<
 *     """Converts a nuclide from MCNP form to its LLAAAM form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_6MCNP_2_LLAAAM, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MCNP_2_LLAAAM, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":213
 * #
 * 
 * def mixed_2_zzaaam(nuc):             # <<<<<<<<<<<<<<
 *     """Converts an arbitrary nuclide and its zzaaam form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_7mixed_2_zzaaam, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mixed_2_zzaaam, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":233
 * 
 * 
 * def mixed_2_LLAAAM(nuc):             # <<<<<<<<<<<<<<
 *     """Converts an arbitrary nuclide and its LLAAAM form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_8mixed_2_LLAAAM, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mixed_2_LLAAAM, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":254
 * 
 * 
 * def mixed_2_MCNP(nuc):             # <<<<<<<<<<<<<<
 *     """Converts an arbitrary nuclide and its MCNP form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_9mixed_2_MCNP, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mixed_2_MCNP, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":278
 * #
 * 
 * def nuc_weight_zzaaam(int nuc):             # <<<<<<<<<<<<<<
 *     """Calculates the weight of a nuclide in [amu].
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_10nuc_weight_zzaaam, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__nuc_weight_zzaaam, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":290
 * 
 * 
 * def nuc_weight(nuc):             # <<<<<<<<<<<<<<
 *     """Calculates the weight of a nuclide in [amu].
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_11nuc_weight, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__nuc_weight, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":313
 * #
 * 
 * def LLAAAM_2_zzaaam_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of LLAAAM form to a list of zzaaam form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_12LLAAAM_2_zzaaam_List, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_9, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":325
 * 
 * 
 * def LLAAAM_2_MCNP_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of LLAAAM form to a list of MCNP form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_13LLAAAM_2_MCNP_List, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__LLAAAM_2_MCNP_List, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":337
 * 
 * 
 * def zzaaam_2_LLAAAM_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of zzaaam form to a list of LLAAAM form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_14zzaaam_2_LLAAAM_List, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_10, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":349
 * 
 * 
 * def zzaaam_2_MCNP_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of zzaaam form to a list of MCNP form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_15zzaaam_2_MCNP_List, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__zzaaam_2_MCNP_List, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":361
 * 
 * 
 * def MCNP_2_LLAAAM_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of MCNP form to a list of LLAAAM form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_16MCNP_2_LLAAAM_List, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MCNP_2_LLAAAM_List, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":373
 * 
 * 
 * def MCNP_2_zzaaam_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of MCNP form to a list of zzaaam form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_17MCNP_2_zzaaam_List, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MCNP_2_zzaaam_List, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":389
 * #
 * 
 * def RearRemoveDuplicates(list l):             # <<<<<<<<<<<<<<
 *     """Removes duplicate entries from list l, starting from the back.
 *     Used internally in the [form]_2_[form]_List() functions.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_18RearRemoveDuplicates, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_7, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":406
 * 
 * 
 * def mixed_2_zzaaam_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of mixed form to a list of zzaaam form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_19mixed_2_zzaaam_List, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mixed_2_zzaaam_List, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":418
 * 
 * 
 * def mixed_2_LLAAAM_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of mixed form to a list of LLAAAM form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_20mixed_2_LLAAAM_List, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mixed_2_LLAAAM_List, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":430
 * 
 * 
 * def mixed_2_MCNP_List(list nuclist):             # <<<<<<<<<<<<<<
 *     """Converts a list of mixed form to a list of MCNP form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_21mixed_2_MCNP_List, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mixed_2_MCNP_List, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":445
 * #
 * 
 * def isovec_keys_2_zzaaam(dict isovec):             # <<<<<<<<<<<<<<
 *     """Converts all keys of an isotopic vector dictionary to zzaaam form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_22isovec_keys_2_zzaaam, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_11, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":462
 * 
 * 
 * def isovec_keys_2_LLAAAM(dict isovec):             # <<<<<<<<<<<<<<
 *     """Converts all keys of an isotopic vector dictionary to LLAAAM form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_23isovec_keys_2_LLAAAM, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_12, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":479
 * 
 * 
 * def isovec_keys_2_MCNP(dict isovec):             # <<<<<<<<<<<<<<
 *     """Converts all keys of an isotopic vector dictionary to MCNP form.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7isoname_24isovec_keys_2_MCNP, NULL, __pyx_n_s__isoname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__isovec_keys_2_MCNP, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/isoname/isoname_wrapper.pyx":1
 * """Python wrapper for isoname library."""             # <<<<<<<<<<<<<<
 * # Cython imports
 * from libcpp.map cimport map
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    __Pyx_AddTraceback("init isoname");
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init isoname");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}


static PyObject* __Pyx_PyObject_PopIndex(PyObject* L, Py_ssize_t ix) {
    PyObject *r, *m, *t, *py_ix;
#if PY_VERSION_HEX >= 0x02040000
    if (likely(PyList_CheckExact(L))) {
        Py_ssize_t size = PyList_GET_SIZE(L);
        if (likely(size > (((PyListObject*)L)->allocated >> 1))) {
            if (ix < 0) {
                ix += size;
            }
            if (likely(0 <= ix && ix < size)) {
                Py_ssize_t i;
                PyObject* v = PyList_GET_ITEM(L, ix);
                Py_SIZE(L) -= 1;
                size -= 1;
                for(i=ix; i<size; i++) {
                    PyList_SET_ITEM(L, i, PyList_GET_ITEM(L, i+1));
                }
                return v;
            }
        }
    }
#endif
    py_ix = t = NULL;
    m = __Pyx_GetAttrString(L, "pop");
    if (!m) goto bad;
    py_ix = PyInt_FromSsize_t(ix);
    if (!py_ix) goto bad;
    t = PyTuple_New(1);
    if (!t) goto bad;
    PyTuple_SET_ITEM(t, 0, py_ix);
    py_ix = NULL;
    r = PyObject_CallObject(m, t);
    Py_DECREF(m);
    Py_DECREF(t);
    return r;
bad:
    Py_XDECREF(m);
    Py_XDECREF(t);
    Py_XDECREF(py_ix);
    return NULL;
}

static CYTHON_INLINE void __Pyx_RaiseNoneIndexingError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is unsubscriptable");
}


static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
