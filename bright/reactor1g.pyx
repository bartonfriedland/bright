################################################
#                 WARNING!                     #
# This file has been auto-generated by Bright. #
# Do not modify!!!                             #
#                                              #
#                                              #
#                    Come on, guys. I mean it! #
################################################
"""no docstring for reactor1g, please file a bug report!
"""
cimport fccomp
cimport fluence_point
cimport numpy as np
cimport reactor_parameters
from bright cimport cpp_fccomp
from bright cimport cpp_fluence_point
from bright cimport cpp_reactor_parameters
from libcpp.map cimport map as cpp_map
from libcpp.set cimport set as cpp_set
from libcpp.string cimport string as std_string
from libcpp.vector cimport vector as cpp_vector
from pyne cimport cpp_material
from pyne cimport material
from pyne cimport stlconverters as conv

from pyne import material
from pyne import stlconverters as conv
import fccomp
import fluence_point
import numpy as np
import reactor_parameters

np.import_array()

cdef class Reactor1G(fccomp.FCComp):
    """no docstring for Reactor1G, please file a bug report!"""

    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults
        self._BU_F_ = None
        self._BUi_F_ = None
        self._D_F_ = None
        self._F = None
        self._Mj_F_ = None
        self._NiC = None
        self._NiF = None
        self._P_F_ = None
        self._SigmaCa_F_ = None
        self._SigmaCtr_F_ = None
        self._SigmaFa_F_ = None
        self._SigmaFtr_F_ = None
        self._coolant_chemical_form = None
        self._dC_F_ = None
        self._dF_F_ = None
        self._di_F_ = None
        self._fuel_chemical_form = None
        self._k_F_ = None
        self._kappaC_F_ = None
        self._kappaF_F_ = None
        self._lattice_E_F_ = None
        self._lattice_F_F_ = None
        self._mat_feed_act = None
        self._mat_feed_lan = None
        self._mat_feed_tru = None
        self._mat_feed_u = None
        self._mat_prod_act = None
        self._mat_prod_lan = None
        self._mat_prod_tru = None
        self._mat_prod_u = None
        self._miC = None
        self._miF = None
        self._niC = None
        self._niF = None
        self._pi_F_ = None
        self._zeta_F_ = None

    def _reactor1g_reactor1g_0(self, n=""):
        """"""
        self._inst = new cpp_reactor1g.Reactor1G(std_string(<char *> n))
    
    
    def _reactor1g_reactor1g_1(self, paramtrack, n=""):
        """"""
        cdef conv._SetStr paramtrack_proxy
        paramtrack_proxy = conv.SetStr(paramtrack, not isinstance(paramtrack, conv._SetStr))
        self._inst = new cpp_reactor1g.Reactor1G(paramtrack_proxy.set_ptr[0], std_string(<char *> n))
    
    
    def _reactor1g_reactor1g_2(self, rp, n=""):
        """"""
        cdef reactor_parameters.ReactorParameters rp_proxy
        rp_proxy = <reactor_parameters.ReactorParameters> rp
        self._inst = new cpp_reactor1g.Reactor1G((<cpp_reactor_parameters.ReactorParameters *> rp_proxy._inst)[0], std_string(<char *> n))
    
    
    def _reactor1g_reactor1g_3(self, rp, paramtrack, n=""):
        """"""
        cdef reactor_parameters.ReactorParameters rp_proxy
        cdef conv._SetStr paramtrack_proxy
        rp_proxy = <reactor_parameters.ReactorParameters> rp
        paramtrack_proxy = conv.SetStr(paramtrack, not isinstance(paramtrack, conv._SetStr))
        self._inst = new cpp_reactor1g.Reactor1G((<cpp_reactor_parameters.ReactorParameters *> rp_proxy._inst)[0], paramtrack_proxy.set_ptr[0], std_string(<char *> n))
    
    
    _reactor1g_reactor1g_0_argtypes = frozenset(((0, str), ("n", str)))
    _reactor1g_reactor1g_1_argtypes = frozenset(((0, conv.SetStr), (1, str), ("paramtrack", conv.SetStr), ("n", str)))
    _reactor1g_reactor1g_2_argtypes = frozenset(((0, reactor_parameters.ReactorParameters), (1, str), ("rp", reactor_parameters.ReactorParameters), ("n", str)))
    _reactor1g_reactor1g_3_argtypes = frozenset(((0, reactor_parameters.ReactorParameters), (1, conv.SetStr), (2, str), ("rp", reactor_parameters.ReactorParameters), ("paramtrack", conv.SetStr), ("n", str)))
    
    def __init__(self, *args, **kwargs):
        """"""
        types = set([(i, type(a)) for i, a in enumerate(args)])
        types.update([(k, type(v)) for k, v in kwargs.iteritems()])
        # vtable-like dispatch for exactly matching types
        if types <= self._reactor1g_reactor1g_0_argtypes:
            self._reactor1g_reactor1g_0(*args, **kwargs)
            return
        if types <= self._reactor1g_reactor1g_1_argtypes:
            self._reactor1g_reactor1g_1(*args, **kwargs)
            return
        if types <= self._reactor1g_reactor1g_2_argtypes:
            self._reactor1g_reactor1g_2(*args, **kwargs)
            return
        if types <= self._reactor1g_reactor1g_3_argtypes:
            self._reactor1g_reactor1g_3(*args, **kwargs)
            return
        # duck-typed dispatch based on whatever works!
        try:
            self._reactor1g_reactor1g_0(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            self._reactor1g_reactor1g_1(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            self._reactor1g_reactor1g_2(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            self._reactor1g_reactor1g_3(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        raise RuntimeError('method __init__() could not be dispatched')
    

    # attributes
    property A_IHM:
        """no docstring for A_IHM, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).A_IHM)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).A_IHM = <double> value
    
    
    property B:
        """no docstring for B, please file a bug report!"""
        def __get__(self):
            return int((<cpp_reactor1g.Reactor1G *> self._inst).B)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).B = value
    
    
    property BU_F_:
        """no docstring for BU_F_, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray BU_F__proxy
            cdef np.npy_intp BU_F__proxy_shape[1]
            if self._BU_F_ is None:
                BU_F__proxy_shape[0] = <np.npy_intp> (<cpp_reactor1g.Reactor1G *> self._inst).BU_F_.size()
                BU_F__proxy = np.PyArray_SimpleNewFromData(1, BU_F__proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor1g.Reactor1G *> self._inst).BU_F_[0])
                self._BU_F_ = BU_F__proxy
            return self._BU_F_
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor1g.Reactor1G *> self._inst).BU_F_ = value_proxy
            self._BU_F_ = None
    
    
    property BUd:
        """no docstring for BUd, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).BUd)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).BUd = <double> value
    
    
    property BUi_F_:
        """no docstring for BUi_F_, please file a bug report!"""
        def __get__(self):
            cdef conv._MapIntVectorDouble BUi_F__proxy
            if self._BUi_F_ is None:
                BUi_F__proxy = conv.MapIntVectorDouble(False, False)
                BUi_F__proxy.map_ptr = &(<cpp_reactor1g.Reactor1G *> self._inst).BUi_F_
                self._BUi_F_ = BUi_F__proxy
            return self._BUi_F_
    
        def __set__(self, value):
            cdef conv._MapIntVectorDouble value_proxy
            value_proxy = conv.MapIntVectorDouble(value, not isinstance(value, conv._MapIntVectorDouble))
            (<cpp_reactor1g.Reactor1G *> self._inst).BUi_F_ = value_proxy.map_ptr[0]
            self._BUi_F_ = None
    
    
    property D_F_:
        """no docstring for D_F_, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray D_F__proxy
            cdef np.npy_intp D_F__proxy_shape[1]
            if self._D_F_ is None:
                D_F__proxy_shape[0] = <np.npy_intp> (<cpp_reactor1g.Reactor1G *> self._inst).D_F_.size()
                D_F__proxy = np.PyArray_SimpleNewFromData(1, D_F__proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor1g.Reactor1G *> self._inst).D_F_[0])
                self._D_F_ = D_F__proxy
            return self._D_F_
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor1g.Reactor1G *> self._inst).D_F_ = value_proxy
            self._D_F_ = None
    
    
    property F:
        """no docstring for F, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray F_proxy
            cdef np.npy_intp F_proxy_shape[1]
            if self._F is None:
                F_proxy_shape[0] = <np.npy_intp> (<cpp_reactor1g.Reactor1G *> self._inst).F.size()
                F_proxy = np.PyArray_SimpleNewFromData(1, F_proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor1g.Reactor1G *> self._inst).F[0])
                self._F = F_proxy
            return self._F
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor1g.Reactor1G *> self._inst).F = value_proxy
            self._F = None
    
    
    property Fd:
        """no docstring for Fd, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).Fd)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).Fd = <double> value
    
    
    property MWC:
        """no docstring for MWC, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).MWC)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).MWC = <double> value
    
    
    property MWF:
        """no docstring for MWF, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).MWF)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).MWF = <double> value
    
    
    property Mj_F_:
        """no docstring for Mj_F_, please file a bug report!"""
        def __get__(self):
            cdef conv._MapIntVectorDouble Mj_F__proxy
            if self._Mj_F_ is None:
                Mj_F__proxy = conv.MapIntVectorDouble(False, False)
                Mj_F__proxy.map_ptr = &(<cpp_reactor1g.Reactor1G *> self._inst).Mj_F_
                self._Mj_F_ = Mj_F__proxy
            return self._Mj_F_
    
        def __set__(self, value):
            cdef conv._MapIntVectorDouble value_proxy
            value_proxy = conv.MapIntVectorDouble(value, not isinstance(value, conv._MapIntVectorDouble))
            (<cpp_reactor1g.Reactor1G *> self._inst).Mj_F_ = value_proxy.map_ptr[0]
            self._Mj_F_ = None
    
    
    property NiC:
        """no docstring for NiC, please file a bug report!"""
        def __get__(self):
            cdef conv._MapIntDouble NiC_proxy
            if self._NiC is None:
                NiC_proxy = conv.MapIntDouble(False, False)
                NiC_proxy.map_ptr = &(<cpp_reactor1g.Reactor1G *> self._inst).NiC
                self._NiC = NiC_proxy
            return self._NiC
    
        def __set__(self, value):
            cdef conv._MapIntDouble value_proxy
            value_proxy = conv.MapIntDouble(value, not isinstance(value, conv._MapIntDouble))
            (<cpp_reactor1g.Reactor1G *> self._inst).NiC = value_proxy.map_ptr[0]
            self._NiC = None
    
    
    property NiF:
        """no docstring for NiF, please file a bug report!"""
        def __get__(self):
            cdef conv._MapIntDouble NiF_proxy
            if self._NiF is None:
                NiF_proxy = conv.MapIntDouble(False, False)
                NiF_proxy.map_ptr = &(<cpp_reactor1g.Reactor1G *> self._inst).NiF
                self._NiF = NiF_proxy
            return self._NiF
    
        def __set__(self, value):
            cdef conv._MapIntDouble value_proxy
            value_proxy = conv.MapIntDouble(value, not isinstance(value, conv._MapIntDouble))
            (<cpp_reactor1g.Reactor1G *> self._inst).NiF = value_proxy.map_ptr[0]
            self._NiF = None
    
    
    property P_F_:
        """no docstring for P_F_, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray P_F__proxy
            cdef np.npy_intp P_F__proxy_shape[1]
            if self._P_F_ is None:
                P_F__proxy_shape[0] = <np.npy_intp> (<cpp_reactor1g.Reactor1G *> self._inst).P_F_.size()
                P_F__proxy = np.PyArray_SimpleNewFromData(1, P_F__proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor1g.Reactor1G *> self._inst).P_F_[0])
                self._P_F_ = P_F__proxy
            return self._P_F_
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor1g.Reactor1G *> self._inst).P_F_ = value_proxy
            self._P_F_ = None
    
    
    property P_NL:
        """no docstring for P_NL, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).P_NL)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).P_NL = <double> value
    
    
    property S_O:
        """no docstring for S_O, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).S_O)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).S_O = <double> value
    
    
    property S_T:
        """no docstring for S_T, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).S_T)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).S_T = <double> value
    
    
    property SigmaCa_F_:
        """no docstring for SigmaCa_F_, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray SigmaCa_F__proxy
            cdef np.npy_intp SigmaCa_F__proxy_shape[1]
            if self._SigmaCa_F_ is None:
                SigmaCa_F__proxy_shape[0] = <np.npy_intp> (<cpp_reactor1g.Reactor1G *> self._inst).SigmaCa_F_.size()
                SigmaCa_F__proxy = np.PyArray_SimpleNewFromData(1, SigmaCa_F__proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor1g.Reactor1G *> self._inst).SigmaCa_F_[0])
                self._SigmaCa_F_ = SigmaCa_F__proxy
            return self._SigmaCa_F_
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor1g.Reactor1G *> self._inst).SigmaCa_F_ = value_proxy
            self._SigmaCa_F_ = None
    
    
    property SigmaCtr_F_:
        """no docstring for SigmaCtr_F_, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray SigmaCtr_F__proxy
            cdef np.npy_intp SigmaCtr_F__proxy_shape[1]
            if self._SigmaCtr_F_ is None:
                SigmaCtr_F__proxy_shape[0] = <np.npy_intp> (<cpp_reactor1g.Reactor1G *> self._inst).SigmaCtr_F_.size()
                SigmaCtr_F__proxy = np.PyArray_SimpleNewFromData(1, SigmaCtr_F__proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor1g.Reactor1G *> self._inst).SigmaCtr_F_[0])
                self._SigmaCtr_F_ = SigmaCtr_F__proxy
            return self._SigmaCtr_F_
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor1g.Reactor1G *> self._inst).SigmaCtr_F_ = value_proxy
            self._SigmaCtr_F_ = None
    
    
    property SigmaFa_F_:
        """no docstring for SigmaFa_F_, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray SigmaFa_F__proxy
            cdef np.npy_intp SigmaFa_F__proxy_shape[1]
            if self._SigmaFa_F_ is None:
                SigmaFa_F__proxy_shape[0] = <np.npy_intp> (<cpp_reactor1g.Reactor1G *> self._inst).SigmaFa_F_.size()
                SigmaFa_F__proxy = np.PyArray_SimpleNewFromData(1, SigmaFa_F__proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor1g.Reactor1G *> self._inst).SigmaFa_F_[0])
                self._SigmaFa_F_ = SigmaFa_F__proxy
            return self._SigmaFa_F_
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor1g.Reactor1G *> self._inst).SigmaFa_F_ = value_proxy
            self._SigmaFa_F_ = None
    
    
    property SigmaFtr_F_:
        """no docstring for SigmaFtr_F_, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray SigmaFtr_F__proxy
            cdef np.npy_intp SigmaFtr_F__proxy_shape[1]
            if self._SigmaFtr_F_ is None:
                SigmaFtr_F__proxy_shape[0] = <np.npy_intp> (<cpp_reactor1g.Reactor1G *> self._inst).SigmaFtr_F_.size()
                SigmaFtr_F__proxy = np.PyArray_SimpleNewFromData(1, SigmaFtr_F__proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor1g.Reactor1G *> self._inst).SigmaFtr_F_[0])
                self._SigmaFtr_F_ = SigmaFtr_F__proxy
            return self._SigmaFtr_F_
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor1g.Reactor1G *> self._inst).SigmaFtr_F_ = value_proxy
            self._SigmaFtr_F_ = None
    
    
    property VC:
        """no docstring for VC, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).VC)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).VC = <double> value
    
    
    property VF:
        """no docstring for VF, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).VF)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).VF = <double> value
    
    
    property coolant_chemical_form:
        """no docstring for coolant_chemical_form, please file a bug report!"""
        def __get__(self):
            cdef conv._MapStrDouble coolant_chemical_form_proxy
            if self._coolant_chemical_form is None:
                coolant_chemical_form_proxy = conv.MapStrDouble(False, False)
                coolant_chemical_form_proxy.map_ptr = &(<cpp_reactor1g.Reactor1G *> self._inst).coolant_chemical_form
                self._coolant_chemical_form = coolant_chemical_form_proxy
            return self._coolant_chemical_form
    
        def __set__(self, value):
            cdef conv._MapStrDouble value_proxy
            value_proxy = conv.MapStrDouble(value, not isinstance(value, conv._MapStrDouble))
            (<cpp_reactor1g.Reactor1G *> self._inst).coolant_chemical_form = value_proxy.map_ptr[0]
            self._coolant_chemical_form = None
    
    
    property dC_F_:
        """no docstring for dC_F_, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray dC_F__proxy
            cdef np.npy_intp dC_F__proxy_shape[1]
            if self._dC_F_ is None:
                dC_F__proxy_shape[0] = <np.npy_intp> (<cpp_reactor1g.Reactor1G *> self._inst).dC_F_.size()
                dC_F__proxy = np.PyArray_SimpleNewFromData(1, dC_F__proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor1g.Reactor1G *> self._inst).dC_F_[0])
                self._dC_F_ = dC_F__proxy
            return self._dC_F_
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor1g.Reactor1G *> self._inst).dC_F_ = value_proxy
            self._dC_F_ = None
    
    
    property dF_F_:
        """no docstring for dF_F_, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray dF_F__proxy
            cdef np.npy_intp dF_F__proxy_shape[1]
            if self._dF_F_ is None:
                dF_F__proxy_shape[0] = <np.npy_intp> (<cpp_reactor1g.Reactor1G *> self._inst).dF_F_.size()
                dF_F__proxy = np.PyArray_SimpleNewFromData(1, dF_F__proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor1g.Reactor1G *> self._inst).dF_F_[0])
                self._dF_F_ = dF_F__proxy
            return self._dF_F_
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor1g.Reactor1G *> self._inst).dF_F_ = value_proxy
            self._dF_F_ = None
    
    
    property deltaR:
        """no docstring for deltaR, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).deltaR)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).deltaR = <double> value
    
    
    property di_F_:
        """no docstring for di_F_, please file a bug report!"""
        def __get__(self):
            cdef conv._MapIntVectorDouble di_F__proxy
            if self._di_F_ is None:
                di_F__proxy = conv.MapIntVectorDouble(False, False)
                di_F__proxy.map_ptr = &(<cpp_reactor1g.Reactor1G *> self._inst).di_F_
                self._di_F_ = di_F__proxy
            return self._di_F_
    
        def __set__(self, value):
            cdef conv._MapIntVectorDouble value_proxy
            value_proxy = conv.MapIntVectorDouble(value, not isinstance(value, conv._MapIntVectorDouble))
            (<cpp_reactor1g.Reactor1G *> self._inst).di_F_ = value_proxy.map_ptr[0]
            self._di_F_ = None
    
    
    property fd:
        """no docstring for fd, please file a bug report!"""
        def __get__(self):
            return int((<cpp_reactor1g.Reactor1G *> self._inst).fd)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).fd = value
    
    
    property fuel_chemical_form:
        """no docstring for fuel_chemical_form, please file a bug report!"""
        def __get__(self):
            cdef conv._MapStrDouble fuel_chemical_form_proxy
            if self._fuel_chemical_form is None:
                fuel_chemical_form_proxy = conv.MapStrDouble(False, False)
                fuel_chemical_form_proxy.map_ptr = &(<cpp_reactor1g.Reactor1G *> self._inst).fuel_chemical_form
                self._fuel_chemical_form = fuel_chemical_form_proxy
            return self._fuel_chemical_form
    
        def __set__(self, value):
            cdef conv._MapStrDouble value_proxy
            value_proxy = conv.MapStrDouble(value, not isinstance(value, conv._MapStrDouble))
            (<cpp_reactor1g.Reactor1G *> self._inst).fuel_chemical_form = value_proxy.map_ptr[0]
            self._fuel_chemical_form = None
    
    
    property k:
        """no docstring for k, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).k)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).k = <double> value
    
    
    property k_F_:
        """no docstring for k_F_, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray k_F__proxy
            cdef np.npy_intp k_F__proxy_shape[1]
            if self._k_F_ is None:
                k_F__proxy_shape[0] = <np.npy_intp> (<cpp_reactor1g.Reactor1G *> self._inst).k_F_.size()
                k_F__proxy = np.PyArray_SimpleNewFromData(1, k_F__proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor1g.Reactor1G *> self._inst).k_F_[0])
                self._k_F_ = k_F__proxy
            return self._k_F_
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor1g.Reactor1G *> self._inst).k_F_ = value_proxy
            self._k_F_ = None
    
    
    property kappaC_F_:
        """no docstring for kappaC_F_, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray kappaC_F__proxy
            cdef np.npy_intp kappaC_F__proxy_shape[1]
            if self._kappaC_F_ is None:
                kappaC_F__proxy_shape[0] = <np.npy_intp> (<cpp_reactor1g.Reactor1G *> self._inst).kappaC_F_.size()
                kappaC_F__proxy = np.PyArray_SimpleNewFromData(1, kappaC_F__proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor1g.Reactor1G *> self._inst).kappaC_F_[0])
                self._kappaC_F_ = kappaC_F__proxy
            return self._kappaC_F_
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor1g.Reactor1G *> self._inst).kappaC_F_ = value_proxy
            self._kappaC_F_ = None
    
    
    property kappaF_F_:
        """no docstring for kappaF_F_, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray kappaF_F__proxy
            cdef np.npy_intp kappaF_F__proxy_shape[1]
            if self._kappaF_F_ is None:
                kappaF_F__proxy_shape[0] = <np.npy_intp> (<cpp_reactor1g.Reactor1G *> self._inst).kappaF_F_.size()
                kappaF_F__proxy = np.PyArray_SimpleNewFromData(1, kappaF_F__proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor1g.Reactor1G *> self._inst).kappaF_F_[0])
                self._kappaF_F_ = kappaF_F__proxy
            return self._kappaF_F_
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor1g.Reactor1G *> self._inst).kappaF_F_ = value_proxy
            self._kappaF_F_ = None
    
    
    property l:
        """no docstring for l, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).l)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).l = <double> value
    
    
    property lattice_E_F_:
        """no docstring for lattice_E_F_, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray lattice_E_F__proxy
            cdef np.npy_intp lattice_E_F__proxy_shape[1]
            if self._lattice_E_F_ is None:
                lattice_E_F__proxy_shape[0] = <np.npy_intp> (<cpp_reactor1g.Reactor1G *> self._inst).lattice_E_F_.size()
                lattice_E_F__proxy = np.PyArray_SimpleNewFromData(1, lattice_E_F__proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor1g.Reactor1G *> self._inst).lattice_E_F_[0])
                self._lattice_E_F_ = lattice_E_F__proxy
            return self._lattice_E_F_
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor1g.Reactor1G *> self._inst).lattice_E_F_ = value_proxy
            self._lattice_E_F_ = None
    
    
    property lattice_F_F_:
        """no docstring for lattice_F_F_, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray lattice_F_F__proxy
            cdef np.npy_intp lattice_F_F__proxy_shape[1]
            if self._lattice_F_F_ is None:
                lattice_F_F__proxy_shape[0] = <np.npy_intp> (<cpp_reactor1g.Reactor1G *> self._inst).lattice_F_F_.size()
                lattice_F_F__proxy = np.PyArray_SimpleNewFromData(1, lattice_F_F__proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor1g.Reactor1G *> self._inst).lattice_F_F_[0])
                self._lattice_F_F_ = lattice_F_F__proxy
            return self._lattice_F_F_
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor1g.Reactor1G *> self._inst).lattice_F_F_ = value_proxy
            self._lattice_F_F_ = None
    
    
    property lattice_flag:
        """no docstring for lattice_flag, please file a bug report!"""
        def __get__(self):
            return str(<char *> (<cpp_reactor1g.Reactor1G *> self._inst).lattice_flag.c_str())
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).lattice_flag = std_string(<char *> value)
    
    
    property libfile:
        """no docstring for libfile, please file a bug report!"""
        def __get__(self):
            return str(<char *> (<cpp_reactor1g.Reactor1G *> self._inst).libfile.c_str())
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).libfile = std_string(<char *> value)
    
    
    property mat_feed_act:
        """no docstring for mat_feed_act, please file a bug report!"""
        def __get__(self):
            cdef material._Material mat_feed_act_proxy
            if self._mat_feed_act is None:
                mat_feed_act_proxy = material.Material(free_mat=False)
                mat_feed_act_proxy.mat_pointer = &(<cpp_reactor1g.Reactor1G *> self._inst).mat_feed_act
                self._mat_feed_act = mat_feed_act_proxy
            return self._mat_feed_act
    
        def __set__(self, value):
            cdef material._Material value_proxy
            value_proxy = material.Material(value, free_mat=not isinstance(value, material._Material))
            (<cpp_reactor1g.Reactor1G *> self._inst).mat_feed_act = value_proxy.mat_pointer[0]
            self._mat_feed_act = None
    
    
    property mat_feed_lan:
        """no docstring for mat_feed_lan, please file a bug report!"""
        def __get__(self):
            cdef material._Material mat_feed_lan_proxy
            if self._mat_feed_lan is None:
                mat_feed_lan_proxy = material.Material(free_mat=False)
                mat_feed_lan_proxy.mat_pointer = &(<cpp_reactor1g.Reactor1G *> self._inst).mat_feed_lan
                self._mat_feed_lan = mat_feed_lan_proxy
            return self._mat_feed_lan
    
        def __set__(self, value):
            cdef material._Material value_proxy
            value_proxy = material.Material(value, free_mat=not isinstance(value, material._Material))
            (<cpp_reactor1g.Reactor1G *> self._inst).mat_feed_lan = value_proxy.mat_pointer[0]
            self._mat_feed_lan = None
    
    
    property mat_feed_tru:
        """no docstring for mat_feed_tru, please file a bug report!"""
        def __get__(self):
            cdef material._Material mat_feed_tru_proxy
            if self._mat_feed_tru is None:
                mat_feed_tru_proxy = material.Material(free_mat=False)
                mat_feed_tru_proxy.mat_pointer = &(<cpp_reactor1g.Reactor1G *> self._inst).mat_feed_tru
                self._mat_feed_tru = mat_feed_tru_proxy
            return self._mat_feed_tru
    
        def __set__(self, value):
            cdef material._Material value_proxy
            value_proxy = material.Material(value, free_mat=not isinstance(value, material._Material))
            (<cpp_reactor1g.Reactor1G *> self._inst).mat_feed_tru = value_proxy.mat_pointer[0]
            self._mat_feed_tru = None
    
    
    property mat_feed_u:
        """no docstring for mat_feed_u, please file a bug report!"""
        def __get__(self):
            cdef material._Material mat_feed_u_proxy
            if self._mat_feed_u is None:
                mat_feed_u_proxy = material.Material(free_mat=False)
                mat_feed_u_proxy.mat_pointer = &(<cpp_reactor1g.Reactor1G *> self._inst).mat_feed_u
                self._mat_feed_u = mat_feed_u_proxy
            return self._mat_feed_u
    
        def __set__(self, value):
            cdef material._Material value_proxy
            value_proxy = material.Material(value, free_mat=not isinstance(value, material._Material))
            (<cpp_reactor1g.Reactor1G *> self._inst).mat_feed_u = value_proxy.mat_pointer[0]
            self._mat_feed_u = None
    
    
    property mat_prod_act:
        """no docstring for mat_prod_act, please file a bug report!"""
        def __get__(self):
            cdef material._Material mat_prod_act_proxy
            if self._mat_prod_act is None:
                mat_prod_act_proxy = material.Material(free_mat=False)
                mat_prod_act_proxy.mat_pointer = &(<cpp_reactor1g.Reactor1G *> self._inst).mat_prod_act
                self._mat_prod_act = mat_prod_act_proxy
            return self._mat_prod_act
    
        def __set__(self, value):
            cdef material._Material value_proxy
            value_proxy = material.Material(value, free_mat=not isinstance(value, material._Material))
            (<cpp_reactor1g.Reactor1G *> self._inst).mat_prod_act = value_proxy.mat_pointer[0]
            self._mat_prod_act = None
    
    
    property mat_prod_lan:
        """no docstring for mat_prod_lan, please file a bug report!"""
        def __get__(self):
            cdef material._Material mat_prod_lan_proxy
            if self._mat_prod_lan is None:
                mat_prod_lan_proxy = material.Material(free_mat=False)
                mat_prod_lan_proxy.mat_pointer = &(<cpp_reactor1g.Reactor1G *> self._inst).mat_prod_lan
                self._mat_prod_lan = mat_prod_lan_proxy
            return self._mat_prod_lan
    
        def __set__(self, value):
            cdef material._Material value_proxy
            value_proxy = material.Material(value, free_mat=not isinstance(value, material._Material))
            (<cpp_reactor1g.Reactor1G *> self._inst).mat_prod_lan = value_proxy.mat_pointer[0]
            self._mat_prod_lan = None
    
    
    property mat_prod_tru:
        """no docstring for mat_prod_tru, please file a bug report!"""
        def __get__(self):
            cdef material._Material mat_prod_tru_proxy
            if self._mat_prod_tru is None:
                mat_prod_tru_proxy = material.Material(free_mat=False)
                mat_prod_tru_proxy.mat_pointer = &(<cpp_reactor1g.Reactor1G *> self._inst).mat_prod_tru
                self._mat_prod_tru = mat_prod_tru_proxy
            return self._mat_prod_tru
    
        def __set__(self, value):
            cdef material._Material value_proxy
            value_proxy = material.Material(value, free_mat=not isinstance(value, material._Material))
            (<cpp_reactor1g.Reactor1G *> self._inst).mat_prod_tru = value_proxy.mat_pointer[0]
            self._mat_prod_tru = None
    
    
    property mat_prod_u:
        """no docstring for mat_prod_u, please file a bug report!"""
        def __get__(self):
            cdef material._Material mat_prod_u_proxy
            if self._mat_prod_u is None:
                mat_prod_u_proxy = material.Material(free_mat=False)
                mat_prod_u_proxy.mat_pointer = &(<cpp_reactor1g.Reactor1G *> self._inst).mat_prod_u
                self._mat_prod_u = mat_prod_u_proxy
            return self._mat_prod_u
    
        def __set__(self, value):
            cdef material._Material value_proxy
            value_proxy = material.Material(value, free_mat=not isinstance(value, material._Material))
            (<cpp_reactor1g.Reactor1G *> self._inst).mat_prod_u = value_proxy.mat_pointer[0]
            self._mat_prod_u = None
    
    
    property miC:
        """no docstring for miC, please file a bug report!"""
        def __get__(self):
            cdef conv._MapIntDouble miC_proxy
            if self._miC is None:
                miC_proxy = conv.MapIntDouble(False, False)
                miC_proxy.map_ptr = &(<cpp_reactor1g.Reactor1G *> self._inst).miC
                self._miC = miC_proxy
            return self._miC
    
        def __set__(self, value):
            cdef conv._MapIntDouble value_proxy
            value_proxy = conv.MapIntDouble(value, not isinstance(value, conv._MapIntDouble))
            (<cpp_reactor1g.Reactor1G *> self._inst).miC = value_proxy.map_ptr[0]
            self._miC = None
    
    
    property miF:
        """no docstring for miF, please file a bug report!"""
        def __get__(self):
            cdef conv._MapIntDouble miF_proxy
            if self._miF is None:
                miF_proxy = conv.MapIntDouble(False, False)
                miF_proxy.map_ptr = &(<cpp_reactor1g.Reactor1G *> self._inst).miF
                self._miF = miF_proxy
            return self._miF
    
        def __set__(self, value):
            cdef conv._MapIntDouble value_proxy
            value_proxy = conv.MapIntDouble(value, not isinstance(value, conv._MapIntDouble))
            (<cpp_reactor1g.Reactor1G *> self._inst).miF = value_proxy.map_ptr[0]
            self._miF = None
    
    
    property niC:
        """no docstring for niC, please file a bug report!"""
        def __get__(self):
            cdef conv._MapIntDouble niC_proxy
            if self._niC is None:
                niC_proxy = conv.MapIntDouble(False, False)
                niC_proxy.map_ptr = &(<cpp_reactor1g.Reactor1G *> self._inst).niC
                self._niC = niC_proxy
            return self._niC
    
        def __set__(self, value):
            cdef conv._MapIntDouble value_proxy
            value_proxy = conv.MapIntDouble(value, not isinstance(value, conv._MapIntDouble))
            (<cpp_reactor1g.Reactor1G *> self._inst).niC = value_proxy.map_ptr[0]
            self._niC = None
    
    
    property niF:
        """no docstring for niF, please file a bug report!"""
        def __get__(self):
            cdef conv._MapIntDouble niF_proxy
            if self._niF is None:
                niF_proxy = conv.MapIntDouble(False, False)
                niF_proxy.map_ptr = &(<cpp_reactor1g.Reactor1G *> self._inst).niF
                self._niF = niF_proxy
            return self._niF
    
        def __set__(self, value):
            cdef conv._MapIntDouble value_proxy
            value_proxy = conv.MapIntDouble(value, not isinstance(value, conv._MapIntDouble))
            (<cpp_reactor1g.Reactor1G *> self._inst).niF = value_proxy.map_ptr[0]
            self._niF = None
    
    
    property phi:
        """no docstring for phi, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).phi)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).phi = <double> value
    
    
    property pi_F_:
        """no docstring for pi_F_, please file a bug report!"""
        def __get__(self):
            cdef conv._MapIntVectorDouble pi_F__proxy
            if self._pi_F_ is None:
                pi_F__proxy = conv.MapIntVectorDouble(False, False)
                pi_F__proxy.map_ptr = &(<cpp_reactor1g.Reactor1G *> self._inst).pi_F_
                self._pi_F_ = pi_F__proxy
            return self._pi_F_
    
        def __set__(self, value):
            cdef conv._MapIntVectorDouble value_proxy
            value_proxy = conv.MapIntVectorDouble(value, not isinstance(value, conv._MapIntVectorDouble))
            (<cpp_reactor1g.Reactor1G *> self._inst).pi_F_ = value_proxy.map_ptr[0]
            self._pi_F_ = None
    
    
    property r:
        """no docstring for r, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).r)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).r = <double> value
    
    
    property rescale_hydrogen_xs:
        """no docstring for rescale_hydrogen_xs, please file a bug report!"""
        def __get__(self):
            return bool((<cpp_reactor1g.Reactor1G *> self._inst).rescale_hydrogen_xs)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).rescale_hydrogen_xs = <bint> value
    
    
    property rhoC:
        """no docstring for rhoC, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).rhoC)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).rhoC = <double> value
    
    
    property rhoF:
        """no docstring for rhoF, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).rhoF)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).rhoF = <double> value
    
    
    property target_BU:
        """no docstring for target_BU, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).target_BU)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).target_BU = <double> value
    
    
    property tru_cr:
        """no docstring for tru_cr, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor1g.Reactor1G *> self._inst).tru_cr)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).tru_cr = <double> value
    
    
    property use_zeta:
        """no docstring for use_zeta, please file a bug report!"""
        def __get__(self):
            return bool((<cpp_reactor1g.Reactor1G *> self._inst).use_zeta)
    
        def __set__(self, value):
            (<cpp_reactor1g.Reactor1G *> self._inst).use_zeta = <bint> value
    
    
    property zeta_F_:
        """no docstring for zeta_F_, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray zeta_F__proxy
            cdef np.npy_intp zeta_F__proxy_shape[1]
            if self._zeta_F_ is None:
                zeta_F__proxy_shape[0] = <np.npy_intp> (<cpp_reactor1g.Reactor1G *> self._inst).zeta_F_.size()
                zeta_F__proxy = np.PyArray_SimpleNewFromData(1, zeta_F__proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor1g.Reactor1G *> self._inst).zeta_F_[0])
                self._zeta_F_ = zeta_F__proxy
            return self._zeta_F_
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor1g.Reactor1G *> self._inst).zeta_F_ = value_proxy
            self._zeta_F_ = None
    
    
    # methods
    def BUd_bisection_method(self):
        """no docstring for BUd_bisection_method, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).BUd_bisection_method()
    
    
    def batch_average(self, BUd, PDk_flag="K"):
        """no docstring for batch_average, please file a bug report!"""
        cdef double rtnval
        rtnval = (<cpp_reactor1g.Reactor1G *> self._inst).batch_average(<double> BUd, std_string(<char *> PDk_flag))
        return float(rtnval)
    
    
    def batch_average_k(self, BUd):
        """no docstring for batch_average_k, please file a bug report!"""
        cdef double rtnval
        rtnval = (<cpp_reactor1g.Reactor1G *> self._inst).batch_average_k(<double> BUd)
        return float(rtnval)
    
    
    def _reactor1g_calc_0(self):
        """no docstring for calc, please file a bug report!"""
        cdef cpp_material.Material rtnval
        cdef material._Material rtnval_proxy
        rtnval = (<cpp_fccomp.FCComp *> self._inst).calc()
        rtnval_proxy = material.Material()
        rtnval_proxy.mat_pointer[0] = rtnval
        return rtnval_proxy
    
    
    def _reactor1g_calc_1(self, incomp):
        """no docstring for calc, please file a bug report!"""
        cdef conv._MapIntDouble incomp_proxy
        cdef cpp_material.Material rtnval
        cdef material._Material rtnval_proxy
        incomp_proxy = conv.MapIntDouble(incomp, not isinstance(incomp, conv._MapIntDouble))
        rtnval = (<cpp_fccomp.FCComp *> self._inst).calc(incomp_proxy.map_ptr[0])
        rtnval_proxy = material.Material()
        rtnval_proxy.mat_pointer[0] = rtnval
        return rtnval_proxy
    
    
    def _reactor1g_calc_2(self, mat):
        """no docstring for calc, please file a bug report!"""
        cdef material._Material mat_proxy
        cdef cpp_material.Material rtnval
        cdef material._Material rtnval_proxy
        mat_proxy = material.Material(mat, free_mat=not isinstance(mat, material._Material))
        rtnval = (<cpp_fccomp.FCComp *> self._inst).calc(mat_proxy.mat_pointer[0])
        rtnval_proxy = material.Material()
        rtnval_proxy.mat_pointer[0] = rtnval
        return rtnval_proxy
    
    
    _reactor1g_calc_0_argtypes = frozenset()
    _reactor1g_calc_1_argtypes = frozenset(((0, conv.MapIntDouble), ("incomp", conv.MapIntDouble)))
    _reactor1g_calc_2_argtypes = frozenset(((0, material.Material), ("mat", material.Material)))
    
    def calc(self, *args, **kwargs):
        """no docstring for calc, please file a bug report!"""
        types = set([(i, type(a)) for i, a in enumerate(args)])
        types.update([(k, type(v)) for k, v in kwargs.iteritems()])
        # vtable-like dispatch for exactly matching types
        if types <= self._reactor1g_calc_0_argtypes:
            return self._reactor1g_calc_0(*args, **kwargs)
        if types <= self._reactor1g_calc_1_argtypes:
            return self._reactor1g_calc_1(*args, **kwargs)
        if types <= self._reactor1g_calc_2_argtypes:
            return self._reactor1g_calc_2(*args, **kwargs)
        # duck-typed dispatch based on whatever works!
        try:
            return self._reactor1g_calc_0(*args, **kwargs)
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            return self._reactor1g_calc_1(*args, **kwargs)
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            return self._reactor1g_calc_2(*args, **kwargs)
        except (RuntimeError, TypeError, NameError):
            pass
        raise RuntimeError('method calc() could not be dispatched')
    
    def calc_Mj_F_(self):
        """no docstring for calc_Mj_F_, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).calc_Mj_F_()
    
    
    def calc_Mj_Fd_(self):
        """no docstring for calc_Mj_Fd_, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).calc_Mj_Fd_()
    
    
    def _reactor1g_calc_deltar_0(self):
        """no docstring for calc_deltaR, please file a bug report!"""
        cdef double rtnval
        rtnval = (<cpp_reactor1g.Reactor1G *> self._inst).calc_deltaR()
        return float(rtnval)
    
    
    def _reactor1g_calc_deltar_1(self, incomp):
        """no docstring for calc_deltaR, please file a bug report!"""
        cdef conv._MapIntDouble incomp_proxy
        cdef double rtnval
        incomp_proxy = conv.MapIntDouble(incomp, not isinstance(incomp, conv._MapIntDouble))
        rtnval = (<cpp_reactor1g.Reactor1G *> self._inst).calc_deltaR(incomp_proxy.map_ptr[0])
        return float(rtnval)
    
    
    def _reactor1g_calc_deltar_2(self, mat):
        """no docstring for calc_deltaR, please file a bug report!"""
        cdef material._Material mat_proxy
        cdef double rtnval
        mat_proxy = material.Material(mat, free_mat=not isinstance(mat, material._Material))
        rtnval = (<cpp_reactor1g.Reactor1G *> self._inst).calc_deltaR(mat_proxy.mat_pointer[0])
        return float(rtnval)
    
    
    _reactor1g_calc_deltar_0_argtypes = frozenset()
    _reactor1g_calc_deltar_1_argtypes = frozenset(((0, conv.MapIntDouble), ("incomp", conv.MapIntDouble)))
    _reactor1g_calc_deltar_2_argtypes = frozenset(((0, material.Material), ("mat", material.Material)))
    
    def calc_deltaR(self, *args, **kwargs):
        """no docstring for calc_deltaR, please file a bug report!"""
        types = set([(i, type(a)) for i, a in enumerate(args)])
        types.update([(k, type(v)) for k, v in kwargs.iteritems()])
        # vtable-like dispatch for exactly matching types
        if types <= self._reactor1g_calc_deltar_0_argtypes:
            return self._reactor1g_calc_deltar_0(*args, **kwargs)
        if types <= self._reactor1g_calc_deltar_1_argtypes:
            return self._reactor1g_calc_deltar_1(*args, **kwargs)
        if types <= self._reactor1g_calc_deltar_2_argtypes:
            return self._reactor1g_calc_deltar_2(*args, **kwargs)
        # duck-typed dispatch based on whatever works!
        try:
            return self._reactor1g_calc_deltar_0(*args, **kwargs)
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            return self._reactor1g_calc_deltar_1(*args, **kwargs)
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            return self._reactor1g_calc_deltar_2(*args, **kwargs)
        except (RuntimeError, TypeError, NameError):
            pass
        raise RuntimeError('method calc_deltaR() could not be dispatched')
    
    def calc_mat_prod(self):
        """no docstring for calc_mat_prod, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).calc_mat_prod()
    
    
    def calc_sub_mats(self):
        """no docstring for calc_sub_mats, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).calc_sub_mats()
    
    
    def calc_tru_cr(self):
        """no docstring for calc_tru_cr, please file a bug report!"""
        cdef double rtnval
        rtnval = (<cpp_reactor1g.Reactor1G *> self._inst).calc_tru_cr()
        return float(rtnval)
    
    
    def calc_zeta(self):
        """no docstring for calc_zeta, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).calc_zeta()
    
    
    def calc_zeta_cylindrical(self):
        """no docstring for calc_zeta_cylindrical, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).calc_zeta_cylindrical()
    
    
    def calc_zeta_planar(self):
        """no docstring for calc_zeta_planar, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).calc_zeta_planar()
    
    
    def calc_zeta_spherical(self):
        """no docstring for calc_zeta_spherical, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).calc_zeta_spherical()
    
    
    def calibrate_P_NL_to_BUd(self):
        """no docstring for calibrate_P_NL_to_BUd, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).calibrate_P_NL_to_BUd()
    
    
    def fluence_at_BU(self, BU):
        """no docstring for fluence_at_BU, please file a bug report!"""
        cdef cpp_fluence_point.FluencePoint rtnval
        cdef fluence_point.FluencePoint rtnval_proxy
        rtnval = (<cpp_reactor1g.Reactor1G *> self._inst).fluence_at_BU(<double> BU)
        rtnval_proxy = fluence_point.FluencePoint()
        (<cpp_fluence_point.FluencePoint *> rtnval_proxy._inst)[0] = rtnval
        return rtnval_proxy
    
    
    def fold_mass_weights(self):
        """no docstring for fold_mass_weights, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).fold_mass_weights()
    
    
    def initialize(self, rp):
        """no docstring for initialize, please file a bug report!"""
        cdef reactor_parameters.ReactorParameters rp_proxy
        rp_proxy = <reactor_parameters.ReactorParameters> rp
        (<cpp_reactor1g.Reactor1G *> self._inst).initialize((<cpp_reactor_parameters.ReactorParameters *> rp_proxy._inst)[0])
    
    
    def lattice_E_cylindrical(self, a, b):
        """no docstring for lattice_E_cylindrical, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).lattice_E_cylindrical(<double> a, <double> b)
    
    
    def lattice_E_planar(self, a, b):
        """no docstring for lattice_E_planar, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).lattice_E_planar(<double> a, <double> b)
    
    
    def lattice_E_spherical(self, a, b):
        """no docstring for lattice_E_spherical, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).lattice_E_spherical(<double> a, <double> b)
    
    
    def lattice_F_cylindrical(self, a, b):
        """no docstring for lattice_F_cylindrical, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).lattice_F_cylindrical(<double> a, <double> b)
    
    
    def lattice_F_planar(self, a, b):
        """no docstring for lattice_F_planar, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).lattice_F_planar(<double> a, <double> b)
    
    
    def lattice_F_spherical(self, a, b):
        """no docstring for lattice_F_spherical, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).lattice_F_spherical(<double> a, <double> b)
    
    
    def loadlib(self, libfile="Reactor.h5"):
        """no docstring for loadlib, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).loadlib(std_string(<char *> libfile))
    
    
    def run_P_NL(self, temp_pnl):
        """no docstring for run_P_NL, please file a bug report!"""
        (<cpp_reactor1g.Reactor1G *> self._inst).run_P_NL(<double> temp_pnl)
    
    


