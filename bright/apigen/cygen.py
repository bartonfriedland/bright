"""Generates a Cython wrapper for various Bright classes from either
description dictionaries or from header files.
"""

from bright.apigen.utils import indent
from bright.apigen.typesystem import cython_ctype, cython_cimport_tuples, \
    cython_cimports

_cpppxd_template = \
"""################################################
#                 Warning!                     #
# This file has been auto-generated by Bright. #
# Do not modify!!!                             #
#                                              #
#                                              #
#                    Come on, guys. I mean it! #
################################################
{cimports}

cdef extern from "{header_filename}" namespace "{namespace}":

    cdef cppclass {name}({parents_csv}):
        # attributes
{attrs_block}

        # methods
{methods_block}
"""


def gencpppxd(desc):
    """Generates a cpp_*.pxd Cython header file for exposing C/C++ data from to 
    other Cython wrappers based off of a dictionary (desc)ription.
    """
    d = dict(desc.items())
    d['parents_csv'] = ', '.join(d['parents'])

    alines = []
    cimport_tups = set()
    attritems = sorted(d['attrs'].items())
    for aname, atype in attritems:
        alines.append("{0} {1}".format(cython_ctype(atype), aname))
        cython_cimport_tuples(atype, cimport_tups)    
    d['attrs_block'] = indent(alines, 8)

    mblock = ""
    d['methods_block'] = mblock

    d['cimports'] = "\n".join(sorted(cython_cimports(cimport_tups)))
    cpppxd = _cpppxd_template.format(**d)
    return cpppxd
    
