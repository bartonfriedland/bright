################################################
#                 WARNING!                     #
# This file has been auto-generated by Bright. #
# Do not modify!!!                             #
#                                              #
#                                              #
#                    Come on, guys. I mean it! #
################################################
"""Python wrapper for fuel fabrication.
"""
cimport fccomp
cimport reactor1g
from bright cimport cpp_fccomp
from bright cimport cpp_reactor1g
from libcpp.map cimport map as cpp_map
from libcpp.set cimport set as cpp_set
from libcpp.string cimport string as std_string
from pyne cimport cpp_material
from pyne cimport material
from pyne cimport stlconverters as conv

from pyne import material
from pyne import stlconverters as conv
import fccomp
import reactor1g

cdef class FuelFabrication(fccomp.FCComp):
    """Fuel Fabrication Fuel Cycle Component Class.  Daughter of FCComp class.
    
    Parameters
    ----------
    mats : dict or map or None, optional 
        A dictionary whose keys are string labels (eg, "U-235", "TRU", "My Fuel") 
        and whose values are mass streams.  For example::
    
            materials = {
                "U235": Material({922350: 1.0}, 1.0, "U-235"),
                "U236": Material({922360: 1.0}, 1.0, "U-236"),
                "U238": Material({922380: 1.0}, 1.0, "U-238"),
                }
    
        would be valid for a light water reactor.
    mws_in : dict or map or None, optional 
        A dictionary whose keys are the same as for materials and whose values are the 
        associated weight (float) for that stream.  If a material should be allowed to 
        vary (ie optimized over), specify its weight as a negative number. For instance::
    
            mass_weights_in = {
                "U235": -1.0,
                "U236": 0.005,
                "U238": -1.0,
                }
    
        would be valid for a light water reactor with half a percent of U-236 always 
        present.
    r : Reactor1G or None, optional 
        An instance of a Reactor1G class to fabricate fuel for.
    paramtrack : list of str or None, optional 
        Additional parameters to track, if any.    
    n : str, optional 
        The name of the fuel fabrication fuel cycle component instance.
    
    """

    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults
        self._deltaRs = None
        self._mass_weights_in = None
        self._mass_weights_out = None
        self._materials = None
        self._reactor = None

    def _fuelfabrication_fuelfabrication_0(self, mats, mws_in, r, n=""):
        """"""
        cdef material._MapStrMaterial mats_proxy
        cdef conv._MapStrDouble mws_in_proxy
        cdef reactor1g.Reactor1G r_proxy
        mats_proxy = material.MapStrMaterial(mats, not isinstance(mats, material._MapStrMaterial))
        mws_in_proxy = conv.MapStrDouble(mws_in, not isinstance(mws_in, conv._MapStrDouble))
        r_proxy = <reactor1g.Reactor1G> r
        self._inst = new cpp_fuel_fabrication.FuelFabrication(mats_proxy.map_ptr[0], mws_in_proxy.map_ptr[0], (<cpp_reactor1g.Reactor1G *> r_proxy._inst)[0], std_string(<char *> n))
    
    
    def _fuelfabrication_fuelfabrication_1(self, mats, mws_in, r, paramtrack, n=""):
        """"""
        cdef material._MapStrMaterial mats_proxy
        cdef conv._MapStrDouble mws_in_proxy
        cdef reactor1g.Reactor1G r_proxy
        cdef conv._SetStr paramtrack_proxy
        mats_proxy = material.MapStrMaterial(mats, not isinstance(mats, material._MapStrMaterial))
        mws_in_proxy = conv.MapStrDouble(mws_in, not isinstance(mws_in, conv._MapStrDouble))
        r_proxy = <reactor1g.Reactor1G> r
        paramtrack_proxy = conv.SetStr(paramtrack, not isinstance(paramtrack, conv._SetStr))
        self._inst = new cpp_fuel_fabrication.FuelFabrication(mats_proxy.map_ptr[0], mws_in_proxy.map_ptr[0], (<cpp_reactor1g.Reactor1G *> r_proxy._inst)[0], paramtrack_proxy.set_ptr[0], std_string(<char *> n))
    
    
    def _fuelfabrication_fuelfabrication_2(self, n=""):
        """"""
        self._inst = new cpp_fuel_fabrication.FuelFabrication(std_string(<char *> n))
    
    
    def _fuelfabrication_fuelfabrication_3(self, paramtrack, n=""):
        """"""
        cdef conv._SetStr paramtrack_proxy
        paramtrack_proxy = conv.SetStr(paramtrack, not isinstance(paramtrack, conv._SetStr))
        self._inst = new cpp_fuel_fabrication.FuelFabrication(paramtrack_proxy.set_ptr[0], std_string(<char *> n))
    
    
    _fuelfabrication_fuelfabrication_0_argtypes = frozenset(((0, material.MapStrMaterial), (1, conv.MapStrDouble), (2, reactor1g.Reactor1G), (3, str), ("mats", material.MapStrMaterial), ("mws_in", conv.MapStrDouble), ("r", reactor1g.Reactor1G), ("n", str)))
    _fuelfabrication_fuelfabrication_1_argtypes = frozenset(((0, material.MapStrMaterial), (1, conv.MapStrDouble), (2, reactor1g.Reactor1G), (3, conv.SetStr), (4, str), ("mats", material.MapStrMaterial), ("mws_in", conv.MapStrDouble), ("r", reactor1g.Reactor1G), ("paramtrack", conv.SetStr), ("n", str)))
    _fuelfabrication_fuelfabrication_2_argtypes = frozenset(((0, str), ("n", str)))
    _fuelfabrication_fuelfabrication_3_argtypes = frozenset(((0, conv.SetStr), (1, str), ("paramtrack", conv.SetStr), ("n", str)))
    
    def __init__(self, *args, **kwargs):
        """"""
        types = set([(i, type(a)) for i, a in enumerate(args)])
        types.update([(k, type(v)) for k, v in kwargs.iteritems()])
        # vtable-like dispatch for exactly matching types
        if types <= self._fuelfabrication_fuelfabrication_2_argtypes:
            self._fuelfabrication_fuelfabrication_2(*args, **kwargs)
            return
        if types <= self._fuelfabrication_fuelfabrication_3_argtypes:
            self._fuelfabrication_fuelfabrication_3(*args, **kwargs)
            return
        if types <= self._fuelfabrication_fuelfabrication_0_argtypes:
            self._fuelfabrication_fuelfabrication_0(*args, **kwargs)
            return
        if types <= self._fuelfabrication_fuelfabrication_1_argtypes:
            self._fuelfabrication_fuelfabrication_1(*args, **kwargs)
            return
        # duck-typed dispatch based on whatever works!
        try:
            self._fuelfabrication_fuelfabrication_2(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            self._fuelfabrication_fuelfabrication_3(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            self._fuelfabrication_fuelfabrication_0(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            self._fuelfabrication_fuelfabrication_1(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        raise RuntimeError('method __init__() could not be dispatched')
    

    # attributes
    property deltaRs:
        """A mapping representing the deltaR values of each of the materials."""
        def __get__(self):
            cdef conv._MapStrDouble deltaRs_proxy
            if self._deltaRs is None:
                deltaRs_proxy = conv.MapStrDouble(False, False)
                deltaRs_proxy.map_ptr = &(<cpp_fuel_fabrication.FuelFabrication *> self._inst).deltaRs
                self._deltaRs = deltaRs_proxy
            return self._deltaRs
    
        def __set__(self, value):
            cdef conv._MapStrDouble value_proxy
            value_proxy = conv.MapStrDouble(value, not isinstance(value, conv._MapStrDouble))
            (<cpp_fuel_fabrication.FuelFabrication *> self._inst).deltaRs = value_proxy.map_ptr[0]
            self._deltaRs = None
    
    
    property mass_weights_in:
        """A mapping representing the initial specification of the mass weights.  
        Exactly two of these should have negative values."""
        def __get__(self):
            cdef conv._MapStrDouble mass_weights_in_proxy
            if self._mass_weights_in is None:
                mass_weights_in_proxy = conv.MapStrDouble(False, False)
                mass_weights_in_proxy.map_ptr = &(<cpp_fuel_fabrication.FuelFabrication *> self._inst).mass_weights_in
                self._mass_weights_in = mass_weights_in_proxy
            return self._mass_weights_in
    
        def __set__(self, value):
            cdef conv._MapStrDouble value_proxy
            value_proxy = conv.MapStrDouble(value, not isinstance(value, conv._MapStrDouble))
            (<cpp_fuel_fabrication.FuelFabrication *> self._inst).mass_weights_in = value_proxy.map_ptr[0]
            self._mass_weights_in = None
    
    
    property mass_weights_out:
        """A mapping representing the mass weights that are calculated to generate 
        a valid fuel from the materials  provided."""
        def __get__(self):
            cdef conv._MapStrDouble mass_weights_out_proxy
            if self._mass_weights_out is None:
                mass_weights_out_proxy = conv.MapStrDouble(False, False)
                mass_weights_out_proxy.map_ptr = &(<cpp_fuel_fabrication.FuelFabrication *> self._inst).mass_weights_out
                self._mass_weights_out = mass_weights_out_proxy
            return self._mass_weights_out
    
        def __set__(self, value):
            cdef conv._MapStrDouble value_proxy
            value_proxy = conv.MapStrDouble(value, not isinstance(value, conv._MapStrDouble))
            (<cpp_fuel_fabrication.FuelFabrication *> self._inst).mass_weights_out = value_proxy.map_ptr[0]
            self._mass_weights_out = None
    
    
    property materials:
        """A mapping of materials which are mixed to create a valid fuel form for reactor."""
        def __get__(self):
            cdef material._MapStrMaterial materials_proxy
            if self._materials is None:
                materials_proxy = material.MapStrMaterial(False, False)
                materials_proxy.map_ptr = &(<cpp_fuel_fabrication.FuelFabrication *> self._inst).materials
                self._materials = materials_proxy
            return self._materials
    
        def __set__(self, value):
            cdef material._MapStrMaterial value_proxy
            value_proxy = material.MapStrMaterial(value, not isinstance(value, material._MapStrMaterial))
            (<cpp_fuel_fabrication.FuelFabrication *> self._inst).materials = value_proxy.map_ptr[0]
            self._materials = None
    
    
    property reactor:
        """An instance of a Reactor1G class that the mat_prod is valid as a fuel for."""
        def __get__(self):
            cdef reactor1g.Reactor1G reactor_proxy
            if self._reactor is None:
                reactor_proxy = reactor1g.Reactor1G()
                reactor_proxy._free_inst = False
                reactor_proxy._inst = &(<cpp_fuel_fabrication.FuelFabrication *> self._inst).reactor
                self._reactor = reactor_proxy
            return self._reactor
    
        def __set__(self, value):
            cdef reactor1g.Reactor1G value_proxy
            value_proxy = <reactor1g.Reactor1G> value
            (<cpp_fuel_fabrication.FuelFabrication *> self._inst).reactor = (<cpp_reactor1g.Reactor1G *> value_proxy._inst)[0]
            self._reactor = None
    
    
    # methods
    def _fuelfabrication_calc_0(self):
        """This method performs an optimization calculation on all input materials to 
        determine the mass ratios that generate the correct fuel form for the reactor.
        It then compiles the fuel and returns the resultant material. 
        
        Parameters
        ----------
        mats : dict or None, optional
            A dictionary whose keys are string labels and whose values are materials.  
        mws_in : dict or None, optional
            A dictionary whose keys are the same as for materials and whose values are 
            the associated weight (float) for that material.
        r : Reactor1G or None, optional 
            An instance of a Reactor1G class to fabricate fuel for.
        
        Returns
        -------
        core_input : Material 
            mat_prod
        
        """
        cdef cpp_material.Material rtnval
        cdef material._Material rtnval_proxy
        rtnval = (<cpp_fccomp.FCComp *> self._inst).calc()
        rtnval_proxy = material.Material()
        rtnval_proxy.mat_pointer[0] = rtnval
        return rtnval_proxy
    
    
    def _fuelfabrication_calc_1(self, mats, mws_in, r):
        """This method performs an optimization calculation on all input materials to 
        determine the mass ratios that generate the correct fuel form for the reactor.
        It then compiles the fuel and returns the resultant material. 
        
        Parameters
        ----------
        mats : dict or None, optional
            A dictionary whose keys are string labels and whose values are materials.  
        mws_in : dict or None, optional
            A dictionary whose keys are the same as for materials and whose values are 
            the associated weight (float) for that material.
        r : Reactor1G or None, optional 
            An instance of a Reactor1G class to fabricate fuel for.
        
        Returns
        -------
        core_input : Material 
            mat_prod
        
        """
        cdef material._MapStrMaterial mats_proxy
        cdef conv._MapStrDouble mws_in_proxy
        cdef reactor1g.Reactor1G r_proxy
        cdef cpp_material.Material rtnval
        cdef material._Material rtnval_proxy
        mats_proxy = material.MapStrMaterial(mats, not isinstance(mats, material._MapStrMaterial))
        mws_in_proxy = conv.MapStrDouble(mws_in, not isinstance(mws_in, conv._MapStrDouble))
        r_proxy = <reactor1g.Reactor1G> r
        rtnval = (<cpp_fuel_fabrication.FuelFabrication *> self._inst).calc(mats_proxy.map_ptr[0], mws_in_proxy.map_ptr[0], (<cpp_reactor1g.Reactor1G *> r_proxy._inst)[0])
        rtnval_proxy = material.Material()
        rtnval_proxy.mat_pointer[0] = rtnval
        return rtnval_proxy
    
    
    _fuelfabrication_calc_0_argtypes = frozenset()
    _fuelfabrication_calc_1_argtypes = frozenset(((0, material.MapStrMaterial), (1, conv.MapStrDouble), (2, reactor1g.Reactor1G), ("mats", material.MapStrMaterial), ("mws_in", conv.MapStrDouble), ("r", reactor1g.Reactor1G)))
    
    def calc(self, *args, **kwargs):
        """This method performs an optimization calculation on all input materials to 
        determine the mass ratios that generate the correct fuel form for the reactor.
        It then compiles the fuel and returns the resultant material. 
        
        Parameters
        ----------
        mats : dict or None, optional
            A dictionary whose keys are string labels and whose values are materials.  
        mws_in : dict or None, optional
            A dictionary whose keys are the same as for materials and whose values are 
            the associated weight (float) for that material.
        r : Reactor1G or None, optional 
            An instance of a Reactor1G class to fabricate fuel for.
        
        Returns
        -------
        core_input : Material 
            mat_prod
        
        """
        types = set([(i, type(a)) for i, a in enumerate(args)])
        types.update([(k, type(v)) for k, v in kwargs.iteritems()])
        # vtable-like dispatch for exactly matching types
        if types <= self._fuelfabrication_calc_0_argtypes:
            return self._fuelfabrication_calc_0(*args, **kwargs)
        if types <= self._fuelfabrication_calc_1_argtypes:
            return self._fuelfabrication_calc_1(*args, **kwargs)
        # duck-typed dispatch based on whatever works!
        try:
            return self._fuelfabrication_calc_0(*args, **kwargs)
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            return self._fuelfabrication_calc_1(*args, **kwargs)
        except (RuntimeError, TypeError, NameError):
            pass
        raise RuntimeError('method calc() could not be dispatched')
    
    def calc_core_input(self):
        """Computes the core input material that becomes mat_prod based on materials and 
        mass_weights_out.
        
        Returns
        -------
        core_input : Material 
            mat_prod.
        """
        cdef cpp_material.Material rtnval
        cdef material._Material rtnval_proxy
        rtnval = (<cpp_fuel_fabrication.FuelFabrication *> self._inst).calc_core_input()
        rtnval_proxy = material.Material()
        rtnval_proxy.mat_pointer[0] = rtnval
        return rtnval_proxy
    
    
    def calc_deltaRs(self):
        """Computes deltaRs for each mass stream."""
        (<cpp_fuel_fabrication.FuelFabrication *> self._inst).calc_deltaRs()
    
    
    def calc_mass_ratios(self):
        """Calculates mass_weights_out by varying the values of the two parameter which had 
        negative values in mass_weights_in.  Therefore, this is the portion of the code that 
        performs the optimization calculation.
        """
        (<cpp_fuel_fabrication.FuelFabrication *> self._inst).calc_mass_ratios()
    
    
    def calc_params(self):
        """Here the parameters for FuelFabrication are set.  For example::
        
            self.params_prior_calc["Weight_U235"] = self.mass_weights_in["U235"]
            self.params_after_calc["Weight_U235"] = self.mass_weights_out["U235"]
        
            self.params_prior_calc["deltaR_U235"] = self.deltaRs["U235"]
            self.params_after_calc["deltaR_U235"] = self.deltaRs["U235"]
        
            self.params_prior_calc["Weight_U238"] = self.mass_weights_in["U238"]
            self.params_after_calc["Weight_U238"] = self.mass_weights_out["U238"]
        
            self.params_prior_calc["deltaR_U238"] = self.deltaRs["U238"]
            self.params_after_calc["deltaR_U238"] = self.deltaRs["U238"]
        
        """
        (<cpp_fccomp.FCComp *> self._inst).calc_params()
    
    
    def initialize(self, mats, mws_in, r):
        """The initialize() method takes the appropriate materials, input mass weights,
        and a reactor and resets the current FuelFabrication instance.
        
        Parameters
        ----------
        mats : dict
            A dictionary whose keys are string labels and whose values are mass streams.  
        mws_in : dict 
            A dictionary whose keys are the same as for materials and whose values are the 
            associated weight (float) for that stream.
        r : Reactor1G 
            An instance of a Reactor1G class to fabricate fuel for.
        
        """
        cdef material._MapStrMaterial mats_proxy
        cdef conv._MapStrDouble mws_in_proxy
        cdef reactor1g.Reactor1G r_proxy
        mats_proxy = material.MapStrMaterial(mats, not isinstance(mats, material._MapStrMaterial))
        mws_in_proxy = conv.MapStrDouble(mws_in, not isinstance(mws_in, conv._MapStrDouble))
        r_proxy = <reactor1g.Reactor1G> r
        (<cpp_fuel_fabrication.FuelFabrication *> self._inst).initialize(mats_proxy.map_ptr[0], mws_in_proxy.map_ptr[0], (<cpp_reactor1g.Reactor1G *> r_proxy._inst)[0])
    
    


