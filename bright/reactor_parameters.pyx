################################################
#                 WARNING!                     #
# This file has been auto-generated by Bright. #
# Do not modify!!!                             #
#                                              #
#                                              #
#                    Come on, guys. I mean it! #
################################################
"""no docstring for reactorparameters, please file a bug report!
"""
cimport numpy as np
from libc.stdlib cimport free
from libcpp.map cimport map as cpp_map
from libcpp.string cimport string as std_string
from libcpp.vector cimport vector as cpp_vector
from pyne cimport stlconverters as conv

from pyne import stlconverters as conv
import numpy as np

np.import_array()

cdef class ReactorParameters:
    """no docstring for ReactorParameters, please file a bug report!"""

    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults
        self._burn_times = None
        self._cladding_form = None
        self._coolant_form = None
        self._fuel_form = None

    def __init__(self):
        """"""
        self._inst = new cpp_reactor_parameters.ReactorParameters()
    
    
    def __dealloc__(self):
        if self._free_inst:
            free(self._inst)

    # attributes
    property BUt:
        """no docstring for BUt, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).BUt)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).BUt = <double> value
    
    
    property batches:
        """no docstring for batches, please file a bug report!"""
        def __get__(self):
            return int((<cpp_reactor_parameters.ReactorParameters *> self._inst).batches)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).batches = value
    
    
    property branch_ratio_cutoff:
        """no docstring for branch_ratio_cutoff, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).branch_ratio_cutoff)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).branch_ratio_cutoff = <double> value
    
    
    property burn_regions:
        """no docstring for burn_regions, please file a bug report!"""
        def __get__(self):
            return int((<cpp_reactor_parameters.ReactorParameters *> self._inst).burn_regions)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).burn_regions = value
    
    
    property burn_times:
        """no docstring for burn_times, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray burn_times_proxy
            cdef np.npy_intp burn_times_proxy_shape[1]
            if self._burn_times is None:
                burn_times_proxy_shape[0] = <np.npy_intp> (<cpp_reactor_parameters.ReactorParameters *> self._inst).burn_times.size()
                burn_times_proxy = np.PyArray_SimpleNewFromData(1, burn_times_proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor_parameters.ReactorParameters *> self._inst).burn_times[0])
                self._burn_times = burn_times_proxy
            return self._burn_times
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size = len(value)
            cdef double * value_data
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).burn_times = value_proxy
            self._burn_times = None
    
    
    property burnup_via_constant:
        """no docstring for burnup_via_constant, please file a bug report!"""
        def __get__(self):
            return str(<char *> (<cpp_reactor_parameters.ReactorParameters *> self._inst).burnup_via_constant.c_str())
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).burnup_via_constant = std_string(<char *> value)
    
    
    property clad_radius:
        """no docstring for clad_radius, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).clad_radius)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).clad_radius = <double> value
    
    
    property cladding_density:
        """no docstring for cladding_density, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).cladding_density)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).cladding_density = <double> value
    
    
    property cladding_form:
        """no docstring for cladding_form, please file a bug report!"""
        def __get__(self):
            cdef conv._MapStrDouble cladding_form_proxy
            if self._cladding_form is None:
                cladding_form_proxy = conv.MapStrDouble(False, False)
                cladding_form_proxy.map_ptr = &(<cpp_reactor_parameters.ReactorParameters *> self._inst).cladding_form
                self._cladding_form = cladding_form_proxy
            return self._cladding_form
    
        def __set__(self, value):
            cdef conv._MapStrDouble value_proxy
            value_proxy = conv.MapStrDouble(value, not isinstance(value, conv._MapStrDouble))
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).cladding_form = value_proxy.map_ptr[0]
            self._cladding_form = None
    
    
    property coolant_density:
        """no docstring for coolant_density, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).coolant_density)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).coolant_density = <double> value
    
    
    property coolant_form:
        """no docstring for coolant_form, please file a bug report!"""
        def __get__(self):
            cdef conv._MapStrDouble coolant_form_proxy
            if self._coolant_form is None:
                coolant_form_proxy = conv.MapStrDouble(False, False)
                coolant_form_proxy.map_ptr = &(<cpp_reactor_parameters.ReactorParameters *> self._inst).coolant_form
                self._coolant_form = coolant_form_proxy
            return self._coolant_form
    
        def __set__(self, value):
            cdef conv._MapStrDouble value_proxy
            value_proxy = conv.MapStrDouble(value, not isinstance(value, conv._MapStrDouble))
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).coolant_form = value_proxy.map_ptr[0]
            self._coolant_form = None
    
    
    property flux:
        """no docstring for flux, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).flux)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).flux = <double> value
    
    
    property fuel_density:
        """no docstring for fuel_density, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).fuel_density)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).fuel_density = <double> value
    
    
    property fuel_form:
        """no docstring for fuel_form, please file a bug report!"""
        def __get__(self):
            cdef conv._MapStrDouble fuel_form_proxy
            if self._fuel_form is None:
                fuel_form_proxy = conv.MapStrDouble(False, False)
                fuel_form_proxy.map_ptr = &(<cpp_reactor_parameters.ReactorParameters *> self._inst).fuel_form
                self._fuel_form = fuel_form_proxy
            return self._fuel_form
    
        def __set__(self, value):
            cdef conv._MapStrDouble value_proxy
            value_proxy = conv.MapStrDouble(value, not isinstance(value, conv._MapStrDouble))
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).fuel_form = value_proxy.map_ptr[0]
            self._fuel_form = None
    
    
    property fuel_radius:
        """no docstring for fuel_radius, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).fuel_radius)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).fuel_radius = <double> value
    
    
    property lattice_type:
        """no docstring for lattice_type, please file a bug report!"""
        def __get__(self):
            return str(<char *> (<cpp_reactor_parameters.ReactorParameters *> self._inst).lattice_type.c_str())
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).lattice_type = std_string(<char *> value)
    
    
    property open_slots:
        """no docstring for open_slots, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).open_slots)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).open_slots = <double> value
    
    
    property pnl:
        """no docstring for pnl, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).pnl)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).pnl = <double> value
    
    
    property rescale_hydrogen:
        """no docstring for rescale_hydrogen, please file a bug report!"""
        def __get__(self):
            return bool((<cpp_reactor_parameters.ReactorParameters *> self._inst).rescale_hydrogen)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).rescale_hydrogen = <bint> value
    
    
    property specific_power:
        """no docstring for specific_power, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).specific_power)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).specific_power = <double> value
    
    
    property total_slots:
        """no docstring for total_slots, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).total_slots)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).total_slots = <double> value
    
    
    property unit_cell_pitch:
        """no docstring for unit_cell_pitch, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).unit_cell_pitch)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).unit_cell_pitch = <double> value
    
    
    property use_disadvantage_factor:
        """no docstring for use_disadvantage_factor, please file a bug report!"""
        def __get__(self):
            return bool((<cpp_reactor_parameters.ReactorParameters *> self._inst).use_disadvantage_factor)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).use_disadvantage_factor = <bint> value
    
    
    property void_radius:
        """no docstring for void_radius, please file a bug report!"""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).void_radius)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).void_radius = <double> value
    
    
    # methods



