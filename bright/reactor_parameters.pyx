################################################
#                 WARNING!                     #
# This file has been auto-generated by Bright. #
# Do not modify!!!                             #
#                                              #
#                                              #
#                    Come on, guys. I mean it! #
################################################
"""Python wrapper for reactor parameters.
"""
cimport numpy as np
cimport pyne.stlcontainers
from libc.stdlib cimport free
from libcpp.map cimport map as cpp_map
from libcpp.string cimport string as std_string
from libcpp.vector cimport vector as cpp_vector

import numpy as np
import pyne.stlcontainers

np.import_array()

cdef class ReactorParameters:
    """This data structure is a set of physical reactor parameters. It may 
    be used to instantiate new reactor objects **OR** to define default 
    settings for a reactor type. The data stored in this class is copied 
    over to a reactor instance in the initialize() method.  However, the 
    attributes of this objects take on more natural names than their reactor 
    attribute analogies.  This is because it is this object that Bright users 
    will more often be interacting with. 
    """

    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults
        self._burn_times = None
        self._cladding_form = None
        self._coolant_form = None
        self._fuel_form = None

    def __init__(self):
        """ReactorParameters(self)
        """
        self._inst = new cpp_reactor_parameters.ReactorParameters()
    
    
    def __dealloc__(self):
        if self._free_inst:
            free(self._inst)

    # attributes
    property BUt:
        """The reactor's target discharge burnup (float).  This is given 
        in units of [MWd/kgIHM].  Often the actual discharge burnup BUd does not 
        quite hit this value, but comes acceptably close."""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).BUt)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).BUt = <double> value
    
    
    property batches:
        """This is the total number of batches (int) in the fuel management scheme. 
        This is typically indexed by b."""
        def __get__(self):
            return int((<cpp_reactor_parameters.ReactorParameters *> self._inst).batches)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).batches = value
    
    
    property branch_ratio_cutoff:
        """The cutoff value (float) below which the bateman equations are not solved."""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).branch_ratio_cutoff)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).branch_ratio_cutoff = <double> value
    
    
    property burn_regions:
        """Number of annular burn regions (int)."""
        def __get__(self):
            return int((<cpp_reactor_parameters.ReactorParameters *> self._inst).burn_regions)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).burn_regions = value
    
    
    property burn_times:
        """A non-negative, monotonically increasing numpy float array (C++ vector<double>) 
        of burnup times [days]."""
        def __get__(self):
            cdef np.ndarray burn_times_proxy
            cdef np.npy_intp burn_times_proxy_shape[1]
            if self._burn_times is None:
                burn_times_proxy_shape[0] = <np.npy_intp> (<cpp_reactor_parameters.ReactorParameters *> self._inst).burn_times.size()
                burn_times_proxy = np.PyArray_SimpleNewFromData(1, burn_times_proxy_shape, np.NPY_FLOAT64, &(<cpp_reactor_parameters.ReactorParameters *> self._inst).burn_times[0])
                self._burn_times = burn_times_proxy
            return self._burn_times
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int i
            cdef int value_size
            cdef double * value_data
            value_size = len(value)
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = value_data[i]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for i in range(value_size):
                    value_proxy[i] = <double> value[i]
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).burn_times = value_proxy
            self._burn_times = None
    
    
    property burnup_via_constant:
        """Flag (str) for constant "flux" or "power" calculations."""
        def __get__(self):
            return str(<char *> (<cpp_reactor_parameters.ReactorParameters *> self._inst).burnup_via_constant.c_str())
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).burnup_via_constant = std_string(<char *> value)
    
    
    property clad_radius:
        """The radius (float) of the cladding region [cm]."""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).clad_radius)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).clad_radius = <double> value
    
    
    property cladding_density:
        """The cladding region density.  A float in units of [g/cm^3]."""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).cladding_density)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).cladding_density = <double> value
    
    
    property cladding_form:
        """This is the chemical form of cladding as a dictionary or other mapping.  
        This uses the same notation as fuel_form except that "IHM" is no longer 
        a valid key.  Cladding is often made from some zircalloy.
        """
        def __get__(self):
            cdef pyne.stlcontainers._MapStrDouble cladding_form_proxy
            if self._cladding_form is None:
                cladding_form_proxy = pyne.stlcontainers.MapStrDouble(False, False)
                cladding_form_proxy.map_ptr = &(<cpp_reactor_parameters.ReactorParameters *> self._inst).cladding_form
                self._cladding_form = cladding_form_proxy
            return self._cladding_form
    
        def __set__(self, value):
            cdef pyne.stlcontainers._MapStrDouble value_proxy
            value_proxy = pyne.stlcontainers.MapStrDouble(value, not isinstance(value, pyne.stlcontainers._MapStrDouble))
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).cladding_form = value_proxy.map_ptr[0]
            self._cladding_form = None
    
    
    property coolant_density:
        """The coolant region density.  A float in units of [g/cm^3]."""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).coolant_density)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).coolant_density = <double> value
    
    
    property coolant_form:
        """This is the chemical form of coolant as a dictionary or other mapping.  
        This uses the same notation as fuel_form except that "IHM" is no longer 
        a valid key.  The term 'coolant' is used in preference over the term 
        'moderator' because not all reactors moderate neutrons.  For example, 
        LWRs often cool the reactor core with borated water::
        
            ReactorParamters.coolant_form = {}
            ReactorParamters.coolant_form["H1"]  = 2.0
            ReactorParamters.coolant_form["O16"] = 1.0
            ReactorParamters.coolant_form["B10"] = 0.199 * 550 * 10.0**-6
            ReactorParamters.coolant_form["B11"] = 0.801 * 550 * 10.0**-6
        
        """
        def __get__(self):
            cdef pyne.stlcontainers._MapStrDouble coolant_form_proxy
            if self._coolant_form is None:
                coolant_form_proxy = pyne.stlcontainers.MapStrDouble(False, False)
                coolant_form_proxy.map_ptr = &(<cpp_reactor_parameters.ReactorParameters *> self._inst).coolant_form
                self._coolant_form = coolant_form_proxy
            return self._coolant_form
    
        def __set__(self, value):
            cdef pyne.stlcontainers._MapStrDouble value_proxy
            value_proxy = pyne.stlcontainers.MapStrDouble(value, not isinstance(value, pyne.stlcontainers._MapStrDouble))
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).coolant_form = value_proxy.map_ptr[0]
            self._coolant_form = None
    
    
    property flux:
        """The nominal flux value (float) that the library for this reactor type was 
        generated with.   Often used to correctly weight batch-specific fluxes."""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).flux)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).flux = <double> value
    
    
    property fuel_density:
        """The fuel region density.  A float in units of [g/cm^3]."""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).fuel_density)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).fuel_density = <double> value
    
    
    property fuel_form:
        """This is the chemical form of fuel as a dictionary or other mapping.  Keys are 
        often strings that represent isotopes while values represent the corresponding 
        mass weights.  The heavy metal concentration by the key "IHM".  
        This will automatically fill in the nuclides in mat_feed for the "IHM" weight.  
        For example, LWRs typically use a UOX fuel form::
        
            ReactorParameters.fuel_form = {"IHM": 1.0, "O16": 2.0}
        
        """
        def __get__(self):
            cdef pyne.stlcontainers._MapStrDouble fuel_form_proxy
            if self._fuel_form is None:
                fuel_form_proxy = pyne.stlcontainers.MapStrDouble(False, False)
                fuel_form_proxy.map_ptr = &(<cpp_reactor_parameters.ReactorParameters *> self._inst).fuel_form
                self._fuel_form = fuel_form_proxy
            return self._fuel_form
    
        def __set__(self, value):
            cdef pyne.stlcontainers._MapStrDouble value_proxy
            value_proxy = pyne.stlcontainers.MapStrDouble(value, not isinstance(value, pyne.stlcontainers._MapStrDouble))
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).fuel_form = value_proxy.map_ptr[0]
            self._fuel_form = None
    
    
    property fuel_radius:
        """The radius (float) of the fuel region [cm]."""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).fuel_radius)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).fuel_radius = <double> value
    
    
    property lattice_type:
        """Flag (str) that represents what lattice type the fuel assemblies are arranged in.  
        Currently accepted values are "Planar", "Spherical", and "Cylindrical"."""
        def __get__(self):
            return str(<char *> (<cpp_reactor_parameters.ReactorParameters *> self._inst).lattice_type.c_str())
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).lattice_type = std_string(<char *> value)
    
    
    property open_slots:
        """The number of slots (float) in a fuel assembly that are open.  Thus this is the 
        number of slots that do not contain a fuel pin and are instead filled in by coolant.
        """
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).open_slots)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).open_slots = <double> value
    
    
    property pnl:
        """The reactor's non-leakage probability (float).  This is often used as a 
        calibration parameter."""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).pnl)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).pnl = <double> value
    
    
    property rescale_hydrogen:
        """Boolean to determine whether the reactor should rescale the Hydrogen-1 destruction 
        rate in the coolant as a function of fluence.  The scaling factor is calculated via 
        the following equation
        
            .. math:: f(F) = 1.36927 - 0.01119 \cdot BU(F)
        
        This is typically not done for fast reactors but is a useful correction for LWRs.
        """
        def __get__(self):
            return bool((<cpp_reactor_parameters.ReactorParameters *> self._inst).rescale_hydrogen)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).rescale_hydrogen = <bint> value
    
    
    property specific_power:
        """The specific power of the fuel (float) in units of [MW/kgIHM]"""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).specific_power)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).specific_power = <double> value
    
    
    property total_slots:
        """The total number of fuel pin slots (float) in a fuel assembly.  
        For a 17x17 bundle this is 289.0.
        """
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).total_slots)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).total_slots = <double> value
    
    
    property unit_cell_pitch:
        """The pitch or length (float) of the unit fuel pin cell [cm]."""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).unit_cell_pitch)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).unit_cell_pitch = <double> value
    
    
    property use_disadvantage_factor:
        """Boolaean to determine whether the thermal disadvantage factor is employed or not.  
        LWRs typically set this as True while FRs have a False value."""
        def __get__(self):
            return bool((<cpp_reactor_parameters.ReactorParameters *> self._inst).use_disadvantage_factor)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).use_disadvantage_factor = <bint> value
    
    
    property void_radius:
        """The radius (float) of the void region [cm]."""
        def __get__(self):
            return float((<cpp_reactor_parameters.ReactorParameters *> self._inst).void_radius)
    
        def __set__(self, value):
            (<cpp_reactor_parameters.ReactorParameters *> self._inst).void_radius = <double> value
    
    
    # methods


def lwr_defaults():
    """This function returns a copy of the LWR default presets. These are applicable to most cases.
    However, if you want to use your own LWR parameters, it is recommended you use this function
    and then only change the necessary attributes.  

    Returns
    -------
    lwrd : ReactorParameters 
        Light water reactor default parameters.

    Warnings
    --------
    Note that the target burnup default value is zero.  Generally, at least this value should be overridden.
    """
    cdef cpp_reactor_parameters.ReactorParameters cpp_lwrd = cpp_reactor_parameters.fill_lwr_defaults()
    cdef ReactorParameters lwrd = ReactorParameters()
    (<cpp_reactor_parameters.ReactorParameters *> lwrd._inst)[0] = cpp_lwrd
    return lwrd



def fr_defaults():
    """This function returns a copy of the FR default presets. These are applicable to most cases.
    However, if you want to use your own FR parameters, it is recommended you use this function
    and then only change the necessary attributes.  

    Returns
    -------
    frd : ReactorParameters 
        Fast reactor default parameters.

    Warnings
    --------
    Note that the target burnup default value is zero.  Generally, at least this value should be overridden.
    """
    cdef cpp_reactor_parameters.ReactorParameters cpp_frd = cpp_reactor_parameters.fill_fr_defaults()
    cdef ReactorParameters frd = ReactorParameters()
    (<cpp_reactor_parameters.ReactorParameters *> frd._inst)[0] = cpp_frd
    return frd


