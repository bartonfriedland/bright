################################################
#                 WARNING!                     #
# This file has been auto-generated by Bright. #
# Do not modify!!!                             #
#                                              #
#                                              #
#                    Come on, guys. I mean it! #
################################################
"""no docstring for enrichment, please file a bug report!
"""
cimport enrichment_parameters
cimport fccomp
from bright cimport cpp_enrichment_parameters
from bright cimport cpp_fccomp
from libcpp.map cimport map as cpp_map
from libcpp.string cimport string as std_string
from pyne cimport cpp_material
from pyne cimport material
from pyne cimport stlconverters as conv

from pyne import material
from pyne import stlconverters as conv
import enrichment_parameters
import fccomp

cdef class Enrichment(fccomp.FCComp):
    """no docstring for Enrichment, please file a bug report!"""

    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults
        self._mat_tail = None

    def _enrichment_enrichment_0(self):
        """"""
        self._inst = new cpp_enrichment.Enrichment()
    
    
    def _enrichment_enrichment_1(self, ep, n=""):
        """"""
        cdef enrichment_parameters.EnrichmentParameters ep_proxy
        ep_proxy = <enrichment_parameters.EnrichmentParameters> ep
        self._inst = new cpp_enrichment.Enrichment((<cpp_enrichment_parameters.EnrichmentParameters *> ep_proxy._inst)[0], std_string(<char *> n))
    
    
    def _enrichment_enrichment_2(self, n):
        """"""
        self._inst = new cpp_enrichment.Enrichment(std_string(<char *> n))
    
    
    _enrichment_enrichment_0_argtypes = frozenset()
    _enrichment_enrichment_1_argtypes = frozenset(((0, None), (1, str), ("ep", None), ("n", str)))
    _enrichment_enrichment_2_argtypes = frozenset(((0, str), ("n", str)))
    
    def __init__(self, *args, **kwargs):
        """"""
        types = set([(i, type(a)) for i, a in enumerate(args)])
        types.update([(k, type(v)) for k, v in kwargs.iteritems()])
        # vtable-like dispatch for exactly matching types
        if types <= self._enrichment_enrichment_0_argtypes:
            self._enrichment_enrichment_0(*args, **kwargs)
            return
        if types <= self._enrichment_enrichment_1_argtypes:
            self._enrichment_enrichment_1(*args, **kwargs)
            return
        if types <= self._enrichment_enrichment_2_argtypes:
            self._enrichment_enrichment_2(*args, **kwargs)
            return
        # duck-typed dispatch based on whatever works!
        try:
            self._enrichment_enrichment_0(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            self._enrichment_enrichment_1(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            self._enrichment_enrichment_2(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        raise RuntimeError('method __init__() could not be dispatched')
    

    # attributes
    property M:
        """no docstring for M, please file a bug report!"""
        def __get__(self):
            return float((<cpp_enrichment.Enrichment *> self._inst).M)
    
        def __set__(self, value):
            (<cpp_enrichment.Enrichment *> self._inst).M = <double> value
    
    
    property M0:
        """no docstring for M0, please file a bug report!"""
        def __get__(self):
            return float((<cpp_enrichment.Enrichment *> self._inst).M0)
    
        def __set__(self, value):
            (<cpp_enrichment.Enrichment *> self._inst).M0 = <double> value
    
    
    property Mstar:
        """no docstring for Mstar, please file a bug report!"""
        def __get__(self):
            return float((<cpp_enrichment.Enrichment *> self._inst).Mstar)
    
        def __set__(self, value):
            (<cpp_enrichment.Enrichment *> self._inst).Mstar = <double> value
    
    
    property Mstar_0:
        """no docstring for Mstar_0, please file a bug report!"""
        def __get__(self):
            return float((<cpp_enrichment.Enrichment *> self._inst).Mstar_0)
    
        def __set__(self, value):
            (<cpp_enrichment.Enrichment *> self._inst).Mstar_0 = <double> value
    
    
    property N:
        """no docstring for N, please file a bug report!"""
        def __get__(self):
            return float((<cpp_enrichment.Enrichment *> self._inst).N)
    
        def __set__(self, value):
            (<cpp_enrichment.Enrichment *> self._inst).N = <double> value
    
    
    property N0:
        """no docstring for N0, please file a bug report!"""
        def __get__(self):
            return float((<cpp_enrichment.Enrichment *> self._inst).N0)
    
        def __set__(self, value):
            (<cpp_enrichment.Enrichment *> self._inst).N0 = <double> value
    
    
    property SWUperFeed:
        """no docstring for SWUperFeed, please file a bug report!"""
        def __get__(self):
            return float((<cpp_enrichment.Enrichment *> self._inst).SWUperFeed)
    
        def __set__(self, value):
            (<cpp_enrichment.Enrichment *> self._inst).SWUperFeed = <double> value
    
    
    property SWUperProduct:
        """no docstring for SWUperProduct, please file a bug report!"""
        def __get__(self):
            return float((<cpp_enrichment.Enrichment *> self._inst).SWUperProduct)
    
        def __set__(self, value):
            (<cpp_enrichment.Enrichment *> self._inst).SWUperProduct = <double> value
    
    
    property TotalPerFeed:
        """no docstring for TotalPerFeed, please file a bug report!"""
        def __get__(self):
            return float((<cpp_enrichment.Enrichment *> self._inst).TotalPerFeed)
    
        def __set__(self, value):
            (<cpp_enrichment.Enrichment *> self._inst).TotalPerFeed = <double> value
    
    
    property alpha_0:
        """no docstring for alpha_0, please file a bug report!"""
        def __get__(self):
            return float((<cpp_enrichment.Enrichment *> self._inst).alpha_0)
    
        def __set__(self, value):
            (<cpp_enrichment.Enrichment *> self._inst).alpha_0 = <double> value
    
    
    property j:
        """no docstring for j, please file a bug report!"""
        def __get__(self):
            return int((<cpp_enrichment.Enrichment *> self._inst).j)
    
        def __set__(self, value):
            (<cpp_enrichment.Enrichment *> self._inst).j = value
    
    
    property k:
        """no docstring for k, please file a bug report!"""
        def __get__(self):
            return int((<cpp_enrichment.Enrichment *> self._inst).k)
    
        def __set__(self, value):
            (<cpp_enrichment.Enrichment *> self._inst).k = value
    
    
    property mat_tail:
        """no docstring for mat_tail, please file a bug report!"""
        def __get__(self):
            cdef material._Material mat_tail_proxy
            if self._mat_tail is None:
                mat_tail_proxy = material.Material(free_mat=False)
                mat_tail_proxy.mat_pointer = &(<cpp_enrichment.Enrichment *> self._inst).mat_tail
                self._mat_tail = mat_tail_proxy
            return self._mat_tail
    
        def __set__(self, value):
            cdef material._Material value_proxy
            value_proxy = material.Material(value, free_mat=not isinstance(value, material._Material))
            (<cpp_enrichment.Enrichment *> self._inst).mat_tail = value_proxy.mat_pointer[0]
            self._mat_tail = None
    
    
    property xP_j:
        """no docstring for xP_j, please file a bug report!"""
        def __get__(self):
            return float((<cpp_enrichment.Enrichment *> self._inst).xP_j)
    
        def __set__(self, value):
            (<cpp_enrichment.Enrichment *> self._inst).xP_j = <double> value
    
    
    property xW_j:
        """no docstring for xW_j, please file a bug report!"""
        def __get__(self):
            return float((<cpp_enrichment.Enrichment *> self._inst).xW_j)
    
        def __set__(self, value):
            (<cpp_enrichment.Enrichment *> self._inst).xW_j = <double> value
    
    
    # methods
    def Comp2UnityOther(self):
        """no docstring for Comp2UnityOther, please file a bug report!"""
        (<cpp_enrichment.Enrichment *> self._inst).Comp2UnityOther()
    
    
    def Comp2UnitySecant(self):
        """no docstring for Comp2UnitySecant, please file a bug report!"""
        (<cpp_enrichment.Enrichment *> self._inst).Comp2UnitySecant()
    
    
    def FindNM(self):
        """no docstring for FindNM, please file a bug report!"""
        (<cpp_enrichment.Enrichment *> self._inst).FindNM()
    
    
    def LoverF(self):
        """no docstring for LoverF, please file a bug report!"""
        (<cpp_enrichment.Enrichment *> self._inst).LoverF()
    
    
    def MstarOptimize(self):
        """no docstring for MstarOptimize, please file a bug report!"""
        (<cpp_enrichment.Enrichment *> self._inst).MstarOptimize()
    
    
    def PoverF(self, x_F, x_P, x_W):
        """no docstring for PoverF, please file a bug report!"""
        cdef double rtnval
        rtnval = (<cpp_enrichment.Enrichment *> self._inst).PoverF(<double> x_F, <double> x_P, <double> x_W)
        return float(rtnval)
    
    
    def SolveNM(self):
        """no docstring for SolveNM, please file a bug report!"""
        (<cpp_enrichment.Enrichment *> self._inst).SolveNM()
    
    
    def WoverF(self, x_F, x_P, x_W):
        """no docstring for WoverF, please file a bug report!"""
        cdef double rtnval
        rtnval = (<cpp_enrichment.Enrichment *> self._inst).WoverF(<double> x_F, <double> x_P, <double> x_W)
        return float(rtnval)
    
    
    def _enrichment_calc_0(self):
        """no docstring for calc, please file a bug report!"""
        cdef cpp_material.Material rtnval
        cdef material._Material rtnval_proxy
        rtnval = (<cpp_fccomp.FCComp *> self._inst).calc()
        rtnval_proxy = material.Material()
        rtnval_proxy.mat_pointer[0] = rtnval
        return rtnval_proxy
    
    
    def _enrichment_calc_1(self, incomp):
        """no docstring for calc, please file a bug report!"""
        cdef conv._MapIntDouble incomp_proxy
        cdef cpp_material.Material rtnval
        cdef material._Material rtnval_proxy
        incomp_proxy = conv.MapIntDouble(incomp, not isinstance(incomp, conv._MapIntDouble))
        rtnval = (<cpp_fccomp.FCComp *> self._inst).calc(incomp_proxy.map_ptr[0])
        rtnval_proxy = material.Material()
        rtnval_proxy.mat_pointer[0] = rtnval
        return rtnval_proxy
    
    
    def _enrichment_calc_2(self, mat):
        """no docstring for calc, please file a bug report!"""
        cdef material._Material mat_proxy
        cdef cpp_material.Material rtnval
        cdef material._Material rtnval_proxy
        mat_proxy = material.Material(mat, free_mat=not isinstance(mat, material._Material))
        rtnval = (<cpp_fccomp.FCComp *> self._inst).calc(mat_proxy.mat_pointer[0])
        rtnval_proxy = material.Material()
        rtnval_proxy.mat_pointer[0] = rtnval
        return rtnval_proxy
    
    
    _enrichment_calc_0_argtypes = frozenset()
    _enrichment_calc_1_argtypes = frozenset(((0, conv.MapIntDouble), ("incomp", conv.MapIntDouble)))
    _enrichment_calc_2_argtypes = frozenset(((0, material.Material), ("mat", material.Material)))
    
    def calc(self, *args, **kwargs):
        """no docstring for calc, please file a bug report!"""
        types = set([(i, type(a)) for i, a in enumerate(args)])
        types.update([(k, type(v)) for k, v in kwargs.iteritems()])
        # vtable-like dispatch for exactly matching types
        if types <= self._enrichment_calc_0_argtypes:
            return self._enrichment_calc_0(*args, **kwargs)
        if types <= self._enrichment_calc_1_argtypes:
            return self._enrichment_calc_1(*args, **kwargs)
        if types <= self._enrichment_calc_2_argtypes:
            return self._enrichment_calc_2(*args, **kwargs)
        # duck-typed dispatch based on whatever works!
        try:
            return self._enrichment_calc_0(*args, **kwargs)
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            return self._enrichment_calc_1(*args, **kwargs)
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            return self._enrichment_calc_2(*args, **kwargs)
        except (RuntimeError, TypeError, NameError):
            pass
        raise RuntimeError('method calc() could not be dispatched')
    
    def calc_params(self):
        """no docstring for calc_params, please file a bug report!"""
        (<cpp_fccomp.FCComp *> self._inst).calc_params()
    
    
    def deltaU_i_OverG(self, i):
        """no docstring for deltaU_i_OverG, please file a bug report!"""
        cdef double rtnval
        rtnval = (<cpp_enrichment.Enrichment *> self._inst).deltaU_i_OverG(i)
        return float(rtnval)
    
    
    def get_Ei(self, M_i):
        """no docstring for get_Ei, please file a bug report!"""
        cdef double rtnval
        rtnval = (<cpp_enrichment.Enrichment *> self._inst).get_Ei(<double> M_i)
        return float(rtnval)
    
    
    def get_Si(self, M_i):
        """no docstring for get_Si, please file a bug report!"""
        cdef double rtnval
        rtnval = (<cpp_enrichment.Enrichment *> self._inst).get_Si(<double> M_i)
        return float(rtnval)
    
    
    def get_alphastar_i(self, M_i):
        """no docstring for get_alphastar_i, please file a bug report!"""
        cdef double rtnval
        rtnval = (<cpp_enrichment.Enrichment *> self._inst).get_alphastar_i(<double> M_i)
        return float(rtnval)
    
    
    def initialize(self, ep):
        """no docstring for initialize, please file a bug report!"""
        cdef enrichment_parameters.EnrichmentParameters ep_proxy
        ep_proxy = <enrichment_parameters.EnrichmentParameters> ep
        (<cpp_enrichment.Enrichment *> self._inst).initialize((<cpp_enrichment_parameters.EnrichmentParameters *> ep_proxy._inst)[0])
    
    
    def xP_i(self, i):
        """no docstring for xP_i, please file a bug report!"""
        cdef double rtnval
        rtnval = (<cpp_enrichment.Enrichment *> self._inst).xP_i(i)
        return float(rtnval)
    
    
    def xW_i(self, i):
        """no docstring for xW_i, please file a bug report!"""
        cdef double rtnval
        rtnval = (<cpp_enrichment.Enrichment *> self._inst).xW_i(i)
        return float(rtnval)
    
    
